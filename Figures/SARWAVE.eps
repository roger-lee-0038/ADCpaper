%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SARWAVE.pdf
%%Creator: Adobe Acrobat 22.1.0
%%For: lwzz0
%%CreationDate: 2022/5/30, 13:40:41
%%BoundingBox: 0 0 1137 605
%%HiResBoundingBox: 0 0 1136.8981 604.5284
%%CropBox: 0 0 1136.8981 604.5284
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1181 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.425dc87, 2021/10/27-16:20:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® Visio® LTSC"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Visio® LTSC"
   xmp:CreateDate="2022-05-30T13:40:03+08:00"
   xmp:ModifyDate="2022-05-30T13:40:33+08:00"
   xmp:MetadataDate="2022-05-30T13:40:33+08:00"
   xmpMM:DocumentID="uuid:6B01959B-EE3A-43FC-B433-36C665D68136"
   xmpMM:InstanceID="uuid:3f059943-c7a7-4c8d-9501-a64bd2eefab9">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>李 王臻</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -604.528 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 604.528 li
1136.9 604.528 li
1136.9 0 li
cp
clp
gsave
0 605.478 mo
1137 605.478 li
1137 -.522034 li
0 -.522034 li
cp
clp
gsave
0 900.478 mo
1154.52 900.478 li
1154.52 -747.242 li
0 -747.242 li
cp
eclp
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
0 900.537 mo
1154.55 900.537 li
1154.55 -747.243 li
0 -747.243 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
238.829 555.275 mo
455.125 555.275 li
455.125 162.771 li
238.829 162.771 li
cp
false sop
/1 
[/DeviceCMYK] /CSA add_res
.166293 .082826 0 0 cmyk
ef
238.829 555.275 mo
455.125 555.275 li
455.125 162.771 li
238.829 162.771 li
cp
.874327 .707973 .187198 0 cmyk
.55 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
689.272 554.32 mo
1029.03 554.32 li
1029.03 161.816 li
689.272 161.816 li
cp
.00628672 .137575 .155398 0 cmyk
ef
689.272 554.32 mo
1029.03 554.32 li
1029.03 161.816 li
689.272 161.816 li
cp
.874327 .707973 .187198 0 cmyk
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
455.457 554.956 mo
689.299 554.956 li
689.299 162.135 li
455.457 162.135 li
cp
.144869 0 .196231 0 cmyk
ef
455.457 554.956 mo
689.299 554.956 li
689.299 162.135 li
455.457 162.135 li
cp
.874327 .707973 .187198 0 cmyk
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
597.607 375.014 mo
596.198 375.014 595.48 376.068 595.48 378.168 cv
595.48 380.1 596.118 381.063 597.341 381.063 cv
597.58 381.063 597.82 381.041 598.032 380.994 cv
598.245 380.949 598.431 380.877 598.617 380.779 cv
598.803 380.683 598.989 380.567 599.149 380.431 cv
599.309 380.296 599.415 380.185 599.468 380.1 cv
599.521 380.012 599.574 379.887 599.601 379.72 cv
599.654 379.556 599.681 379.33 599.681 379.044 cv
599.681 377.744 599.495 376.747 599.149 376.054 cv
598.803 375.362 598.298 375.014 597.607 375.014 cv
cp
597.713 373.9 mo
599.309 373.9 600.505 374.383 601.356 375.349 cv
602.18 376.314 602.605 377.712 602.605 379.543 cv
602.605 382.023 601.994 383.975 600.744 385.4 cv
599.495 386.827 597.713 387.626 595.374 387.798 cv
594.869 387.212 li
594.869 386.496 li
595.587 386.482 596.225 386.368 596.73 386.156 cv
597.235 385.944 597.687 385.644 598.086 385.257 cv
598.458 384.869 598.777 384.373 599.016 383.774 cv
599.282 383.174 599.468 382.402 599.574 381.461 cv
599.468 381.421 li
598.963 381.774 598.458 382.028 597.953 382.187 cv
597.474 382.347 596.863 382.426 596.171 382.426 cv
595.028 382.426 594.151 382.073 593.513 381.368 cv
592.848 380.659 592.529 379.678 592.529 378.418 cv
592.529 377.534 592.742 376.747 593.167 376.054 cv
593.566 375.362 594.178 374.829 594.949 374.457 cv
595.719 374.086 596.65 373.9 597.713 373.9 cv
cp
.997223 .918425 .647791 .507591 cmyk
ef
604.041 409.614 mo
603.722 409.614 603.403 409.662 603.11 409.758 cv
602.844 409.853 602.578 409.983 602.366 410.145 cv
602.153 410.309 601.994 410.442 601.914 410.543 cv
601.834 410.646 601.781 410.795 601.754 410.986 cv
601.728 411.18 601.701 411.516 601.701 412.002 cv
601.701 413.214 601.861 414.127 602.206 414.737 cv
602.552 415.347 603.057 415.652 603.775 415.652 cv
604.466 415.652 604.998 415.395 605.37 414.88 cv
605.716 414.368 605.902 413.572 605.902 412.498 cv
605.902 411.551 605.742 410.832 605.423 410.344 cv
605.104 409.858 604.652 409.614 604.041 409.614 cv
cp
606.619 402.868 mo
607.178 403.555 li
607.178 404.174 li
605.716 404.205 604.519 404.654 603.615 405.521 cv
602.711 406.386 602.127 407.625 601.834 409.235 cv
601.914 409.275 li
602.445 408.917 602.951 408.657 603.482 408.49 cv
604.014 408.325 604.599 408.24 605.21 408.24 cv
605.981 408.24 606.619 408.407 607.178 408.744 cv
607.736 409.079 608.135 409.551 608.427 410.161 cv
608.693 410.771 608.853 411.482 608.853 412.291 cv
608.853 413.172 608.666 413.949 608.294 414.623 cv
607.922 415.297 607.337 415.822 606.566 416.199 cv
605.795 416.578 604.838 416.766 603.722 416.766 cv
602.685 416.766 601.807 416.562 601.063 416.151 cv
600.319 415.74 599.76 415.132 599.362 414.328 cv
598.963 413.527 598.777 412.551 598.777 411.405 cv
598.777 409.853 599.096 408.45 599.76 407.198 cv
600.398 405.943 601.329 404.935 602.552 404.174 cv
603.748 403.41 605.104 402.975 606.619 402.868 cv
cp
592.343 402.868 mo
593.619 402.868 li
593.566 403.505 593.54 404.388 593.54 405.516 cv
593.54 413.832 li
593.54 414.217 593.566 414.506 593.619 414.702 cv
593.646 414.899 593.726 415.058 593.832 415.18 cv
593.938 415.302 594.098 415.397 594.31 415.469 cv
594.523 415.538 594.789 415.591 595.081 415.628 cv
595.401 415.663 595.826 415.689 596.331 415.702 cv
596.331 416.607 li
587.717 416.607 li
587.717 415.702 li
588.462 415.668 588.993 415.623 589.313 415.567 cv
589.632 415.512 589.871 415.427 590.03 415.315 cv
590.19 415.201 590.323 415.042 590.403 414.838 cv
590.456 414.631 590.509 414.297 590.509 413.832 cv
590.509 406.641 li
590.509 406.367 590.456 406.171 590.349 406.052 cv
590.243 405.932 590.11 405.874 589.924 405.874 cv
589.764 405.874 589.525 405.951 589.233 406.102 cv
588.914 406.256 588.435 406.566 587.744 407.039 cv
587.133 405.983 li
cp
ef
585.484 396.234 mo
597.767 396.234 li
610.049 396.234 li
610.049 397.507 li
597.767 397.507 li
585.484 397.507 li
cp
ef
613.877 389.339 mo
619.38 389.339 li
619.38 389.997 li
619.035 390.037 618.795 390.132 618.609 390.286 cv
618.45 390.438 618.37 390.652 618.37 390.931 cv
618.37 391.151 618.397 391.363 618.423 391.573 cv
618.476 391.783 618.556 392.117 618.689 392.573 cv
620.656 399.717 li
623.129 392.602 li
623.208 392.324 623.288 392.064 623.341 391.817 cv
623.395 391.573 623.448 391.313 623.448 391.042 cv
623.448 390.716 623.341 390.467 623.182 390.294 cv
623.022 390.122 622.756 390.024 622.411 389.997 cv
622.411 389.339 li
626.691 389.339 li
626.691 389.997 li
626.452 390.037 626.239 390.117 626.053 390.241 cv
625.867 390.363 625.707 390.538 625.575 390.766 cv
625.442 390.997 625.255 391.369 625.069 391.886 cv
620.896 402.988 li
618.583 402.988 li
615.313 391.846 li
615.153 391.35 615.02 390.997 614.94 390.788 cv
614.834 390.578 614.701 390.408 614.542 390.281 cv
614.382 390.151 614.17 390.056 613.877 389.997 cv
cp
ef
635.996 400.454 mo
635.624 400.454 635.331 400.643 635.092 401.022 cv
634.879 401.404 634.746 401.951 634.693 402.667 cv
637.139 402.667 li
637.112 401.921 637.033 401.367 636.847 401.001 cv
636.661 400.635 636.395 400.454 635.996 400.454 cv
cp
636.102 399.693 mo
636.554 399.693 636.953 399.743 637.272 399.847 cv
637.618 399.95 637.91 400.091 638.149 400.274 cv
638.388 400.457 638.575 400.677 638.734 400.935 cv
638.92 401.242 639.053 401.595 639.159 401.996 cv
639.239 402.394 639.292 402.882 639.292 403.455 cv
634.667 403.455 li
634.667 404.338 634.826 404.985 635.145 405.402 cv
635.438 405.818 635.916 406.028 636.554 406.028 cv
636.926 406.028 637.245 405.959 637.564 405.818 cv
637.857 405.68 638.176 405.436 638.521 405.083 cv
639.106 405.728 li
638.628 406.253 638.123 406.627 637.644 406.845 cv
637.139 407.065 636.581 407.174 635.943 407.174 cv
634.826 407.174 633.949 406.863 633.391 406.243 cv
632.806 405.622 632.513 404.699 632.513 403.479 cv
632.513 402.688 632.673 402.009 632.965 401.436 cv
633.258 400.863 633.683 400.431 634.215 400.136 cv
634.773 399.842 635.384 399.693 636.102 399.693 cv
cp
630.626 399.693 mo
630.918 399.693 631.237 399.725 631.556 399.789 cv
631.556 401.805 li
630.227 401.805 li
630.147 401.523 630.041 401.306 629.908 401.155 cv
629.775 401.004 629.589 400.929 629.376 400.929 cv
629.27 400.929 629.137 400.961 629.004 401.027 cv
628.871 401.091 628.765 401.184 628.658 401.303 cv
628.552 401.423 628.472 401.545 628.419 401.669 cv
628.366 401.794 628.339 401.919 628.313 402.046 cv
628.313 402.173 628.313 402.362 628.313 402.616 cv
628.313 404.946 li
628.313 405.41 628.313 405.733 628.366 405.916 cv
628.393 406.102 628.446 406.248 628.552 406.352 cv
628.658 406.458 628.844 406.532 629.084 406.574 cv
629.084 407.057 li
625.468 407.057 li
625.468 406.574 li
625.707 406.511 625.867 406.428 625.947 406.328 cv
626.053 406.224 626.106 406.086 626.133 405.911 cv
626.159 405.736 626.186 405.415 626.186 404.953 cv
626.186 401.951 li
626.186 401.59 626.186 401.324 626.159 401.152 cv
626.159 400.977 626.133 400.839 626.08 400.736 cv
626.026 400.629 625.973 400.545 625.867 400.478 cv
625.761 400.412 625.601 400.356 625.362 400.306 cv
625.362 399.81 li
627.382 399.751 li
628.313 399.751 li
628.206 400.855 li
628.286 400.876 li
628.658 400.457 629.031 400.157 629.403 399.972 cv
629.775 399.786 630.174 399.693 630.626 399.693 cv
cp
644.928 396.565 mo
645.354 396.565 645.726 396.6 646.045 396.669 cv
646.045 398.16 li
645.061 398.16 li
644.982 397.892 644.875 397.693 644.796 397.568 cv
644.689 397.441 644.556 397.377 644.397 397.377 cv
644.184 397.377 644.025 397.446 643.918 397.587 cv
643.785 397.725 643.732 397.921 643.679 398.178 cv
643.626 398.433 643.626 398.791 643.626 399.255 cv
643.626 399.81 li
645.035 399.81 li
645.035 400.722 li
643.626 400.722 li
643.626 405.224 li
643.626 405.59 643.626 405.847 643.679 405.999 cv
643.706 406.15 643.785 406.269 643.892 406.357 cv
643.971 406.444 644.157 406.516 644.423 406.574 cv
644.423 407.057 li
640.781 407.057 li
640.781 406.574 li
640.994 406.508 641.153 406.431 641.26 406.349 cv
641.339 406.267 641.393 406.15 641.446 406.001 cv
641.472 405.853 641.499 405.593 641.499 405.224 cv
641.499 400.722 li
640.595 400.722 li
640.595 400.218 li
640.861 400.181 641.047 400.133 641.153 400.078 cv
641.233 400.022 641.339 399.932 641.393 399.81 cv
641.446 399.688 641.499 399.497 641.526 399.234 cv
641.605 398.356 641.924 397.693 642.509 397.242 cv
643.067 396.791 643.892 396.565 644.928 396.565 cv
cp
ef
102.067 560.18 mo
102.07 255.276 li
95.4901 255.276 li
95.4874 560.18 li
cp
108.65 258.539 mo
98.7786 238.856 li
88.9103 258.539 li
cp
f
98.7786 555.812 mo
1095.89 555.812 li
1095.89 562.377 li
98.7786 562.377 li
cp
1092.59 549.245 mo
1112.32 559.095 li
1092.59 568.943 li
cp
f
101.751 353.593 mo
241.15 335.029 li
239.988 326.352 li
100.592 344.916 li
cp
0 .961578 .907591 0 cmyk
f
253.389 421.814 mo
344.73 422.764 li
344.65 431.518 li
253.299 430.569 li
cp
f
346.405 425.778 mo
349.462 430.632 li
349.409 430.539 li
350.951 432.869 li
350.898 432.794 li
352.466 435.023 li
352.36 434.882 li
353.929 436.93 li
353.769 436.736 li
355.364 438.606 li
355.151 438.386 li
356.747 440.018 li
356.428 439.726 li
358.076 441.1 li
357.624 440.771 li
359.272 441.827 li
358.767 441.551 li
360.442 442.347 li
359.937 442.145 li
361.612 442.702 li
361.133 442.572 li
362.835 442.93 li
362.489 442.872 li
364.217 443.09 li
363.871 443.06 li
365.573 443.14 li
365.36 443.135 li
368.816 443.116 li
368.869 451.87 li
365.28 451.889 li
363.287 451.796 li
361.213 451.533 li
359.086 451.088 li
356.906 450.366 li
354.726 449.332 li
352.626 447.973 li
350.632 446.286 li
348.771 444.395 li
346.99 442.315 li
345.315 440.097 li
343.693 437.76 li
342.072 435.352 li
338.961 430.449 li
cp
f
368.843 443.143 mo
455.723 443.169 li
455.696 451.923 li
368.816 451.897 li
cp
f
1022.7 335.241 mo
693.526 537.401 li
698.125 544.855 li
1027.3 342.696 li
cp
0 .302953 .905394 0 cmyk
f
243.042 329.915 mo
244.419 342.608 li
245.775 355.081 li
246.451 361.159 li
247.11 367.112 li
247.767 372.908 li
248.405 378.519 li
248.402 378.5 li
249.04 383.912 li
249.657 389.055 li
250.255 393.963 li
250.25 393.929 li
250.848 398.544 li
251.406 402.818 li
251.403 402.794 li
251.943 406.755 li
251.932 406.694 li
252.472 410.275 li
252.467 410.248 li
252.967 413.432 li
252.953 413.363 li
253.432 416.127 li
253.424 416.084 li
253.863 418.472 li
253.833 418.321 li
254.272 420.31 li
254.243 420.188 li
254.663 421.86 li
254.626 421.727 li
255.006 423.059 li
254.915 422.777 li
255.293 423.831 li
255.165 423.512 li
255.524 424.308 li
255.234 423.772 li
255.575 424.308 li
254.963 423.547 li
255.303 423.884 li
254.163 423.064 li
254.482 423.223 li
252.52 422.762 li
252.839 422.762 li
250.983 423.173 li
251.284 423.032 li
250.09 423.852 li
250.688 423.276 li
250.215 423.812 li
250.795 423.035 li
257.834 428.258 li
257.042 429.322 li
255.66 430.656 li
253.812 431.516 li
251.483 431.516 li
249.604 430.577 li
248.413 429.388 li
247.647 428.178 li
247.094 426.948 li
246.605 425.592 li
246.169 424.048 li
245.717 422.252 li
245.249 420.125 li
244.792 417.639 li
244.303 414.816 li
243.797 411.585 li
243.252 407.962 li
242.707 403.961 li
242.149 399.667 li
241.548 395.035 li
240.947 390.095 li
240.328 384.933 li
239.687 379.513 li
239.049 373.892 li
238.39 368.072 li
237.733 362.125 li
237.053 356.026 li
235.697 343.55 li
234.322 330.856 li
cp
0 .961578 .907591 0 cmyk
f
227.23 337.597 mo
96.6625 402.481 li
100.576 410.317 li
231.14 345.433 li
cp
0 .302953 .905394 0 cmyk
f
252.395 536.732 mo
698.099 537.496 li
698.099 546.25 li
252.379 545.486 li
cp
f
233.163 342.417 mo
234.498 357.578 li
235.835 372.656 li
237.17 387.615 li
237.167 387.599 li
238.544 402.362 li
239.919 416.859 li
239.916 416.838 li
241.333 431.022 li
241.33 430.998 li
242.785 444.785 li
242.785 444.769 li
243.521 451.494 li
243.518 451.47 li
244.276 458.075 li
245.034 464.553 li
245.031 464.529 li
245.807 470.875 li
246.584 477.05 li
246.578 477.011 li
247.397 483.059 li
247.394 483.04 li
248.211 488.908 li
248.208 488.892 li
249.027 494.604 li
249.019 494.553 li
249.877 500.084 li
249.872 500.06 li
250.731 505.393 li
250.723 505.353 li
251.6 510.504 li
251.592 510.457 li
252.488 515.391 li
252.48 515.34 li
253.397 520.076 li
253.387 520.02 li
254.322 524.538 li
254.304 524.45 li
255.282 528.729 li
255.269 528.678 li
256.247 532.737 li
256.226 532.652 li
257.223 536.451 li
257.196 536.361 li
258.214 539.921 li
249.776 542.322 li
248.748 538.714 li
247.727 534.825 li
246.732 530.7 li
245.741 526.355 li
244.789 521.765 li
243.861 516.977 li
242.955 511.995 li
242.072 506.798 li
241.208 501.435 li
240.344 495.866 li
239.523 490.123 li
238.704 484.237 li
237.882 478.159 li
237.101 471.938 li
236.322 465.58 li
235.561 459.073 li
234.801 452.457 li
234.062 445.711 li
232.605 431.903 li
231.185 417.695 li
229.808 403.171 li
228.431 388.4 li
227.094 373.428 li
225.759 358.344 li
224.422 343.184 li
cp
f
230.446 278.568 mo
173.589 278.568 li
173.589 287.322 li
230.446 287.322 li
cp
.61709 .780514 0 0 cmyk
f
233.158 281.406 mo
248.062 539.526 li
239.305 540.03 li
224.401 281.91 li
cp
f
241.224 536.732 mo
525.774 536.854 li
525.748 545.608 li
241.219 545.486 li
cp
f
530.48 543.661 mo
544.809 286.049 li
536.036 285.571 li
521.733 543.176 li
cp
f
664.575 536.732 mo
800.557 537.008 li
800.531 545.762 li
664.548 545.486 li
cp
f
802.923 542.775 mo
819.831 281.963 li
811.058 281.38 li
794.177 542.21 li
cp
f
813.584 278.568 mo
1031.45 279.894 li
1031.4 288.648 li
813.504 287.322 li
cp
f
349.383 234.558 mo
349.356 247.69 li
352.652 247.69 li
352.652 234.558 li
cp
349.356 257.531 mo
349.356 270.663 li
352.652 270.663 li
352.652 257.531 li
cp
349.356 280.504 mo
349.356 293.635 li
352.652 293.635 li
352.652 280.504 li
cp
349.356 303.504 mo
349.356 316.624 li
352.626 316.624 li
352.652 303.504 li
cp
349.356 326.474 mo
349.356 339.605 li
352.626 339.605 li
352.626 326.474 li
cp
349.329 349.452 mo
349.329 362.583 li
352.626 362.583 li
352.626 349.452 li
cp
349.329 372.433 mo
349.329 385.564 li
352.626 385.564 li
352.626 372.433 li
cp
349.329 395.411 mo
349.329 408.543 li
352.626 408.543 li
352.626 395.411 li
cp
349.329 418.392 mo
349.329 431.524 li
352.599 431.524 li
352.626 418.392 li
cp
.899962 .828183 .680751 .520256 cmyk
f
33.9372 425.17 mo
41.087 425.17 li
41.087 426.022 li
40.6388 426.075 40.307 426.199 40.0914 426.396 cv
39.876 426.595 39.7684 426.873 39.7684 427.234 cv
39.7684 427.518 39.7942 427.796 39.8457 428.067 cv
39.8976 428.338 40.0052 428.77 40.169 429.364 cv
42.7291 438.628 li
45.9223 429.401 li
46.0525 429.041 46.1536 428.701 46.2253 428.383 cv
46.2998 428.064 46.337 427.73 46.337 427.377 cv
46.337 426.956 46.2253 426.632 46.0073 426.409 cv
45.7867 426.186 45.4491 426.056 44.9918 426.022 cv
44.9918 425.17 li
50.564 425.17 li
50.564 426.022 li
50.237 426.075 49.9579 426.178 49.7292 426.337 cv
49.5006 426.497 49.2959 426.725 49.1098 427.022 cv
48.9237 427.319 48.7057 427.802 48.4558 428.473 cv
43.0394 442.872 li
40.0528 442.872 li
35.7862 428.423 li
35.5964 427.778 35.4371 427.319 35.3077 427.048 cv
35.1785 426.778 35.0104 426.558 34.8036 426.39 cv
34.5968 426.223 34.3078 426.099 33.9372 426.022 cv
cp
.997223 .918425 .647791 .507591 cmyk
ef
49.5857 435.251 mo
58.7735 435.251 li
58.7735 438.264 li
57.4708 438.264 li
57.2634 437.665 57.0853 437.259 56.9391 437.047 cv
56.7929 436.834 56.6201 436.667 56.418 436.545 cv
56.2133 436.421 55.8704 436.36 55.3812 436.36 cv
53.5469 436.36 li
53.5469 441.185 li
54.7645 441.185 li
55.0622 441.185 55.2908 441.14 55.453 441.047 cv
55.6152 440.957 55.7481 440.803 55.8518 440.588 cv
55.9555 440.373 56.0432 440.071 56.1123 439.678 cv
57.1863 439.678 li
57.1863 443.811 li
56.1123 443.811 li
56.0379 443.413 55.9448 443.106 55.8385 442.888 cv
55.7295 442.671 55.5966 442.517 55.4397 442.426 cv
55.2802 442.339 55.0542 442.294 54.7645 442.294 cv
53.5469 442.294 li
53.5469 445.811 li
53.5469 446.305 53.5734 446.65 53.624 446.841 cv
53.6745 447.034 53.7728 447.188 53.9217 447.305 cv
54.0706 447.422 54.3311 447.509 54.698 447.568 cv
54.698 448.194 li
49.5857 448.194 li
49.5857 447.568 li
49.9207 447.485 50.1493 447.384 50.2742 447.268 cv
50.3965 447.151 50.4843 447 50.5295 446.814 cv
50.5773 446.626 50.6012 446.289 50.6012 445.803 cv
50.6012 437.638 li
50.6012 437.158 50.58 436.826 50.5401 436.638 cv
50.5002 436.452 50.4151 436.304 50.2875 436.19 cv
50.1626 436.076 49.926 435.97 49.5857 435.877 cv
cp
64.997 435.1 mo
65.5606 435.1 66.1003 435.129 66.6134 435.19 cv
67.1265 435.248 67.7114 435.354 68.3707 435.505 cv
68.3707 438.256 li
67.068 438.256 li
66.8979 437.543 66.6427 437.023 66.3077 436.696 cv
65.9727 436.37 65.4889 436.208 64.8535 436.208 cv
64.2846 436.208 63.8273 436.357 63.4817 436.654 cv
63.1361 436.951 62.9633 437.354 62.9633 437.866 cv
62.9633 438.232 63.0351 438.551 63.176 438.819 cv
63.3195 439.089 63.5588 439.352 63.8938 439.607 cv
64.2314 439.864 64.7179 440.156 65.3586 440.485 cv
66.1375 440.888 66.749 441.286 67.1956 441.673 cv
67.6423 442.063 67.9719 442.487 68.1846 442.944 cv
68.3973 443.403 68.5036 443.936 68.5036 444.543 cv
68.5036 445.321 68.3228 445.994 67.9613 446.567 cv
67.5997 447.138 67.076 447.578 66.3848 447.883 cv
65.6936 448.191 64.896 448.345 63.9895 448.345 cv
63.3434 448.345 62.6708 448.308 61.9717 448.236 cv
61.2698 448.162 60.6132 448.056 59.9991 447.918 cv
59.9991 444.997 li
61.3017 444.997 li
61.4586 445.75 61.7244 446.31 62.094 446.679 cv
62.4635 447.05 63.0085 447.236 63.7236 447.236 cv
64.351 447.236 64.8402 447.074 65.1911 446.75 cv
65.542 446.429 65.7201 445.971 65.7201 445.376 cv
65.7201 444.795 65.55 444.31 65.2097 443.92 cv
64.8721 443.533 64.2846 443.129 63.4471 442.713 cv
62.7506 442.371 62.171 442.018 61.7031 441.655 cv
61.2379 441.291 60.871 440.869 60.6025 440.389 cv
60.334 439.909 60.1984 439.36 60.1984 438.739 cv
60.1984 437.962 60.3925 437.301 60.778 436.757 cv
61.1635 436.214 61.7244 435.802 62.4555 435.521 cv
63.1866 435.24 64.0347 435.1 64.997 435.1 cv
cp
ef
78.0397 273.315 mo
77.5053 273.315 77.1198 273.315 76.8885 273.342 cv
76.8885 287.852 li
77.0427 287.879 77.4362 287.879 78.0636 287.879 cv
79.3928 287.879 80.4243 287.614 81.1607 287.083 cv
81.8971 286.553 82.4581 285.757 82.8409 284.643 cv
83.2264 283.555 83.4178 282.202 83.4178 280.531 cv
83.4178 278.17 82.9552 276.366 82.0327 275.146 cv
81.1129 273.925 79.781 273.315 78.0397 273.315 cv
cp
58.8984 273.315 mo
58.3641 273.315 57.9786 273.315 57.7473 273.342 cv
57.7473 287.852 li
57.9015 287.879 58.2949 287.879 58.9224 287.879 cv
60.2516 287.879 61.2831 287.614 62.0195 287.083 cv
62.7559 286.553 63.3169 285.757 63.6997 284.643 cv
64.0852 283.555 64.2766 282.202 64.2766 280.531 cv
64.2766 278.17 63.814 276.366 62.8915 275.146 cv
61.9717 273.925 60.6397 273.315 58.8984 273.315 cv
cp
71.4971 271.803 mo
78.2204 271.803 li
79.6587 271.803 80.863 271.909 81.828 272.148 cv
82.7931 272.36 83.6491 272.705 84.3988 273.209 cv
85.1512 273.687 85.7546 274.244 86.2172 274.907 cv
86.6771 275.597 87.0201 276.366 87.2434 277.241 cv
87.4694 278.117 87.581 279.125 87.581 280.239 cv
87.581 282.043 87.2992 283.581 86.7409 284.855 cv
86.2411 286.022 85.518 286.95 84.5743 287.64 cv
83.6305 288.356 82.5033 288.834 81.1926 289.099 cv
80.193 289.311 78.917 289.418 77.3671 289.418 cv
71.4971 289.418 li
71.4971 288.569 li
71.9623 288.436 72.2787 288.303 72.4462 288.144 cv
72.6163 287.985 72.7306 287.799 72.7891 287.534 cv
72.8503 287.295 72.8795 286.818 72.8795 286.181 cv
72.8795 275.066 li
72.8795 274.403 72.8529 273.952 72.7971 273.687 cv
72.7413 273.448 72.6269 273.236 72.4541 273.077 cv
72.2813 272.917 71.9623 272.785 71.4971 272.652 cv
cp
52.3559 271.803 mo
59.0792 271.803 li
60.5175 271.803 61.7218 271.909 62.6868 272.148 cv
63.6518 272.36 64.5079 272.705 65.2576 273.209 cv
66.0099 273.687 66.6134 274.244 67.076 274.907 cv
67.5359 275.597 67.8789 276.366 68.1022 277.241 cv
68.3281 278.117 68.4398 279.125 68.4398 280.239 cv
68.4398 282.043 68.158 283.581 67.5997 284.855 cv
67.0999 286.022 66.3768 286.95 65.433 287.64 cv
64.4893 288.356 63.3621 288.834 62.0514 289.099 cv
61.0518 289.311 59.7757 289.418 58.2258 289.418 cv
52.3559 289.418 li
52.3559 288.569 li
52.8211 288.436 53.1374 288.303 53.3049 288.144 cv
53.4751 287.985 53.5894 287.799 53.6479 287.534 cv
53.709 287.295 53.7383 286.818 53.7383 286.181 cv
53.7383 275.066 li
53.7383 274.403 53.7117 273.952 53.6559 273.687 cv
53.6 273.448 53.4857 273.236 53.3129 273.077 cv
53.1401 272.917 52.8211 272.785 52.3559 272.652 cv
cp
34.0943 271.803 mo
41.2438 271.803 li
41.2438 272.652 li
40.7959 272.705 40.4638 272.838 40.2485 273.023 cv
40.0329 273.236 39.9252 273.501 39.9252 273.872 cv
39.9252 274.164 39.951 274.429 40.0028 274.695 cv
40.0544 274.96 40.1624 275.411 40.3261 275.995 cv
42.886 285.253 li
46.0791 276.048 li
46.2094 275.676 46.3104 275.331 46.3822 275.013 cv
46.4566 274.695 46.4938 274.35 46.4938 274.005 cv
46.4938 273.581 46.3822 273.262 46.1642 273.05 cv
45.9435 272.811 45.6059 272.679 45.1486 272.652 cv
45.1486 271.803 li
50.7209 271.803 li
50.7209 272.652 li
50.3939 272.705 50.1147 272.811 49.8861 272.97 cv
49.6575 273.13 49.4528 273.368 49.2667 273.66 cv
49.0806 273.952 48.8626 274.429 48.6127 275.119 cv
43.1962 289.497 li
40.2097 289.497 li
35.943 275.066 li
35.7535 274.403 35.594 273.952 35.4648 273.687 cv
35.3353 273.421 35.1673 273.183 34.9605 273.023 cv
34.7536 272.864 34.4649 272.732 34.0943 272.652 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
459.445 449.913 mo
472.604 449.859 li
472.578 446.578 li
459.418 446.628 li
cp
482.467 449.82 mo
495.627 449.769 li
495.6 446.488 li
482.441 446.538 li
cp
505.49 449.73 mo
518.65 449.679 li
518.65 446.395 li
505.49 446.448 li
cp
528.513 449.639 mo
541.672 449.589 li
541.672 446.305 li
528.513 446.358 li
cp
551.562 449.549 mo
564.721 449.499 li
564.695 446.215 li
551.535 446.268 li
cp
574.584 449.459 mo
587.744 449.409 li
587.717 446.124 li
574.558 446.177 li
cp
597.607 449.369 mo
610.767 449.316 li
610.767 446.034 li
597.607 446.085 li
cp
620.63 449.279 mo
633.789 449.225 li
633.789 445.944 li
620.63 445.994 li
cp
643.679 449.188 mo
650.591 449.162 li
650.591 445.878 li
643.652 445.904 li
cp
.997223 .918425 .647791 .507591 cmyk
f
101.177 343.759 mo
114.336 343.709 li
114.326 340.428 li
101.166 340.478 li
cp
124.207 343.672 mo
137.367 343.624 li
137.354 340.34 li
124.194 340.39 li
cp
147.235 343.584 mo
160.395 343.537 li
160.382 340.253 li
147.225 340.303 li
cp
170.266 343.5 mo
183.425 343.449 li
183.412 340.165 li
170.253 340.215 li
cp
193.294 343.412 mo
206.453 343.362 li
206.44 340.077 li
193.28 340.128 li
cp
216.324 343.324 mo
229.481 343.274 li
229.471 339.993 li
216.311 340.04 li
cp
239.352 343.237 mo
252.512 343.186 li
252.499 339.905 li
239.339 339.955 li
cp
262.38 343.149 mo
275.54 343.099 li
275.529 339.817 li
262.37 339.868 li
cp
285.419 343.062 mo
298.579 343.011 li
298.552 339.73 li
285.392 339.78 li
cp
308.442 342.974 mo
321.601 342.926 li
321.575 339.642 li
308.415 339.693 li
cp
331.464 342.889 mo
344.624 342.839 li
344.624 339.555 li
331.464 339.605 li
cp
354.487 342.802 mo
367.646 342.751 li
367.646 339.467 li
354.487 339.518 li
cp
377.536 342.714 mo
390.696 342.664 li
390.669 339.382 li
377.509 339.43 li
cp
400.559 342.627 mo
413.718 342.576 li
413.692 339.295 li
400.532 339.343 li
cp
423.581 342.539 mo
436.741 342.489 li
436.741 339.207 li
423.581 339.258 li
cp
446.604 342.452 mo
459.764 342.401 li
459.764 339.12 li
446.604 339.17 li
cp
469.653 342.364 mo
482.813 342.316 li
482.786 339.032 li
469.627 339.083 li
cp
492.676 342.277 mo
505.836 342.229 li
505.809 338.945 li
492.649 338.995 li
cp
515.699 342.192 mo
528.858 342.141 li
528.858 338.857 li
515.699 338.908 li
cp
538.721 342.104 mo
551.881 342.054 li
551.881 338.77 li
538.721 338.82 li
cp
561.77 342.017 mo
574.93 341.966 li
574.903 338.685 li
561.744 338.732 li
cp
584.793 341.929 mo
597.953 341.879 li
597.926 338.597 li
584.766 338.648 li
cp
607.816 341.842 mo
620.975 341.791 li
620.975 338.51 li
607.816 338.56 li
cp
630.838 341.754 mo
643.998 341.704 li
643.998 338.422 li
630.838 338.473 li
cp
653.888 341.666 mo
667.047 341.619 li
667.021 338.335 li
653.861 338.385 li
cp
676.91 341.582 mo
690.07 341.531 li
690.043 338.247 li
676.884 338.297 li
cp
699.933 341.494 mo
713.092 341.444 li
713.092 338.159 li
699.933 338.21 li
cp
722.956 341.406 mo
736.115 341.356 li
736.115 338.075 li
722.956 338.122 li
cp
746.005 341.319 mo
759.164 341.269 li
759.138 337.987 li
745.978 338.035 li
cp
769.027 341.231 mo
782.187 341.181 li
782.16 337.9 li
769.001 337.95 li
cp
792.05 341.144 mo
805.21 341.093 li
805.21 337.812 li
792.05 337.862 li
cp
815.073 341.056 mo
828.232 341.009 li
828.232 337.724 li
815.073 337.775 li
cp
838.122 340.969 mo
851.282 340.921 li
851.255 337.637 li
838.095 337.687 li
cp
861.145 340.884 mo
874.304 340.833 li
874.278 337.549 li
861.118 337.6 li
cp
884.167 340.796 mo
897.327 340.746 li
897.327 337.462 li
884.167 337.512 li
cp
907.19 340.709 mo
920.35 340.658 li
920.35 337.377 li
907.19 337.425 li
cp
930.213 340.621 mo
943.372 340.571 li
943.372 337.289 li
930.213 337.34 li
cp
953.262 340.534 mo
966.421 340.483 li
966.395 337.202 li
953.235 337.252 li
cp
976.284 340.446 mo
989.444 340.398 li
989.444 337.114 li
976.284 337.165 li
cp
999.307 340.359 mo
1012.47 340.311 li
1012.47 337.027 li
999.307 337.077 li
cp
f
277.231 487.234 mo
278.834 487.234 li
278.834 498.108 li
279.262 498.108 li
279.562 498.108 279.801 498.079 279.972 498.018 cv
280.144 497.959 280.325 497.861 280.509 497.729 cv
280.695 497.596 280.982 497.355 281.37 497.007 cv
281.758 496.657 282.051 496.349 282.247 496.076 cv
282.447 495.805 282.58 495.569 282.649 495.368 cv
282.718 495.166 282.752 494.97 282.752 494.781 cv
282.752 494.187 282.378 493.84 281.628 493.736 cv
281.628 492.909 li
288.104 492.909 li
288.104 493.736 li
287.758 493.787 287.36 493.943 286.961 494.201 cv
286.562 494.458 285.897 494.999 285.02 495.827 cv
283.141 497.567 li
286.482 502.496 li
286.961 503.225 287.333 503.729 287.572 504.005 cv
287.785 504.281 287.998 504.475 288.157 504.591 cv
288.343 504.708 288.556 504.796 288.822 504.857 cv
288.822 505.708 li
282.495 505.708 li
282.495 504.857 li
282.883 504.78 283.077 504.578 283.077 504.249 cv
283.077 504.026 283 503.761 282.851 503.456 cv
282.699 503.151 282.404 502.676 281.963 502.031 cv
280.969 500.535 li
280.745 500.198 280.564 499.957 280.426 499.806 cv
280.288 499.655 280.152 499.54 280.017 499.464 cv
279.884 499.387 279.698 499.347 279.456 499.347 cv
278.834 499.347 li
278.834 501.978 li
278.834 502.795 278.86 503.361 278.914 503.668 cv
278.964 503.979 279.07 504.225 279.23 504.411 cv
279.389 504.597 279.687 504.745 280.128 504.857 cv
280.128 505.708 li
273.793 505.708 li
273.793 504.857 li
274.232 504.745 274.535 504.599 274.697 504.419 cv
274.862 504.236 274.968 503.995 275.022 503.689 cv
275.072 503.384 275.099 502.814 275.099 501.978 cv
275.099 491.916 li
275.099 490.996 275.085 490.338 275.059 489.943 cv
275.035 489.548 274.979 489.248 274.899 489.046 cv
274.817 488.845 274.695 488.685 274.535 488.569 cv
274.375 488.452 274.078 488.351 273.636 488.266 cv
273.636 487.415 li
cp
ef
422.199 482.202 mo
424.884 482.908 426.958 484.735 428.42 487.685 cv
429.882 490.635 430.6 494.126 430.6 498.161 cv
430.6 502.193 429.882 505.687 428.42 508.637 cv
426.958 511.587 424.884 513.414 422.199 514.12 cv
421.88 513.062 li
423.954 512.279 425.549 510.573 426.612 507.947 cv
427.702 505.318 428.234 502.061 428.234 498.174 cv
428.234 494.277 427.702 491.015 426.612 488.38 cv
425.549 485.749 423.954 484.043 421.88 483.26 cv
cp
299.695 482.202 mo
300.014 483.26 li
297.94 484.043 296.345 485.749 295.282 488.38 cv
294.219 491.015 293.66 494.277 293.66 498.174 cv
293.66 502.061 294.219 505.318 295.282 507.947 cv
296.345 510.573 297.94 512.279 300.014 513.062 cv
299.695 514.12 li
297.01 513.414 294.936 511.587 293.474 508.637 cv
292.012 505.687 291.294 502.193 291.294 498.161 cv
291.294 494.126 292.012 490.635 293.474 487.685 cv
294.936 484.735 297.01 482.908 299.695 482.202 cv
cp
ef
301.157 488.096 mo
308.309 488.096 li
308.309 488.948 li
307.857 489.001 307.538 489.126 307.325 489.322 cv
307.112 489.521 307.006 489.8 307.006 490.163 cv
307.006 490.447 307.033 490.723 307.086 490.993 cv
307.139 491.264 307.245 491.696 307.405 492.29 cv
309.957 501.554 li
313.147 492.33 li
313.28 491.967 313.386 491.627 313.466 491.309 cv
313.519 490.991 313.572 490.656 313.572 490.304 cv
313.572 489.882 313.466 489.561 313.227 489.335 cv
313.014 489.112 312.669 488.983 312.217 488.948 cv
312.217 488.096 li
317.799 488.096 li
317.799 488.948 li
317.48 489.001 317.188 489.107 316.949 489.266 cv
316.736 489.426 316.523 489.651 316.337 489.948 cv
316.151 490.245 315.939 490.731 315.699 491.399 cv
310.276 505.798 li
307.272 505.798 li
303.018 491.349 li
302.832 490.704 302.673 490.245 302.54 489.975 cv
302.407 489.704 302.247 489.484 302.035 489.317 cv
301.822 489.15 301.529 489.028 301.157 488.948 cv
cp
ef
330.135 501.562 mo
330.587 501.562 331.039 501.58 331.491 501.618 cv
331.916 501.657 332.501 501.74 333.192 501.864 cv
333.192 504.074 li
331.943 504.074 li
331.81 503.671 331.65 503.358 331.464 503.135 cv
331.305 502.915 331.092 502.761 330.906 502.676 cv
330.693 502.591 330.427 502.549 330.135 502.549 cv
329.736 502.549 329.391 502.642 329.151 502.833 cv
328.912 503.021 328.779 503.289 328.779 503.628 cv
328.779 503.87 328.832 504.074 328.912 504.247 cv
328.992 504.416 329.151 504.581 329.391 504.743 cv
329.603 504.904 330.055 505.122 330.693 505.393 cv
331.65 505.785 332.315 506.21 332.714 506.668 cv
333.112 507.127 333.299 507.677 333.299 508.321 cv
333.299 509.271 332.98 509.998 332.288 510.507 cv
331.624 511.016 330.667 511.271 329.417 511.271 cv
328.38 511.271 327.211 511.122 325.935 510.825 cv
325.935 508.56 li
327.211 508.56 li
327.344 509.136 327.583 509.565 327.928 509.854 cv
328.247 510.141 328.699 510.284 329.231 510.284 cv
329.71 510.284 330.082 510.178 330.321 509.963 cv
330.56 509.748 330.693 509.435 330.693 509.024 cv
330.693 508.764 330.64 508.544 330.507 508.361 cv
330.401 508.178 330.215 508.003 329.975 507.833 cv
329.71 507.666 329.284 507.446 328.646 507.175 cv
327.769 506.791 327.131 506.363 326.732 505.899 cv
326.333 505.435 326.121 504.912 326.121 504.331 cv
326.121 503.761 326.28 503.268 326.626 502.851 cv
326.945 502.435 327.423 502.116 328.035 501.894 cv
328.646 501.673 329.337 501.562 330.135 501.562 cv
cp
323.409 501.562 mo
323.781 501.562 324.18 501.604 324.605 501.684 cv
324.605 504.302 li
322.904 504.302 li
322.797 503.936 322.638 503.655 322.478 503.459 cv
322.292 503.262 322.08 503.164 321.787 503.164 cv
321.628 503.164 321.495 503.207 321.309 503.292 cv
321.149 503.376 320.99 503.498 320.857 503.652 cv
320.697 503.809 320.618 503.965 320.538 504.127 cv
320.485 504.289 320.458 504.451 320.431 504.615 cv
320.405 504.78 320.405 505.026 320.405 505.355 cv
320.405 508.38 li
320.405 508.979 320.431 509.401 320.458 509.64 cv
320.511 509.881 320.591 510.069 320.724 510.205 cv
320.857 510.34 321.096 510.438 321.415 510.494 cv
321.415 511.12 li
316.71 511.12 li
316.71 510.494 li
317.029 510.412 317.241 510.303 317.348 510.17 cv
317.48 510.038 317.56 509.857 317.587 509.632 cv
317.64 509.404 317.64 508.99 317.64 508.387 cv
317.64 504.491 li
317.64 504.024 317.64 503.679 317.64 503.453 cv
317.613 503.228 317.587 503.05 317.507 502.912 cv
317.454 502.777 317.374 502.665 317.241 502.581 cv
317.108 502.496 316.896 502.421 316.603 502.358 cv
316.603 501.713 li
319.209 501.639 li
320.405 501.639 li
320.272 503.069 li
320.378 503.098 li
320.857 502.554 321.335 502.161 321.814 501.923 cv
322.292 501.681 322.824 501.562 323.409 501.562 cv
cp
336.09 499.344 mo
338.376 499.344 li
338.376 501.713 li
341.088 501.713 li
341.088 502.899 li
338.376 502.899 li
338.376 507.175 li
338.376 507.889 338.403 508.417 338.483 508.759 cv
338.536 509.101 338.642 509.35 338.802 509.512 cv
338.961 509.674 339.174 509.754 339.387 509.754 cv
339.706 509.754 339.971 509.701 340.211 509.592 cv
340.423 509.486 340.609 509.35 340.796 509.186 cv
341.407 509.982 li
340.849 510.457 340.344 510.788 339.892 510.982 cv
339.44 511.176 338.935 511.271 338.43 511.271 cv
337.499 511.271 336.781 511.016 336.329 510.507 cv
335.851 509.998 335.638 509.228 335.638 508.199 cv
335.638 502.899 li
334.442 502.899 li
334.442 502.244 li
334.814 502.183 335.106 502.087 335.292 501.96 cv
335.479 501.832 335.611 501.665 335.718 501.453 cv
335.824 501.241 335.904 500.965 335.957 500.623 cv
336.037 500.283 336.063 499.856 336.09 499.344 cv
cp
ef
349.914 499.013 mo
365.843 499.013 li
365.843 497.297 li
349.914 497.297 li
cp
ef
379.955 488.096 mo
387.107 488.096 li
387.107 488.948 li
386.655 489.001 386.336 489.126 386.123 489.322 cv
385.91 489.521 385.804 489.8 385.804 490.163 cv
385.804 490.447 385.831 490.723 385.884 490.993 cv
385.937 491.264 386.043 491.696 386.203 492.29 cv
388.755 501.554 li
391.945 492.33 li
392.078 491.967 392.184 491.627 392.264 491.309 cv
392.317 490.991 392.371 490.656 392.371 490.304 cv
392.371 489.882 392.264 489.561 392.025 489.335 cv
391.812 489.112 391.467 488.983 391.015 488.948 cv
391.015 488.096 li
396.598 488.096 li
396.598 488.948 li
396.279 489.001 395.986 489.107 395.747 489.266 cv
395.534 489.426 395.321 489.651 395.135 489.948 cv
394.949 490.245 394.737 490.731 394.497 491.399 cv
389.074 505.798 li
386.07 505.798 li
381.816 491.349 li
381.63 490.704 381.471 490.245 381.338 489.975 cv
381.205 489.704 381.045 489.484 380.833 489.317 cv
380.62 489.15 380.328 489.028 379.955 488.948 cv
cp
ef
413.373 511.727 mo
413.133 511.902 412.947 512.096 412.841 512.306 cv
412.735 512.513 412.655 512.754 412.655 513.024 cv
412.655 513.481 412.868 513.818 413.266 514.035 cv
413.665 514.253 414.277 514.362 415.127 514.362 cv
415.925 514.362 416.536 514.229 416.962 513.964 cv
417.361 513.698 417.573 513.324 417.573 512.844 cv
417.573 512.446 417.44 512.168 417.201 512.006 cv
416.935 511.844 416.563 511.764 416.084 511.764 cv
414.436 511.764 li
413.984 511.764 413.612 511.751 413.373 511.727 cv
cp
415.074 502.538 mo
414.622 502.538 414.277 502.721 414.037 503.085 cv
413.825 503.448 413.692 504.005 413.692 504.759 cv
413.692 505.554 413.825 506.146 414.037 506.536 cv
414.277 506.923 414.622 507.119 415.101 507.119 cv
415.526 507.119 415.872 506.939 416.111 506.578 cv
416.324 506.218 416.457 505.668 416.457 504.928 cv
416.457 504.151 416.324 503.557 416.111 503.151 cv
415.898 502.742 415.553 502.538 415.074 502.538 cv
cp
406.939 501.639 mo
408.135 501.639 li
408.135 508.38 li
408.135 508.987 408.135 509.401 408.189 509.626 cv
408.215 509.849 408.295 510.03 408.401 510.167 cv
408.534 510.303 408.747 510.412 409.093 510.494 cv
409.093 511.12 li
404.44 511.12 li
404.44 510.494 li
404.759 510.412 404.972 510.303 405.078 510.17 cv
405.211 510.038 405.291 509.857 405.317 509.632 cv
405.371 509.404 405.371 508.99 405.371 508.387 cv
405.371 503.979 li
405.371 503.538 405.344 503.223 405.291 503.037 cv
405.238 502.851 405.158 502.708 405.025 502.61 cv
404.892 502.512 404.653 502.427 404.334 502.358 cv
404.334 501.713 li
cp
415.101 501.562 mo
415.42 501.562 415.712 501.578 415.952 501.61 cv
416.217 501.642 416.457 501.676 416.696 501.713 cv
420.125 501.713 li
420.125 502.984 li
418.504 502.803 li
418.451 502.91 li
418.637 503.085 418.77 503.326 418.902 503.634 cv
419.009 503.941 419.062 504.308 419.062 504.737 cv
419.062 505.838 418.743 506.674 418.078 507.241 cv
417.387 507.809 416.403 508.096 415.127 508.096 cv
414.489 508.096 413.984 508.037 413.585 507.923 cv
413.266 508.21 413.107 508.515 413.107 508.844 cv
413.107 509.035 413.133 509.178 413.213 509.279 cv
413.293 509.382 413.426 509.459 413.639 509.512 cv
413.825 509.565 414.091 509.592 414.436 509.592 cv
416.802 509.592 li
417.839 509.592 418.637 509.799 419.168 510.21 cv
419.7 510.621 419.966 511.258 419.966 512.125 cv
419.966 512.802 419.753 513.383 419.381 513.868 cv
419.009 514.356 418.451 514.728 417.733 514.982 cv
417.015 515.24 416.164 515.367 415.181 515.367 cv
414.463 515.367 413.825 515.335 413.24 515.271 cv
412.655 515.21 412.15 515.094 411.751 514.927 cv
411.326 514.759 411.007 514.529 410.794 514.24 cv
410.555 513.948 410.448 513.579 410.448 513.131 cv
410.448 512.77 410.555 512.438 410.794 512.133 cv
411.033 511.831 411.352 511.571 411.751 511.356 cv
411.485 511.168 411.299 510.95 411.166 510.703 cv
411.06 510.457 411.007 510.152 411.007 509.791 cv
411.007 509.406 411.113 509.04 411.326 508.693 cv
411.538 508.345 411.937 507.966 412.469 507.555 cv
411.99 507.276 411.618 506.91 411.352 506.459 cv
411.113 506.008 410.98 505.477 410.98 504.87 cv
410.98 504.114 411.166 503.485 411.512 502.989 cv
411.884 502.493 412.362 502.13 412.974 501.904 cv
413.612 501.676 414.303 501.562 415.101 501.562 cv
cp
399.362 501.562 mo
399.814 501.562 400.266 501.58 400.718 501.618 cv
401.144 501.657 401.728 501.74 402.42 501.864 cv
402.42 504.074 li
401.17 504.074 li
401.037 503.671 400.878 503.358 400.692 503.135 cv
400.532 502.915 400.319 502.761 400.133 502.676 cv
399.921 502.591 399.655 502.549 399.362 502.549 cv
398.964 502.549 398.618 502.642 398.379 502.833 cv
398.14 503.021 398.007 503.289 398.007 503.628 cv
398.007 503.87 398.06 504.074 398.14 504.247 cv
398.219 504.416 398.379 504.581 398.618 504.743 cv
398.831 504.904 399.283 505.122 399.921 505.393 cv
400.878 505.785 401.542 506.21 401.941 506.668 cv
402.34 507.127 402.526 507.677 402.526 508.321 cv
402.526 509.271 402.207 509.998 401.516 510.507 cv
400.851 511.016 399.894 511.271 398.645 511.271 cv
397.608 511.271 396.438 511.122 395.162 510.825 cv
395.162 508.56 li
396.438 508.56 li
396.571 509.136 396.81 509.565 397.156 509.854 cv
397.475 510.141 397.927 510.284 398.459 510.284 cv
398.937 510.284 399.309 510.178 399.549 509.963 cv
399.788 509.748 399.921 509.435 399.921 509.024 cv
399.921 508.764 399.868 508.544 399.735 508.361 cv
399.628 508.178 399.442 508.003 399.203 507.833 cv
398.937 507.666 398.512 507.446 397.874 507.175 cv
396.996 506.791 396.358 506.363 395.96 505.899 cv
395.561 505.435 395.348 504.912 395.348 504.331 cv
395.348 503.761 395.508 503.268 395.853 502.851 cv
396.172 502.435 396.651 502.116 397.262 501.894 cv
397.874 501.673 398.565 501.562 399.362 501.562 cv
cp
405.45 497.93 mo
408.056 497.93 li
408.056 500.254 li
405.45 500.254 li
cp
ef
73.3022 538.358 mo
72.7678 538.358 72.385 538.369 72.1537 538.385 cv
72.1537 552.899 li
72.3079 552.925 72.6987 552.938 73.3288 552.938 cv
74.6554 552.938 75.6895 552.67 76.4259 552.137 cv
77.1624 551.604 77.7233 550.792 78.1061 549.699 cv
78.4889 548.609 78.683 547.235 78.683 545.585 cv
78.683 543.218 78.2204 541.425 77.2979 540.199 cv
76.3754 538.974 75.0435 538.358 73.3022 538.358 cv
cp
66.7623 536.849 mo
73.4856 536.849 li
74.9239 536.849 76.1255 536.963 77.0906 537.186 cv
78.0583 537.409 78.9143 537.762 79.664 538.244 cv
80.4137 538.724 81.0198 539.3 81.4798 539.966 cv
81.9423 540.632 82.2853 541.406 82.5086 542.287 cv
82.7319 543.171 82.8462 544.165 82.8462 545.274 cv
82.8462 547.081 82.5644 548.625 82.0035 549.906 cv
81.5037 551.06 80.7832 551.988 79.8395 552.694 cv
78.8957 553.398 77.7685 553.884 76.4578 554.151 cv
75.4583 554.357 74.1822 554.46 72.6323 554.46 cv
66.7623 554.46 li
66.7623 553.609 li
67.2275 553.488 67.5439 553.351 67.7114 553.196 cv
67.8789 553.041 67.9932 552.837 68.0543 552.583 cv
68.1155 552.331 68.1447 551.877 68.1447 551.222 cv
68.1447 540.101 li
68.1447 539.449 68.1155 538.995 68.0596 538.74 cv
68.0038 538.486 67.8895 538.281 67.7167 538.128 cv
67.5465 537.974 67.2275 537.831 66.7623 537.701 cv
cp
48.2192 536.849 mo
53.4565 536.849 li
58.0318 544.783 li
58.3162 545.282 58.6884 545.959 59.143 546.81 cv
59.6003 547.662 60.007 548.465 60.3606 549.221 cv
60.5653 549.221 li
60.4723 547.166 60.4244 544.921 60.4244 542.489 cv
60.4244 540.088 li
60.4244 539.52 60.4031 539.114 60.3606 538.87 cv
60.3154 538.624 60.2463 538.438 60.1532 538.308 cv
60.0575 538.178 59.9406 538.075 59.797 537.992 cv
59.6561 537.91 59.4035 537.815 59.042 537.701 cv
59.042 536.849 li
63.9283 536.849 li
63.9283 537.701 li
63.5827 537.815 63.3408 537.907 63.1972 537.984 cv
63.0563 538.064 62.934 538.167 62.8357 538.295 cv
62.7373 538.425 62.6602 538.621 62.6097 538.881 cv
62.5565 539.144 62.5326 539.547 62.5326 540.088 cv
62.5326 554.46 li
59.2467 554.46 li
53.4299 544.423 li
52.6456 543.064 52.0687 541.998 51.6965 541.223 cv
51.5796 541.223 li
51.6673 543.072 51.7098 545.025 51.7098 547.081 cv
51.7098 551.235 li
51.7098 551.88 51.7417 552.331 51.8082 552.591 cv
51.872 552.848 51.989 553.052 52.1565 553.203 cv
52.3239 553.353 52.6403 553.488 53.1055 553.609 cv
53.1055 554.46 li
48.2192 554.46 li
48.2192 553.609 li
48.6765 553.488 48.9875 553.349 49.1577 553.19 cv
49.3252 553.031 49.4421 552.827 49.5059 552.577 cv
49.5697 552.328 49.6016 551.88 49.6016 551.235 cv
49.6016 540.075 li
49.6016 539.43 49.5751 538.984 49.5192 538.74 cv
49.4634 538.496 49.3464 538.292 49.1683 538.128 cv
48.9928 537.963 48.6765 537.823 48.2192 537.701 cv
cp
39.0772 536.645 mo
40.9647 536.645 42.6972 536.873 44.2745 537.326 cv
44.2745 540.993 li
42.5032 540.993 li
42.3051 540.268 42.0789 539.711 41.8245 539.321 cv
41.5703 538.929 41.2428 538.637 40.8419 538.443 cv
40.441 538.25 39.926 538.154 39.2967 538.154 cv
38.4436 538.154 37.6894 538.414 37.0344 538.934 cv
36.3793 539.454 35.862 540.284 35.4829 541.425 cv
35.1035 542.563 34.9139 544.006 34.9139 545.752 cv
34.9139 548.134 35.2178 549.964 35.8253 551.24 cv
36.433 552.519 37.2885 553.157 38.3918 553.157 cv
39.1503 553.157 39.7107 552.932 40.0725 552.479 cv
40.4346 552.028 40.6156 551.309 40.6156 550.32 cv
40.6156 549.829 li
40.6156 549.176 40.5941 548.71 40.551 548.428 cv
40.508 548.15 40.441 547.94 40.3506 547.802 cv
40.2599 547.667 40.1416 547.553 39.9951 547.468 cv
39.8484 547.383 39.59 547.282 39.2194 547.171 cv
39.2194 546.319 li
45.8399 546.319 li
45.8399 547.171 li
45.4092 547.301 45.1141 547.447 44.9599 547.609 cv
44.8057 547.773 44.6994 547.991 44.6435 548.261 cv
44.5877 548.532 44.559 548.914 44.559 549.402 cv
44.559 554.267 li
42.6972 554.654 li
41.8181 553.725 li
40.7924 554.353 39.6158 554.667 38.2884 554.667 cv
35.7716 554.667 33.8947 553.934 32.6577 552.469 cv
31.4209 551.002 30.8026 548.779 30.8026 545.805 cv
30.8026 543.876 31.1365 542.229 31.8045 540.857 cv
32.4724 539.483 33.4379 538.438 34.7005 537.722 cv
35.9632 537.003 37.4222 536.645 39.0772 536.645 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
.61709 .780514 0 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /IAAAAA+Calibri-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f329fef5b5e000000cc000000606376
74203fba58ec0000012c000006886670676da1ea42ac000007b400000913
676c7966fc27b0700000d6e400001e1668656164f85c7982000010c80000
0036686865610dbb0be90000110000000024686d747885bc0baf00001124
000047d86c6f6361f275e9f5000058fc000036566d617870289a17900000
8f54000000206e616d65df42d33000008f740000308b70726570f940ca73
0000c000000016e1676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e4002effc000247b00000009000000004d53202000200000
1d390600fe0001c4079e0226200001ff0000000003c0050e000000200014
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000005aa001500a0fff8ff42fea2fdbc03b6015401cc
0108010e00ff00f5006e014000a0055e006b0570fff60122fff10547ffec
04faffec0131fff4000a03a0036600b400e1044c007c40465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000063ae1370dc4145f0f3cf50019080000000000
bbeb7ccc00000000d7497752fbdafd350a1a085000010009000200000000
0000000100000600fe0001c40aa0fbdafa860a1a00010000000000000000
00000000000008c2040e0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000006fe008d00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000004bb00160000000000000000
000000000000000000000000046800210000000000000000000000000000
000000000000000000000000000000000000000000000447000a00000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000003cb005a0000000000000000
000000000000000000000000049100860000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000006480086000000000000000000000000000000000000
00000000000004da00550000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003fd00860000
000000000000042500860000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000435001b00000000000000000000
000000000000000000000404002600000000000000000000000000000000
000000000000000000000000000000000000000003f30047000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000359004800000000000000000000
0000000000000000000000000000000000000000000000000000044b004b
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0682007e0000000000000000000000000000000000000000000000000000
0000044d0048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000044b007e000000000000
000002d8007e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002bf0036000000000244003802f5
003a00000000000000000000000000000000000000000000000000000000
00000000046c005a0000000002f5003902f5005a000000000200005a0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000029b00e600000000000000000000
0000000000000000000000000000026900cf000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000038200790000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
049a00780000000000000000000000000000000000000000000000000000
000000000000031300180000000002c90018000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000049a
007800000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000>
<0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e016101610161016101610161
016101610161016101610161016101610161016101610161016101610161
016101610161016101610161016101610161016101610161016101610161
0161016101610161016101610161016101610161016101c301c301c301c3
01c301c3024d024d024d024d024d024d024d024d024d024d02b302b302b3
02b302b302b302b302b302b302b302b302b302b302b3031a031a031a031a
031a031a035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f03d503d503d503d503d503d503d50423042304230423042304230423
04230423042304230423047d047d047d04fa04fa04fa04fa04fa04fa04fa
04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa
04fa04fa04fa054a054a054a054a054a054a05c705c705c705c705c705c7
05c705c705c705c706b206b206b206b206b206b206b206b206b206b206b2
06b206b206b2074707470747074707470747074707470747074707e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e208a3
08a308a308a308a308a308a308a309150915091509150915091509150915
091509150915091509b609b609b60a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340aa30aa30b000b660b660b660b660b660b660b660b660b66
0be60be60c2f0c990c990cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0d3a0d3a0d3a0d3a0d3a0d3a0d3a0d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dde
0dde0dde0dde0dde0dde0dde0dde0dde0e320e320ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0000000100001b2a0051
0005002c000100020010002f006000000cf816e1000100010000002d0222
0000000300000000021000000000000300000001000e0210000000030000
0002000804d60000000300000003002e04b00000000300000004001804c6
0000000300000005001804de0000000300000006001804f6000000030000
00070076050e0000000300000008002a0592000000030000000900200796
000000030000000a02a00210000000030000000b005607b6000000030000
000c002a080c000000030000000d0e060836000000030000000e004a07b6
00010000000000000108163c000100000000000100071744000100000000
0002000418a70001000000000003001718940001000000000004000c189f
0001000000000005000c18ab0001000000000006000c18b7000100000000
0007003b18c30001000000000008001516430001000000000009001018fe
000100000000000a01501744000100000000000b002b190e000100000000
000c00151939000100000000000d0703194e000100000000000e0025190e
0003000104090000021205840003000104090001000e0210000300010409
0002000804d60003000104090003002e04b00003000104090004001804c6
0003000104090005001804de0003000104090006001804f6000300010409
00070076050e0003000104090008002a0592000300010409000900200796
000300010409000a02a00210000300010409000b005607b6000300010409
000c002a080c000300010409000d0e182051000300010409000e004a07b6
00a9002000320030003100380020004d006900630072006f0073006f0066
007400200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e00430061006c006900620072
0069002000690073002000610020006d006f006400650072006e00200073
0061006e0073002000730065007200690066002000660061006d0069006c
00790020007700690074006800200073007500620074006c006500200072
006f0075006e00640069006e006700730020006f006e0020007300740065
006d007300200061006e006400200063006f0072006e006500720073002e
002000490074002000660065006100740075007200650073002000720065
0061006c0020006900740061006c006900630073002c00200073006d0061
006c006c00200063006100700073002c00200061006e00640020006d0075
006c007400690070006c00650020006e0075006d006500720061006c0020
0073006500740073002e0020004900740073002000700072006f0070006f
007200740069006f006e007300200061006c006c006f0077002000680069
0067006800200069006d007000610063007400200069006e002000740069
006700680074006c007900200073006500740020006c0069006e00650073
0020006f0066002000620069006700200061006e006400200073006d0061
006c006c0020007400650078007400200061006c0069006b0065002e0020
00430061006c0069006200720069002700730020006d0061006e00790020
00630075007200760065007300200061006e006400200074006800650020
006e00650077002000720061007300740065007200690073006500720020
007400650061006d00200075007000200069006e00200062006900670067
00650072002000730069007a0065007300200074006f0020007200650076
00650061006c002000610020007700610072006d00200061006e00640020
0073006f006600740020006300680061007200610063007400650072002e
004d006900630072006f0073006f00660074003a002000430061006c0069
00620072006900200042006f006c006400560065007200730069006f006e
00200036002e0032003300430061006c0069006200720069002d0042006f
006c006400430061006c0069006200720069002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000740068
00650020004d006900630072006f0073006f00660074002000670072006f
007500700020006f006600200063006f006d00700061006e006900650073
002e00a9002000320030003100380020004d006900630072006f0073006f
0066007400200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e000d000a0048006500620072006500770020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200063006f007000790072006900670068
0074002000a9002000320030003000330020002600200032003000300037
002c002000520061006c00700068002000480061006e0063006f0063006b
002000260020004a006f0068006e00200048007500640073006f006e002e
002000540068006900730020006c00610079006f007500740020006c006f
00670069006300200066006f00720020004200690062006c006900630061
006c00200048006500620072006500770020006900730020006f00700065
006e00200073006f007500720063006500200073006f0066007400770061
0072006500200075006e00640065007200200074006800650020004d0049
00540020004c006900630065006e00730065003b00200073006500650020
0065006d0062006500640064006500640020006c006900630065006e0073
00650020006400650073006300720069007000740069006f006e00200066
006f0072002000640065007400610069006c0073002e004c007500630028
006100730029002000640065002000470072006f006f0074006800740074
00700073003a002f002f0064006f00630073002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f00610062006f007500740068007400740070003a
002f002f006c00750063006100730066006f006e00740073002e0063006f
006d004d006900630072006f0073006f0066007400200073007500700070
006c00690065006400200066006f006e0074002e00200059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f0020006300720065006100740065002c00200064
006900730070006c00610079002c00200061006e00640020007000720069
006e007400200063006f006e00740065006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
0020006c006900630065006e007300650020007400650072006d00730020
006f00720020007400650072006d00730020006f00660020007500730065
002c0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000700072006f0064007500630074002c002000730065
00720076006900630065002c0020006f007200200063006f006e00740065
006e007400200069006e0020007700680069006300680020007400680069
007300200066006f006e0074002000770061007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e00200041006e00790020006f00740068006500720020
007500730065002000690073002000700072006f00680069006200690074
00650064002e000d000d00540068006500200066006f006c006c006f0077
0069006e00670020006c006900630065006e00730065002c002000620061
0073006500640020006f006e00200074006800650020004d004900540020
006c006900630065006e00730065002000280068007400740070003a002f
002f0065006e002e00770069006b006900700065006400690061002e006f
00720067002f00770069006b0069002f004d00490054005f004c00690063
0065006e007300650029002c0020006100700070006c0069006500730020
0074006f00200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
0072006500770020201c004c00610079006f007500740020004c006f0067
00690063201d0020006100730020006a006f0069006e0074006c00790020
0064006500760065006c006f007000650064002000620079002000520061
006c00700068002000480061006e0063006f0063006b00200061006e0064
0020004a006f0068006e00200048007500640073006f006e002e0020000d
000d005000650072006d0069007300730069006f006e0020006900730020
0068006500720065006200790020006700720061006e007400650064002c
002000660072006500650020006f00660020006300680061007200670065
002c00200074006f00200061006e007900200070006500720073006f006e
0020006f0062007400610069006e0069006e00670020006100200063006f
007000790020006f006600200074006800650020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
00480065006200720065007700200061006e00640020006100730073006f
00630069006100740065006400200064006f00630075006d0065006e0074
006100740069006f006e002000660069006c006500730020002800740068
00650020201c004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065201d0029002c00200074006f
0020006400650061006c00200069006e00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
007700610072006500200077006900740068006f00750074002000720065
0073007400720069006300740069006f006e002c00200069006e0063006c
007500640069006e006700200077006900740068006f007500740020006c
0069006d00690074006100740069006f006e002000740068006500200072
0069006700680074007300200074006f0020007500730065002c00200063
006f00700079002c0020006d006f0064006900660079002c0020006d0065
007200670065002c0020007000750062006c006900730068002c00200064
006900730074007200690062007500740065002c0020007300750062006c
006900630065006e00730065002c00200061006e0064002f006f00720020
00730065006c006c00200063006f00700069006500730020006f00660020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065002c00200061006e0064
00200074006f0020007000650072006d0069007400200070006500720073
006f006e007300200074006f002000770068006f006d0020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f0066007400770061007200650020006900730020006600750072006e
0069007300680065006400200074006f00200064006f00200073006f002c
0020007300750062006a00650063007400200074006f0020007400680065
00200066006f006c006c006f00770069006e006700200063006f006e0064
006900740069006f006e0073003a000d000d005400680065002000610062
006f0076006500200063006f00700079007200690067006800740020006e
006f007400690063006500200061006e0064002000740068006900730020
007000650072006d0069007300730069006f006e0020006e006f00740069
006300650020007300680061006c006c00200062006500200069006e0063
006c007500640065006400200069006e00200061006c006c00200063006f
00700069006500730020006f00720020007300750062007300740061006e
007400690061006c00200070006f007200740069006f006e00730020006f
006600200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002e000d000d
00540048004500200053004f004600540057004100520045002000490053
002000500052004f00560049004400450044002000270041005300200049
00530027002c00200057004900540048004f005500540020005700410052
00520041004e005400590020004f004600200041004e00590020004b0049
004e0044002c002000450058005000520045005300530020004f00520020
0049004d0050004c004900450044002c00200049004e0043004c00550044
0049004e004700200042005500540020004e004f00540020004c0049004d
004900540045004400200054004f00200054004800450020005700410052
00520041004e00540049004500530020004f00460020004d004500520043
00480041004e0054004100420049004c004900540059002c002000460049
0054004e00450053005300200046004f0052002000410020005000410052
0054004900430055004c0041005200200050005500520050004f00530045
00200041004e00440020004e004f004e0049004e004600520049004e0047
0045004d0045004e0054002e00200049004e0020004e004f002000450056
0045004e00540020005300480041004c004c002000540048004500200041
005500540048004f005200530020004f005200200043004f005000590052
004900470048005400200048004f004c0044004500520053002000420045
0020004c004900410042004c004500200046004f005200200041004e0059
00200043004c00410049004d002c002000440041004d0041004700450053
0020004f00520020004f00540048004500520020004c0049004100420049
004c004900540059002c0020005700480045005400480045005200200049
004e00200041004e00200041004300540049004f004e0020004f00460020
0043004f004e00540052004100430054002c00200054004f005200540020
004f00520020004f00540048004500520057004900530045002c00200041
0052004900530049004e0047002000460052004f004d002c0020004f0055
00540020004f00460020004f005200200049004e00200043004f004e004e
0045004300540049004f004e002000570049005400480020005400480045
00200053004f0046005400570041005200450020004f0052002000540048
004500200055005300450020004f00520020004f00540048004500520020
004400450041004c0049004e0047005300200049004e0020005400480045
00200053004f004600540057004100520045002e000da92032303138204d
6963726f736f667420436f72706f726174696f6e2e20416c6c2052696768
74732052657365727665642e0d486562726577204f70656e54797065204c
61796f7574206c6f67696320636f7079726967687420a920323030332026
20323030372c2052616c70682048616e636f636b2026204a6f686e204875
64736f6e2e2054686973206c61796f7574206c6f67696320666f72204269
626c6963616c20486562726577206973206f70656e20736f757263652073
6f66747761726520756e64657220746865204d4954204c6963656e73653b
2073656520656d626564646564206c6963656e7365206465736372697074
696f6e20666f722064657461696c732e43616c696272692069732061206d
6f6465726e2073616e732073657269662066616d696c7920776974682073
7562746c6520726f756e64696e6773206f6e207374656d7320616e642063
6f726e6572732e204974206665617475726573207265616c206974616c69
63732c20736d616c6c20636170732c20616e64206d756c7469706c65206e
756d6572616c20736574732e204974732070726f706f7274696f6e732061
6c6c6f77206869676820696d7061637420696e2074696768746c79207365
74206c696e6573206f662062696720616e6420736d616c6c207465787420
616c696b652e2043616c696272692773206d616e79206375727665732061
6e6420746865206e65772072617374657269736572207465616d20757020
696e206269676765722073697a657320746f2072657665616c2061207761
726d20616e6420736f6674206368617261637465722e4d6963726f736f66
743a2043616c6962726920426f6c6456657273696f6e20362e323343616c
696272692d426f6c6443616c6962726920697320612074726164656d6172
6b206f6620746865204d6963726f736f66742067726f7570206f6620636f
6d70616e6965732e4c7563286173292064652047726f6f7468747470733a
2f2f646f63732e6d6963726f736f66742e636f6d2f7479706f6772617068
792f61626f7574687474703a2f2f6c75636173666f6e74732e636f6d4d69
63726f736f667420737570706c69656420666f6e742e20596f75206d6179
20757365207468697320666f6e7420746f206372656174652c2064697370
6c61792c20616e64207072696e7420636f6e74656e74206173207065726d
697474656420627920746865206c6963656e7365207465726d73206f7220
7465726d73206f66207573652c206f6620746865204d6963726f736f6674
2070726f647563742c20736572766963652c206f7220636f6e74656e7420
696e207768696368207468697320666f6e742077617320696e636c756465
642e20596f75206d6179206f6e6c792028692920656d6265642074686973
20666f6e7420696e20636f6e74656e74206173207065726d697474656420
62792074686520656d62656464696e67207265737472696374696f6e7320
696e636c7564656420696e207468697320666f6e743b20616e6420286969
292074656d706f726172696c7920646f776e6c6f6164207468697320666f
6e7420746f2061207072696e746572206f72206f74686572206f75747075
742064657669636520746f2068656c70207072696e7420636f6e74656e74
2e20416e79206f74686572207573652069732070726f686962697465642e
0d0d54686520666f6c6c6f77696e67206c6963656e73652c206261736564
206f6e20746865204d4954206c6963656e73652028687474703a2f2f656e
2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e73
65292c206170706c69657320746f20746865204f70656e54797065204c61
796f7574206c6f67696320666f72204269626c6963616c20486562726577
20d24c61796f7574204c6f676963d3206173206a6f696e746c7920646576
656c6f7065642062792052616c70682048616e636f636b20616e64204a6f
686e20487564736f6e2e200d0d5065726d697373696f6e20697320686572
656279206772616e7465642c2066726565206f66206368617267652c2074
6f20616e7920706572736f6e206f627461696e696e67206120636f707920
6f6620746865204f70656e54797065204c61796f7574206c6f6769632066
6f72204269626c6963616c2048656272657720616e64206173736f636961
74656420646f63756d656e746174696f6e2066696c6573202874686520d2
4c61796f7574204c6f67696320536f667477617265d3292c20746f206465
616c20696e20746865204c61796f7574204c6f67696320536f6674776172
6520776974686f7574207265737472696374696f6e2c20696e636c756469
6e6720776974686f7574206c696d69746174696f6e207468652072696768
747320746f207573652c20636f70792c206d6f646966792c206d65726765
2c207075626c6973682c20646973747269627574652c207375626c696365
6e73652c20616e642f6f722073656c6c20636f70696573206f6620746865
204c61796f7574204c6f67696320536f6674776172652c20616e6420746f
207065726d697420706572736f6e7320746f2077686f6d20746865204c61
796f7574204c6f67696320536f667477617265206973206675726e697368
656420746f20646f20736f2c207375626a65637420746f2074686520666f
6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f7665
20636f70797269676874206e6f7469636520616e64207468697320706572
6d697373696f6e206e6f74696365207368616c6c20626520696e636c7564
656420696e20616c6c20636f70696573206f72207375627374616e746961
6c20706f7274696f6e73206f6620746865204c61796f7574204c6f676963
20536f6674776172652e0d0d54484520534f465457415245204953205052
4f564944454420274153204953272c20574954484f55542057415252414e
5459204f4620414e59204b494e442c2045585052455353204f5220494d50
4c4945442c20494e434c5544494e4720425554204e4f54204c494d495445
4420544f205448452057415252414e54494553204f46204d45524348414e
544142494c4954592c204649544e45535320464f52204120504152544943
554c415220505552504f534520414e44204e4f4e494e4652494e47454d45
4e542e20494e204e4f204556454e54205348414c4c205448452041555448
4f5253204f5220434f5059524947485420484f4c44455253204245204c49
41424c4520464f5220414e5920434c41494d2c2044414d41474553204f52
204f54484552204c494142494c4954592c205748455448455220494e2041
4e20414354494f4e204f4620434f4e54524143542c20544f5254204f5220
4f54484552574953452c2041524953494e472046524f4d2c204f5554204f
46204f5220494e20434f4e4e454354494f4e20574954482054484520534f
465457415245204f522054484520555345204f52204f5448455220444541
4c494e475320494e2054484520534f4654574152452e0d004d0069006300
72006f0073006f0066007400200073007500700070006c00690065006400
200066006f006e0074002e00200059006f00750020006d00610079002000
75007300650020007400680069007300200066006f006e00740020007400
6f0020006300720065006100740065002c00200064006900730070006c00
610079002c00200061006e00640020007000720069006e00740020006300
6f006e00740065006e00740020006100730020007000650072006d006900
7400740065006400200062007900200074006800650020006c0069006300
65006e007300650020007400650072006d00730020006f00720020007400
650072006d00730020006f00660020007500730065002c0020006f006600
200074006800650020004d006900630072006f0073006f00660074002000
700072006f0064007500630074002c002000730065007200760069006300
65002c0020006f007200200063006f006e00740065006e00740020006900
6e0020007700680069006300680020007400680069007300200066006f00
6e0074002000770061007300200069006e0063006c007500640065006400
2e00200059006f00750020006d006100790020006f006e006c0079002000
280069002900200065006d00620065006400200074006800690073002000
66006f006e007400200069006e00200063006f006e00740065006e007400
20006100730020007000650072006d006900740074006500640020006200
79002000740068006500200065006d00620065006400640069006e006700
20007200650073007400720069006300740069006f006e00730020006900
6e0063006c007500640065006400200069006e0020007400680069007300
200066006f006e0074003b00200061006e00640020002800690069002900
2000740065006d0070006f0072006100720069006c007900200064006f00
77006e006c006f006100640020007400680069007300200066006f006e00
7400200074006f002000610020007000720069006e007400650072002000
6f00720020006f00740068006500720020006f0075007400700075007400
2000640065007600690063006500200074006f002000680065006c007000
20007000720069006e007400200063006f006e00740065006e0074002e00
200041006e00790020006f00740068006500720020007500730065002000
690073002000700072006f0068006900620069007400650064002e000d00
0a000d000a00540068006500200066006f006c006c006f00770069006e00
670020006c006900630065006e00730065002c0020006200610073006500
640020006f006e00200074006800650020004d004900540020006c006900
630065006e00730065002000280068007400740070003a002f002f006500
6e002e00770069006b006900700065006400690061002e006f0072006700
2f00770069006b0069002f004d00490054005f004c006900630065006e00
7300650029002c0020006100700070006c00690065007300200074006f00
200074006800650020004f00700065006e00540079007000650020004c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
770020201c004c00610079006f007500740020004c006f00670069006320
1d0020006100730020006a006f0069006e0074006c007900200064006500
760065006c006f007000650064002000620079002000520061006c007000
68002000480061006e0063006f0063006b00200061006e00640020004a00
6f0068006e00200048007500640073006f006e002e0020000d000a000d00
0a005000650072006d0069007300730069006f006e002000690073002000
68006500720065006200790020006700720061006e007400650064002c00
2000660072006500650020006f0066002000630068006100720067006500
2c00200074006f00200061006e007900200070006500720073006f006e00
20006f0062007400610069006e0069006e00670020006100200063006f00
7000790020006f006600200074006800650020004f00700065006e005400
79007000650020004c00610079006f007500740020006c006f0067006900
6300200066006f00720020004200690062006c006900630061006c002000
480065006200720065007700200061006e00640020006100730073006f00
630069006100740065006400200064006f00630075006d0065006e007400
6100740069006f006e002000660069006c00650073002000280074006800
650020201c004c00610079006f007500740020004c006f00670069006300
200053006f006600740077006100720065201d0029002c00200074006f00
20006400650061006c00200069006e00200074006800650020004c006100
79006f007500740020004c006f00670069006300200053006f0066007400
7700610072006500200077006900740068006f0075007400200072006500
73007400720069006300740069006f006e002c00200069006e0063006c00
7500640069006e006700200077006900740068006f007500740020006c00
69006d00690074006100740069006f006e00200074006800650020007200
69006700680074007300200074006f0020007500730065002c0020006300
6f00700079002c0020006d006f0064006900660079002c0020006d006500
7200670065002c0020007000750062006c006900730068002c0020006400
6900730074007200690062007500740065002c0020007300750062006c00
6900630065006e00730065002c00200061006e0064002f006f0072002000
730065006c006c00200063006f00700069006500730020006f0066002000
74006800650020004c00610079006f007500740020004c006f0067006900
6300200053006f006600740077006100720065002c00200061006e006400
200074006f0020007000650072006d006900740020007000650072007300
6f006e007300200074006f002000770068006f006d002000740068006500
20004c00610079006f007500740020004c006f0067006900630020005300
6f0066007400770061007200650020006900730020006600750072006e00
69007300680065006400200074006f00200064006f00200073006f002c00
20007300750062006a00650063007400200074006f002000740068006500
200066006f006c006c006f00770069006e006700200063006f006e006400
6900740069006f006e0073003a000d000a000d000a005400680065002000
610062006f0076006500200063006f007000790072006900670068007400
20006e006f007400690063006500200061006e0064002000740068006900
730020007000650072006d0069007300730069006f006e0020006e006f00
740069006300650020007300680061006c006c0020006200650020006900
6e0063006c007500640065006400200069006e00200061006c006c002000
63006f00700069006500730020006f007200200073007500620073007400
61006e007400690061006c00200070006f007200740069006f006e007300
20006f006600200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002e00
0d000a000d000a00540048004500200053004f0046005400570041005200
45002000490053002000500052004f005600490044004500440020002700
4100530020004900530027002c00200057004900540048004f0055005400
2000570041005200520041004e005400590020004f004600200041004e00
590020004b0049004e0044002c0020004500580050005200450053005300
20004f005200200049004d0050004c004900450044002c00200049004e00
43004c005500440049004e004700200042005500540020004e004f005400
20004c0049004d004900540045004400200054004f002000540048004500
2000570041005200520041004e00540049004500530020004f0046002000
4d00450052004300480041004e0054004100420049004c00490054005900
2c0020004600490054004e00450053005300200046004f00520020004100
200050004100520054004900430055004c00410052002000500055005200
50004f0053004500200041004e00440020004e004f004e0049004e004600
520049004e00470045004d0045004e0054002e00200049004e0020004e00
4f0020004500560045004e00540020005300480041004c004c0020005400
48004500200041005500540048004f005200530020004f00520020004300
4f005000590052004900470048005400200048004f004c00440045005200
530020004200450020004c004900410042004c004500200046004f005200
200041004e005900200043004c00410049004d002c002000440041004d00
410047004500530020004f00520020004f00540048004500520020004c00
49004100420049004c004900540059002c00200057004800450054004800
45005200200049004e00200041004e00200041004300540049004f004e00
20004f004600200043004f004e00540052004100430054002c0020005400
4f005200540020004f00520020004f005400480045005200570049005300
45002c002000410052004900530049004e0047002000460052004f004d00
2c0020004f005500540020004f00460020004f005200200049004e002000
43004f004e004e0045004300540049004f004e0020005700490054004800
2000540048004500200053004f0046005400570041005200450020004f00
52002000540048004500200055005300450020004f00520020004f005400
48004500520020004400450041004c0049004e0047005300200049004e00
2000540048004500200053004f004600540057004100520045002e000d00
0a0000>
<b20903eb411d03430001003b03410001008b0330009b033000020004032f
0064032f0074032f00d4032f0004032d032a0038001f032c032a0038001f
032b032ab2381f24bf032a00a4032a00b4032a0003ffc0032ab2232746b9
ffc0032ab21c20464163033c0038033b0055033a00380339005503380038
033700550336003803350055033400380333005503230038032200550321
003803200055002b03400001006b03400001033d003803220055006b033b
00010024033100540331000200240331003403310054033100f403310004
001403270044032700e40327000300040327002403270044032700740327
008403270094032700d4032700f40327000800a403220001003403200001
001403200024032000440320005403200074032000840320000602f9b21e
1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1f
b802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802
f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb2
1e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c
1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb8
02e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802df
b21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d
191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1f
b802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802
d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb2
1d121fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802cab21d19
1fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb8
02c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1
b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d
2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1f
b802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802
b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b2
1c321fb802afb21c331fb802aeb21c331fb802adb21c331fb802acb21c33
1fb802abb21c331fb802aab21c311fb802a9b21c311fb802a8b21c321fb8
02a7b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3
b21c321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c
331fb8029eb21c331fb8029db21c331fb8029cb21c311fb8029bb21c311f
b8029ab21c321fb80299b21c321fb80298b21c321fb80297b21c321fb802
96b21c321fb80295b21c331fb80294b21c331fb80293b21c331fb80292b2
1c331fb80291b21c331fb80290b21c331fb8028fb21c331fb8028eb21c31
1fb8028db21c321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb8
0289b21c321fb80288b21c331fb80287b21c331fb80286b21c331fb80285
b21c331fb80284b21c331fb80283b21c331fb80282b21b341fb80281b21b
341fb80280b21b341fb8027fb21b341fb8027eb21b341fb8027db21b341f
b8027cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b341fb802
78b21b341fb80277b21b341fb80276b21b341fb80275b21b341fb80274b2
1b341fb80273b21b341fb80272b21b341fb80271b21b341fb80270b21b34
1fb8026fb21a351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8
026bb21a351fb8026ab21a351fb80269b21a351fb80268b21a351fb80267
b21a351fb80266b21a351fb80265b21a351fb80264b21a351fb80263b21a
351fb80262b21a351fb80261b21a351fb80260b21a351fb8025fb21a351f
b8025eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a351fb802
5ab21a351fb80259b219371fb80258b219371fb80257b219371fb80256b2
19371fb80255b219371fb80254b219371fb80253b219371fb80252b21937
1fb80251b219371fb80250b219371fb8024fb219371fb8024eb219371fb8
024db219371fb8024cb219371fb8024bb219371fb8024ab219371fb80249
b219371fb80248b219371fb80247b219371fb80246b219371fb80245b219
371fb80244b219371fb80243b219371fb80242b219371fb80241b219371f
b80240b219371fb8023fb219371fb8023eb219371fb8023db219371fb802
3cb219371fb8023bb219371fb8023ab219371fb80239b218391fb80238b2
18391fb80237b218391fb80236b218391fb80235b218391fb80234b21839
1fb80233b218391fb80232b218391fb80231b218391fb80230b218391fb8
0301b2182e1fb8022fb218391fb8022eb218391fb8022db218391fb8022c
b218391fb8022bb218391fb8022ab218391fb80229b218391fb80228b218
391fb80227b218391fb80226b218391fb80225b2173b1fb80224b2173b1f
b80223b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb802
1fb2173b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2
173b1fb8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b
1fb80216b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb8
0212b2173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020e
b2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab217
3b1fb80209b217321fb80208b217321fb80207b2173b1fb80206b2173b1f
b80205b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb802
01b2173b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2
173b1fb801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b
1fb801f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb8
01f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0
b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb217
3b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1f
b801e7b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801
e3b216371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb2
16441fb801deb216441fb801ddb216441fb801dcb216451fb801dbb21646
1fb801dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb8
01d6b216381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2
b216441fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216
461fb801cdb216461fb801ccb216461fb801cbb216431fb801cab216231f
b801c9b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801
c5b216421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b2
16461fb801c0b216461fb801bfb216461fb801beb216461fb801bdb21646
1fb801bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb8
01b8b216421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4
b216441fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216
451fb801afb216451fb801aeb216461fb801adb216461fb801acb216461f
b801abb216461fb801aab216461fb801a9b215341fb801a8b215411fb801
a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b2
15521fb801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f
1fb8019eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8
019ab2154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196
b215501fb80195b215521fb80194b215521fb80193b215521fb80192b215
411fb80191b2154f1fb80190b215501fb8018fb215501fb8018eb215511f
b8018db215521fb8018cb215521fb8018bb215521fb8018ab214581fb801
89b214591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2
145b1fb80184b2145c1fb80183b214591fb80182b2145d1fb8018140af14
5d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561f
b20b561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b
561faa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561f
a30b561fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a
681f980a681f970a681f960a681f950a681f940a681f930a681f920a681f
910a681f9009681f8f09681f8e09681f8d09681f8c09681f410902fc02fa
0056001f02fb02fa0068001f017fb213321fb8017eb212371fb80174b212
371fb80173b211421fb80172b211421fb80171b211421fb80170b211421f
b8016fb211421fb8016eb211421fb8016db211421fb8016cb211421fb801
6bb211421fb8016ab211421fb8013cb211421fb8013bb210421fb8013ab2
10421fb80139b210421fb80138b210421fb80137b210421fb80136b21042
1fb80135b210421fb80134b210421fb80133b210421fb80132b20f451fb8
0131b20f451fb80130b20f451fb80112b20f451fb80111b20f451fb80110
b20f451fb8010fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e
481fb8010bb20e481fb8010ab20e481fb80109b20e481fb80108b20e481f
b80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a
1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda
0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b56
1fba0b561f9d0a681f9c0a681fb80180b213321fb8017ab211401fb80179
b211421fb80178b211421fb80177b211421fb80176b211421fb80175b211
421fb80143b211421fb80142b210421fb80141b210421fb80140b210421f
b8013fb210421fb8013eb210421fb8013db20f451fb80115b20f451fb801
14b20f451fb80113b20f451fb903030302b2401fa4be030200b4030200c4
030200030300b213321fb8017bb213321fb80153b212371fb80152b21140
1fb80151b211401fb80150b211401fb8014fb211401fb8014eb211401fb8
014db211401fb8014cb211401fb8014bb211401fb8014ab211401fb80149
b211401fb80148b211401fb80147b211401fb80146b211401fb80145b211
401fb80144b211401fb80122b211401fb80121b210421fb80120b210421f
b8011fb210421fb8011eb210421fb8011db210421fb8011cb210421fb801
1bb210421fb8011ab210421fb80119b210421fb80118b20f451fb80117b2
0f451fb80116409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e48
1ff80e481ff70e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff1
0d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e
1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc6
0c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b56
1fb40b561fb30b561f9b0a681fb802fdb212371fb8017db212371fb8017c
b212371fb80169b2112e1fb80168b2112e1fb80167b211401fb80166b211
401fb80165b211401fb80164b211401fb80163b211401fb80162b211401f
b80161b211401fb80160b211401fb8015fb211401fb8015eb211401fb801
5db211401fb8015cb211401fb8015bb211401fb8015ab211401fb80159b2
11401fb80158b211401fb80157b211401fb80156b211401fb80155b21140
1fb80154b211401fb8012fb211401fb8012eb210421fb8012db210421fb8
012cb210421fb8012bb210421fb8012ab210421fb80129b210421fb80128
b210421fb80127b210421fb80126b210421fb80125b20f451fb80124b20f
451fb80123b20f451fb80105b20f451fb80104b20f451fb80103b20f451f
b80102b20f451fb80101b20e481fb8010040a20e481fff0e481ffe0e481f
e80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c
4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f83012e1f82488055
81ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb
7d067c487a557bab7a55047a147a020a7948775578ab77550b77010c7648
75555475e475f4750314755475647574759475d475e47507a475b475c475
03b8ffc0401275383b46807590750214757475020075010fb8ffc0402175
0b0e467448725573ab725504723472023bf47201e0720102307201507260
7202b8ffc0b372242846b8ffc0403572161a461072307240720371486f55
70ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d46
6e486d55df6d0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef
02fe40ff016b032e1f6a03251f692e675568ab6755662e645565ab645563
2e6255612e60555f2e5d555eab5d555c2e5a555bab5a55592e5855570325
1f562e545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554c
ab4b554a2e485549ab4855504801472e46554503361f001f01001e01001e
701e801ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a
7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f19
9f19030c7012801202701180110230114011d011e011040011a011020f8f
0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f
0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f
0d038f0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946
ef0aff0a02400a242746ef09ff0902ff0901000301200101000110012001
0308b8ffc0b401151f4603bd0100010000050001019000542b4bb807ff52
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b2
03a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d4259
2b5e73757373742b732b73742b2b73745e732b5e7374757374755e737475
73015e7374737475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b732b2b73
755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b73742b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b0073747373747374732b73742b2b2b2b2b2b2b2b2b732b2b2b
73737373185f5e00000000>
[7703 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 706 115 <00010016fffa04a605140024004eb10102435558b200191ab8024db42419
0c1917b80294400b400d191f5218051252055500183f3f12393f01192f18
d41aed123910dded123930311bb71f5218051252055500183f3f12393f30
3159250e0323222e0427012626363633321e02170133013e033332161606
0703110510243e3228392819110904fe7f0c05193c362e341c0b05013b01
0135040c1d362f2e3313070c2e11150b030104080c110d047b242a150504
0a140ffc1a03e111150c0406172a2300>IAAAAA+Calibri-Bold AddT42Char 
3 3428 272 <00010048ffea032103d60035009bb10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1afd2bd42bed3ffd
2bd4ed012fedc43230311bbc0018011f001f0024ffe8b40b0f014c24b801
1fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b240
094d00183f1afd2bd42bed3ffd2bd4ed30315925140e0623222e0235343e
0233321e0615140623222e0223220615141e0233323e0233321e02032103
0507183a4a572e679f6c374378a462284d43351609050314101126344832
62681a334d33344b38260d090c0704b01a23180f17211a10407db47486c3
803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00>IAAAAA+Calibri-Bold AddT42Char 
3 4036 373 <0001007efffa060903d7005000a9b10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1aed2b3fed2b012fed39d4ed11392fed3930311bb900
10ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d400e
40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1aed2b3fed2b
30315925140e0223222e023511342e022322060711140e0223222e023511
342e022322060711140e0223222e023511343e0233321e02151536363332
1e02173e0333321e021506090c1c302526301d0b112335252d5c360c1d30
2425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a4a93
503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a351d
4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a0f0a
037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>IAAAAA+Calibri-Bold AddT42Char 
3 4422 381 <00020048ffe9040403d700130027006fb10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1aed2b3fed2b012fedd4ed30311bb90019ffe8b40b
0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1aed
2b3fed2b30315901140e0223222e0235343e0233321e0205342e0223220e
0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fefd15
32533f3854361b1631543e3954361a01e972bc884a427eb87672bd874a41
7eb881426f522e294f6f47426f522d294e6f>IAAAAA+Calibri-Bold AddT42Char 
3 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>IAAAAA+Calibri-Bold AddT42Char 
IAAAAA+Calibri-Bold /CharStrings get begin
/V 115 def
/c 272 def
/m 373 def
/o 381 def
end
IAAAAA+Calibri-Bold /Encoding get
dup 86 /V put
dup 99 /c put
dup 109 /m put
dup 111 /o put
pop
end
%ADOEndSubsetFont
/AARSSR+Calibri-Bold /IAAAAA+Calibri-Bold findfont ct_VMDictPut
/AARSSR+Calibri-Bold*1 
[86{/.notdef}rp /V 12{/.notdef}rp /c 9{/.notdef}rp /m /.notdef /o 
144{/.notdef}rp]
AARSSR+Calibri-Bold nf
AARSSR+Calibri-Bold*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
1047.35 270.875 mo
(Vcom)
[14.3595 11.0948 14.4125 0 ]xsh
0 .961578 .907591 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSR+Calibri-Bold gcheck setglobal} if
3 902 121 <00010021fffa04440514002f0078b10102435558bc002202940018002402
50400a2e172f2e182e182e000cb80264b2160b0ab802954011000b402323
0b2952230b111d521155055500183f3f3f1239393f01192f332f1a1810dd
ed10dded1239392f2f12393910ed10ed30311b400b2952230b111d521155
055500183f3f3f1239393f303159251616060623222e022703030e032322
2626363701012626363633321e021713133e03333216160607010427120b
183f382f361f0e05f3f2060e1f372d3439140c130136fee0120d173e392f
37200d06e3dd060d1d332d323a160b11fee063232a16060409100c01d3fe
2d0c10090406162a2302350213242b15050409100cfe5401ac0c10090405
162a24fdf000>AARSSR+Calibri-Bold AddT42Char 
AARSSR+Calibri-Bold /CharStrings get begin
/X 121 def
end
AARSSR+Calibri-Bold /Encoding get
dup 88 /X put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSR+Calibri-Bold*1 
[86{/.notdef}rp /V /.notdef /X 10{/.notdef}rp /c 9{/.notdef}rp /m 
/.notdef /o 144{/.notdef}rp]
AARSSR+Calibri-Bold nf
AARSSR+Calibri-Bold*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
1047.35 318.37 mo
(VX)
[15.6321 0 ]xsh
gsave
18.226 579.309 mo
1136.39 579.309 li
1136.39 26.366 li
18.226 26.366 li
cp
eclp
0 .302953 .905394 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSR+Calibri-Bold gcheck setglobal} if
3 2958 258 <00020047ffe9037603d7003300400127b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1aed2b3fed2b2b12392f5f
5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed323930311b
400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e41
2ab80118401be02201037d228d2202402250226022030f221f22020c0422
22041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe8400910014d
3de4400c4d0400182f3f1aed2b3fed2b2b12392f5f5e5d5d5d5f5ded1112
392f2b5d71ed5d7130315925140606232226263535060623222e0235343e
02333335342e0223220e0223222e0235343e0433321e02150723220e0215
1416333236370376142b2a2d2911378d56477757303d79b4775711274130
3f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35592e
1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a2617
1f241d231e132955865cda122433213840363400>AARSSR+Calibri-Bold AddT42Char 
3 4650 393 <0002007efe95040003d7002a003d0094b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1aed2b3f3f3fed
2b121739012fd4ed10ed323930311bb60a363521040530b8ffe8b40b0f01
4c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d00183f
1aed2b3f3f3fed2b12173930315901140e0223222e022711140e0223222e
023511343e0233321e0215153e0333321e0205342e0223220e0207111616
33323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e2919
0a274b4e532f628a5728fefa11294332193133361e35603431452c1501ed
77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a6928
3d29144d86b277396952310f223628feda4349325166>AARSSR+Calibri-Bold AddT42Char 
3 4972 396 <0001007efffa02bb03d70033006eb10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1aed2b5f5e5d012fc4ed3930311bb9000affe8
b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1aed
2b30315901140e0223222e0223220e020711140e0223222e023511343e02
33321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c0c1d
302525301d0c0a1a291f202a170a233e38381c0d1e20180b050402034b24
2e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a0f0a
6f3241260f0307090a0c152a>AARSSR+Calibri-Bold AddT42Char 
AARSSR+Calibri-Bold /CharStrings get begin
/a 258 def
/p 393 def
/r 396 def
end
AARSSR+Calibri-Bold /Encoding get
dup 97 /a put
dup 112 /p put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSR+Calibri-Bold*1 
[86{/.notdef}rp /V /.notdef /X 8{/.notdef}rp /a /.notdef /c 
9{/.notdef}rp /m /.notdef /o /p /.notdef /r 141{/.notdef}rp]
AARSSR+Calibri-Bold nf
AARSSR+Calibri-Bold*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
1047.35 365.483 mo
(Vramp)
[14.9871 8.9231 13.0807 21.6597 0 ]xsh
grestore
164.89 543.346 mo
177.723 282.52 li
168.96 282.096 li
156.128 542.916 li
cp
.61709 .780514 0 0 cmyk
f
97.7152 546.25 mo
160.802 545.486 li
160.693 536.732 li
97.6089 537.496 li
cp
f
749.727 465.373 mo
745.367 476.7 li
753.289 476.7 li
cp
749.195 461.863 mo
752.492 461.863 li
758.048 478.661 li
758.048 479.589 li
742.416 479.589 li
742.416 478.634 li
cp
.997223 .918425 .647791 .507591 cmyk
ef
%ADOBeginSubsetFont: KAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f328821eb1d000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c7966f51c36ed0000d328000059ac68656164fa71cec900001a800000
00366868656112c4205a00001ab800000024686d7478cd512d7900001adc
000055c06c6f63613295182a0000709c00003b7e6d617870280111e70000
ac1c000000206e616d65030148160000ac3c000015c370726570664ecf85
0000c2000000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00006ff420024ff02000000000000004d53202000c00000
20830639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006fd71b65fc1955f0f3cf5001b080000000000b9e6
983d00000000d630eee4f434ec4a16f118ef000000090002000000000000
00010000063bfe390161175af434fda416f1000100000000000000000000
000000000d22054400be0000000001c3000001c3000004fc000600000000
0000000000000000049a00790000000000000000057e0079000000000000
000000000000044b0079068600750000000000000000048b007900000000
04f8007903f8007000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000387
006904700069000000000000000003f4003f000000000239005300000000
00000000000000000000000000000000043f00690000000000000000034f
00530000000002b500250000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000239005300000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000045dfffe0000000003ef006904aa006a0417006800000000044d
006904e3006802610068000000000000000003b7006805bb006500000000
048300690433006800000000046a006803a4005e04390039000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002610068000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002ab005d034e005d000000000000000002f70041
0000000001c2004e0000000000000000000000000000000000000000032c
005d00000000000000000284004e00000000021c002e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
024700c7000000000000fe850000fe850000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000024900c0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000032500910000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000002bf
002b03ae003103b000330000000000000000000000000000000000000000
0000000000000000043600b10436006f0436008100000000000000000000
00000000000000000000000000000000000002e5002c03e0002903e3003f
00000000000000000000000000000000000000000000000000000000046e
00b2046e0081046e00900000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000342007e03420063034200730000000000000000000000000000
000000000000000000000000000003b00015000000000000000000000000
035b005d000000000000000003f6005d000000000000000000000000031a
005d04af005d00000000000000000357005d000000000399005d02fa0062
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000001c2004e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000004a100b704a10088
04a1009d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000005970014
000000000000000000000000051f008a00000000000000000613008a0000
0000000000000000000004c0008a0731008800000000000000000515008a
000000000583008a047c008a000000000000000000000000000000000000
000000000000000000000000000000000000040200820501008200000000
0000000004780057000000000298006b0000000000000000000000000000
00000000000004ca0082000000000000000003c6006b000000000321003a
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000298006b0000000000000000000000000000000004c200b804c2
009004c200a8000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000060d
002200000000000000000000000005810099000000000000000006800099
0000000000000000000000000517009907af00990000000000000000057b
00990000000005e7009904e200a100000000000000000000000000000000
000000000000000000000000000000000000000004610099056c00990000
00000000000004dd006b0000000002e20080000000000000000000000000
000000000000000005340099000000000000000004210080000000000376
004b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002e200800000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000>
<00000076007600760076011001100110011001bb01bb01bb025102510251
025102b9035b035b035b03d003d00476052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d05c2
065a065a065a0783078307f407f407f407f407f407f408540854085408df
08df09570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980a0e0a0e0a750acb0b540b540bc9
0c3c0c790c790c790cc90d440d440d890df30df30e7f0ef50f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610fba10391039103911271127116f116f116f116f116f116f11c3
11c311c312241224127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d12b212b212c612e512e512e512e512e5
12e512e512e512e512e512e512e512e512e5131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b13451345
134513451345134513451345134513451345134513451345134513451345
13451345134513451345134513451345134513451345134513451345138c
13fc1491149114911491149114911491149114db154b15dc15dc15dc15dc
15dc15dc15dc15dc1626169017131713171317131713171317131713176e
17f8189a189a189a189a189a189a189a189a18a818b618c418c418c418c4
18c418c418c418c418c418c418c418c418c418d718ea18fd18fd18fd18fd
18fd18fd18fd18fd18fd18fd18fd18fd18fd197c1a0d1ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11acf1add1aeb1aeb1aeb1aeb1aeb
1aeb1aeb1aeb1b521b521b521b521bc91bc91bc91c4f1c4f1c4f1c4f1c9b
1d241d241d241d871d871e111e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1ead1ead1ead
1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead
1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead
1ead1ead1ead1ead1ead1ef91f521fb11fb11fb11fb11fb11fb11fb11fb1
1fb11fb11fb11fb11fb11fb1200320032003200320752075207520e420e4
20e420e4212921ab21ab21ab22032203227e22f022f022f022f022f022f0
22f022f022f022f0234123c523c523c5247b247b24c324c324c324c324c3
24c3250e250e250e2571257125c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225fb25fb25fb25fb25fb263b2692
26f926f926f926f926f926f926f926f926f926f926f926f926f926f9274b
274b274b274b27b627b627b6282e282e282e282e287128e428e428e42940
294029bb2a212a212a212a212a212a212a212a212a212a212a662ad52ad5
2ad52b7e2b7e2bc02bc02bc02bc02bc02bc02c052c052c052c5b2c5b2ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd60000000100001dbe005f
0004002e000200020010002f0086000009a41128000200010000002f023a
000000000000000d03880000000000000000000e006c0388000000030000
0000006403f400000003000000010018046e0000000300000002000e0486
0000000300000003002e045800000003000000040018046e000000030000
0005001804940000000300000006001604ac0000000300000007007604c2
0000000300000008002a0402000000030000000900460538000000030000
000a070a057e000000030000000b00560c88000000030000000c00280cde
000000030000000d03880000000000030000000e006c0388000100000000
000000320d060001000000000001000c0d43000100000000000200070d4f
000100000000000300170d380001000000000004000c0d43000100000000
0005000c0d560001000000000006000b0d620001000000000007003b0d6d
000100000000000800150d0d000100000000000900230da8000100000000
000a03850dcb000100000000000b002b1150000100000000000c0014117b
000100000000000d01c4118f000100000000000e00361353000300010409
0000006403f400030001040900010018046e0003000104090002000e0486
0003000104090003002e045800030001040900040018046e000300010409
0005001804940003000104090006001604ac0003000104090007007604c2
0003000104090008002a0402000300010409000900460538000300010409
000a070a057e000300010409000b00560c88000300010409000c00280cde
000300010409000d03880000000300010409000e006c0388004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e00740073002f0064006500660061
0075006c0074002e006100730070007800a9002000320030003100370020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020007200690067
006800740073002000720065007300650072007600650064002e004d0069
00630072006f0073006f00660074003a002000430061006d006200720069
00610020004d0061007400680052006500670075006c0061007200560065
007200730069006f006e00200036002e0039003900430061006d00620072
00690061004d00610074006800430061006d006200720069006100200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002e004d006f006e006f007400790070006500200049
006d006100670069006e006700200061006e00640020005400690072006f
002000540079007000650077006f0072006b007300430061006d00620072
0069006100200068006100730020006200650065006e0020006400650073
00690067006e0065006400200066006f00720020006f006e002d00730063
007200650065006e002000720065006100640069006e006700200061006e
006400200074006f0020006c006f006f006b00200067006f006f00640020
007700680065006e0020007000720069006e007400650064002000610074
00200073006d0061006c006c002000730069007a00650073002e00200049
00740020006800610073002000760065007200790020006500760065006e
002000730070006100630069006e006700200061006e0064002000700072
006f0070006f007200740069006f006e0073002e00200044006900610067
006f006e0061006c00200061006e00640020007600650072007400690063
0061006c00200068006100690072006c0069006e0065007300200061006e
006400200073006500720069006600730020006100720065002000720065
006c00610074006900760065006c00790020007300740072006f006e0067
002c0020007700680069006c006500200068006f00720069007a006f006e
00740061006c002000730065007200690066007300200061007200650020
0073006d0061006c006c00200061006e006400200069006e00740065006e
006400200074006f00200065006d00700068006100730069007a00650020
007300740072006f006b006500200065006e00640069006e006700730020
0072006100740068006500720020007400680061006e0020007300740061
006e00640020006f007500740020007400680065006d00730065006c0076
00650073002e002000540068006900730020007000720069006e00630069
0070006c00650020006900730020006d006f007300740020006e006f0074
00690063006500610062006c006500200069006e00200074006800650020
006900740061006c00690063007300200077006800650072006500200074
006800650020006c006f0077006500720063006100730065002000630068
006100720061006300740065007200730020006100720065002000730075
0062006400750065006400200069006e0020007300740079006c00650020
0074006f0020006200650020006100740020007400680065006900720020
006200650073007400200061007300200065006c0065006d0065006e0074
00730020006f006600200077006f00720064002d0069006d006100670065
0073002e0020005700680065006e002000430061006d0062007200690061
0020006900730020007500730065006400200066006f0072002000630061
007000740069006f006e0073002000610074002000730069007a00650073
0020006f00760065007200200032003000200070006f0069006e0074002c
0020007400680065002000200069006e007400650072002d006300680061
007200610063007400650072002000730070006100630069006e00670020
00730068006f0075006c006400200062006500200073006c006900670068
0074006c00790020007200650064007500630065006400200066006f0072
0020006200650073007400200072006500730075006c00740073002e0020
005400680065002000640065007300690067006e002000690073006e0027
00740020006a00750073007400200069006e00740065006e006400650064
00200066006f007200200062007500730069006e00650073007300200064
006f00630075006d0065006e00740073003a002000540068006500200072
006500670075006c00610072002000770065006900670068007400200068
006100730020006200650065006e00200065007800740065006e00640065
006400200077006900740068002000610020006c00610072006700650020
0073006500740020006f00660020006d00610074006800200061006e0064
00200073006300690065006e00630065002000730079006d0062006f006c
0073002e002000540068006500200047007200650065006b00200061006e
006400200043007900720069006c006c0069006300200068006100730020
006200650065006e002000640065007300690067006e0065006400200075
006e00640065007200200063006c006f0073006500200073007500700065
00720076006900730069006f006e0020006f006600200061006e00200069
006e007400650072006e006100740069006f006e0061006c002000740065
0061006d0020006f006600200065007800700065007200740073002c0020
00770068006f002000610069006d0065006400200074006f002000730065
00740020006100200068006900730074006f0072006900630061006c0020
006e006500770020007300740061006e006400610072006400200069006e
0020006d0075006c00740069002d00730063007200690070007400200074
007900700065002000640065007300690067006e002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f006300740066006f006e007400730068007400740070003a002f
002f007700770077002e0066006f006e00740073002e0063006f006da920
32303137204d6963726f736f667420436f72706f726174696f6e2e20416c
6c207269676874732072657365727665642e4d6963726f736f66743a2043
616d62726961204d617468526567756c617256657273696f6e20362e3939
43616d627269614d61746843616d6272696120697320612074726164656d
61726b206f6620746865204d6963726f736f66742067726f7570206f6620
636f6d70616e6965732e4d6f6e6f7479706520496d6167696e6720616e64
205469726f2054797065776f726b7343616d627269612068617320626565
6e2064657369676e656420666f72206f6e2d73637265656e207265616469
6e6720616e6420746f206c6f6f6b20676f6f64207768656e207072696e74
656420617420736d616c6c2073697a65732e204974206861732076657279
206576656e2073706163696e6720616e642070726f706f7274696f6e732e
20446961676f6e616c20616e6420766572746963616c20686169726c696e
657320616e6420736572696673206172652072656c61746976656c792073
74726f6e672c207768696c6520686f72697a6f6e74616c20736572696673
2061726520736d616c6c20616e6420696e74656e6420746f20656d706861
73697a65207374726f6b6520656e64696e67732072617468657220746861
6e207374616e64206f7574207468656d73656c7665732e20546869732070
72696e6369706c65206973206d6f7374206e6f7469636561626c6520696e
20746865206974616c69637320776865726520746865206c6f7765726361
7365206368617261637465727320617265207375626475656420696e2073
74796c6520746f206265206174207468656972206265737420617320656c
656d656e7473206f6620776f72642d696d616765732e205768656e204361
6d62726961206973207573656420666f722063617074696f6e7320617420
73697a6573206f76657220323020706f696e742c207468652020696e7465
722d6368617261637465722073706163696e672073686f756c6420626520
736c696768746c79207265647563656420666f7220626573742072657375
6c74732e205468652064657369676e2069736e2774206a75737420696e74
656e64656420666f7220627573696e65737320646f63756d656e74733a20
54686520726567756c61722077656967687420686173206265656e206578
74656e64656420776974682061206c6172676520736574206f66206d6174
6820616e6420736369656e63652073796d626f6c732e2054686520477265
656b20616e6420437972696c6c696320686173206265656e206465736967
6e656420756e64657220636c6f7365207375706572766973696f6e206f66
20616e20696e7465726e6174696f6e616c207465616d206f662065787065
7274732c2077686f2061696d656420746f20736574206120686973746f72
6963616c206e6577207374616e6461726420696e206d756c74692d736372
69707420747970652064657369676e2e687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f7777772e666f6e74732e636f6d4d6963726f736f66742073
7570706c69656420666f6e742e20596f75206d6179207573652074686973
20666f6e7420746f206372656174652c20646973706c61792c20616e6420
7072696e7420636f6e74656e74206173207065726d697474656420627920
746865206c6963656e7365207465726d73206f72207465726d73206f6620
7573652c206f6620746865204d6963726f736f66742070726f647563742c
20736572766963652c206f7220636f6e74656e7420696e20776869636820
7468697320666f6e742077617320696e636c756465642e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e20416e79206f7468
6572207573652069732070726f686962697465642e687474703a2f2f7777
772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f6e
74732f64656661756c742e6173707800b9002001feb40918014a20b801fa
b40918014a20b801f9b40918014a20b801f8b40918014a20b801f7b40918
014a20b801f6b40918014a20b801f0b40918014a20b801efb40918014a20
b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b801eb
b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b40918
014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a20
b801e0b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1
b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918
014a20b801ccb40918014a20b801a0b40918014a20b8018fb40918014a20
b8018eb40918014a20b8018ab40918014a20b80188b40918014a20b80187
b40918014a20b80186b40918014a20b8015bb40918014a20b8015ab40918
014a20b80159b40918014a20b80158b40918014a20b80154b40918014a20
b80150b40918014a20b8014cb40918014a20b8014bb40918014a20b8014a
b40918014a20b80136b40918014a20b80130b40918014a20b8012fb40918
014a20b8012db40918014a20b8012cb40918014a20b80109b40918014a20
b80107b40918014a20b8010540ff0918014a20f40918014a20f20918014a
20f10918014a20f00918014a20ef0918014a20ed0918014a20ec0918014a
20ea0918014a20e50918014a20e40918014a20e30918014a20e10918014a
20de0918014a20da0918014a20d80918014a20d30918014a20cd0918014a
20cc0918014a20ca0918014a20c90918014a20c80918014a20c60918014a
20c40918014a20c20918014a20c00918014a20bf0918014a20bd0918014a
20b30918014a20b10918014a20af0918014a20a50918014a20a40918014a
20a00918014a208e0918014a208d0918014a208c0918014a208b0918014a
208a0918014a20890918014a20850918014a20840918014a208309180140
3e4a20800918014a207f0918014a207e0918014a207d0918014a20620918
014a20510918014a20500918014a20480918014a20420918014a200e0918
014a0f41630441001f0441002f0441003f0441004f0441005f0441006f04
41007f0441008f0441009f044100af044100bf044100cf0441000d005f03
ea0001008003f4009003f400a003f400b003f400c003f400d003f400e003
f400f003f40008002f0433003f0433004f0433005f0433006f0433007f04
33008f0433009f043300af043300bf0433000a001f0434002f0434003f04
34004f0434005f0434006f0434007f0434000700cf042300df042300ef04
230003000f0423001f0423003f0423005f0423009f0423402305f0e201b0
fdc0fd02c0fdd0fde0fdf0fd04d0fde0fdf0fd03c0ffd0ffe0fff0ff0470
410a0425000100c0042500d0042500e0042500f00425400c04e0bef0be02
e0bef0be020f41110421003f04210002001002580001000f025800e00258
0002000f040a0001000f0408b4010f26010f411b04070001000f04060001
007f02170001000f029c001f029c002f029c003f029c004f029c005f029c
000600df029c00ef029c00ff029c405303dfe016171cd4d516171c7b7c16
1b7b7c19d1d216171c767716171c6d7016171c6c6f16171c6b6e161b6b6e
7f721a747514151c676a14151c666914151c6568141b656885711a197316
7a431921794319211941310292009902920002001c0292002c0292000202
99029a029b000c028d028e028f000c028a028b028c000c001b0299008b02
990002000f0299009f029900bb029900db0299000402a5028b02a7000d02
9f029a02a1000d029c028e029e000dffe8028eb2142339b9ffe8029ab214
2339411a0282027d0008002b0281027c0005002b027e027a0004002b027d
027a0004002b027a02570005002b027702670005002b02670257b2052b20
b80270b21b2039bd027202570004002b026e0257b2042b20b80257b33133
3909414102710019027100aa025700b8025700040069027100da025700e8
02570003028402790006002b028002790004002b027f02790008002b027b
02790008002b027902560006002b027802660000002b027602660008002b
027502660008002b027302660008002b026602560006002b027402560000
002b027302560000002b026f0256b2072b29415002560001008602560001
025d025e025f000c025102520253000c024e024f0250000c000b024e000b
0251000a025d003b024e00590251007602510075025d009b024e00b5025d
00d9024e000a0269024f026b000d0263025e0265000d026002520262000d
0269003c0263003c0260003c025d003c0251003c024e003c0244023c0005
002b024302110002002b0240023c0005002b023e02110004002b023d0211
b2042b464115023c00010046023c00c6023c0002023b02110007002b0239
02110006002b023702110004002b02210211b2072b20b80233b213163941
16022f02110004002b022e02110004002b022d02110005002b022c021100
04002b022b02110004002b022a0211b2052b474142021100010005021100
a502110002003b0233004b02330064021100740211000402420210000700
2b024102100005002b023f02100002002b023a02100007002b0238021000
07002b023602100007002b023502100007002b022002100007002b023402
100005002b023102100005002b023002100007002b022902100007002b02
280210b2072b8a416e02100001001a021000b90232000202170218021900
0c020b020c020d000c02080209020a000c000b0208000b020b000a021700
3b02080059020b0076020b00750217009b020800b5021700d90208000a02
2302090225000d021d0218021f000d021a020c021c000d0223003c021d00
3c021a003c0217003c020b003c0208003c0153014d0002002b014e014d00
02002b0156015c0004002b0155015c0004002b0157015c0002002b01da01
d4000a002b01d801d4000a002b01e501e00005002b01e101e00005002b01
e001eb0005002b01ef01eb0002002b01ec01ebb2052b40b801ebb2090a39
b9ffc00104b2313139b9ffc00104b21b2039b8ffc0b4c71f203940b80103
b22c2c39ba010301000100b21f2223b901030100b3c01e1e23ba01030100
0100b21d1d23b901030100b3c01c1c23ba010301000100b21b1b23b90103
0100b3c0141a23b901030100b3800b1323b901030100b340090a23b90102
0101b340508b23b901010100b340508b23410a01020100004f001f010101
00004f001fffc00100b2505539b9ffc00100b323233940b80100b71d1e39
40e81b1b39b8ffc0b4e724253956b80108401301ddd8052b3bd64bd60240
b00b0d39c1c0052bb8ffc040379f131339409c2f30399c9a012b9b9a052b
9a91042ba999042b9992032b40c52c31399291032b889198910209631863
c7630320630d0f39b8fff0b4471f2539cbb8010a401c019895012b379e01
9695022b1897262a3917970110953f4039d99501bc0136012c0003002b01
30b2cd042bb8012fb2cc042bb8012db2cd032bb8012cb2cd042bbc014c01
4a0003002b014ab27f052bb9015b0154b2042b0f41190154001f01540002
018601880002002b018701880004002b018901880004002b0188018f0003
002b018e018f0004002b018fb385052b3f410c01a0000101ce01cc000300
2b01d201cc0006002b01d101ccb2062b40b80107b2323239b80107b2af03
2bb8ffc0b3de1e2039b8ffc04011dc181a39c9ca032bcac8042b40c82122
39b8ffc0b3c8151739b8ffc0b3c6242539b8ffc0b3c6161a39b8ffc04023
bf2d31395051032b40511b1b39e5cc042be4e3032b40e32a2a39cdcc052b
40cc424439b8ffc0b3cc272739b8ffc0b7cc171a39c2ea012bb80109b2da
032bb8ffc04033ea252539dfea0140c41b1d39b3b1052bb1c0052b40c03d
3d39c0af042bd3af052baf7d052b20da121639c5bd01208e01108e01b8ff
c0b38b363839b8ffc0b38b272b39b8ffc040328b171a398c8d052b8d8a04
2b898a052b8a7f052bf4ef032bf2ef052bf180022bf0a0042bef85052b40
ec32343940ec1b1d39b8ffc0b3a0515239b8ffc0b3a0454739b8ffc0b3a0
383c39b8ffc0400ba02c3139dfa001a080022bb8ffc0b394313139b8ffc0
40d480181a39817f012b7e7d052b7d7f052bed7f052bd87f017f85251f88
85012b8785012b8485052b8385052b298539854985036685014685013685
012685011b37151836151535151234150f33150c3215093115063015032f
15002e15f9fa0f20f930f90226270e28270f2a2b0e2c2b0f22230e24230f
1e1f0e201f0f00051005023c3d0e0b3c743c993c030f10110c090a0b0c06
07080c0304050c0001020c0603641f702a010f2a010b0f4b0f020b003b00
44037403ab00db0f060b000b030b0f3b003b0959035b0976039b009b0999
0fd9000cb9010b010c402a0f1b011d0d18071a0d1510170d1204140d2ff9
6ff99ff9a0f9cff9d0f9063ff940f9aff9b0f9e0f90500b8010bb22ff92f
ba010b003f010b403004fb3cf93cf73cf53c2c3c2a3c283c263c243c223c
203c1e3c1b3c183c153c123c0f3c093c063c033c003c035050335401b012
4b004b5442b013014b004b5342b0332b4bb8032052b0322b4bb009505b58
b101018e59b0332bb00288b8010054b00488b8020054b012435a5b58b801
19b101018e851bb900010100b04b60858d592b2b1d42b0644b5358b20380
801d4259b0324b5358b20390901d4259004bb03251b01b23422b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b2b73747573742b
2b2b2b2b2b732b732b2b2b2b2b2bb1282645b02a4561b02c4560442b2b73
2b2b2b2b2b2b2b2b2b2b2b0173737373742b2b2b2b2b742b2b2b2b2b2b2b
742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7475732b2b2b2b2b2b2b2b
732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b2b2b2b732b2b2b012b2b2b2b2b00742b742b2b742b732b2b74742b2b2b
2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b
0173742b2b2b2b2b2b2b2b2b2b2b2b2b007374752b2b2b2b2b2b2b2b2b2b
2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b0173742b2b2b2b2b
2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73742b
2b2b0173742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
b101322b4bb0505242b002435c4bb064524bb01e505b60b01a23424bb0c8
524bb036505bb00e23420073747373737373737374737374737573737475
7373747373737373b100024354b102024354b1060243545b5b58416301fe
006401fa006401f9006401f8006401f7006401f6006401f0006401ef0064
01ee006401ed006401ec006401eb006401e6006401e5006401e4006401e3
006401e2006401e1006401e0006401d3006401d2006401d1006401cf0064
01ce006401cd006401cc006401a00064018f0064018e0064018a00640188
00640187006401860064015b0064015a0064015900640158006401540064
01500064014c0064014b0064014a00640136006401300064012f0064012d
0064012c006401090064010700640105406964f464f264f164f064ef64ed
64ec64ea64e564e464e364e164de64da64d864d364cd64cc64ca64c964c8
64c664c464c264c064bf64bd64b364b164af64a564a464a0648e648d648c
648b648a64896485648464836480647f647e647d64626451645064486442
640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00>
[16037 6921 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 4542 150 <00010025fff002c204b3001c0097b0852b58403117100314201340262f48
13400c0f481310971716020a0f06010c030607400a00a7441b0aee070f13
1409091e07050b851a2fe1393211392fd6cd003fed322b001a1810cd5f5e
5d11393ffdd62b2b1a19cd2b31301b4023141340262f4813400c0f481317
10976c1716020a0f06010c030607401b070aee6c070f00183f2b321a10cd
5f5e5d11393f2bd62b2b19cd303159133e0337331521152111141e023332
363717060623222635112325323e23140b8e0143febd102c382c2846222d
477f44817e94038a08283f5f5bf765fe436173411c211f36453e99a3022b
>KAAAAA+CambriaMath AddT42Char 
2 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>KAAAAA+CambriaMath AddT42Char 
KAAAAA+CambriaMath /CharStrings get begin
/g150 150 def
end
KAAAAA+CambriaMath /Encoding get
dup 116 /g150 put
pop
end
%ADOEndSubsetFont
/AARSSS+CambriaMath /KAAAAA+CambriaMath findfont ct_VMDictPut
/AARSSS+CambriaMath*1 
[116{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
758.819 479.764 mo
(t)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
758.819 479.764 mo
(t) false chp
.28457 lw
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
1 /0 /CSD get_res sepcs
.506 sep
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 1718 19 <00020079000004380555001e002b006bb0852b5840251c20032091401c1c
130705080708a644071312a64413290329911303177e24242d1f007f0c2f
e13211392fe1003fed2b2b00182f2b110033111239182f1aed2b31301b40
111c20916c1c1c13070508071329916c130300183f2b2f11331112392f2b
30315925141e02171521353e023511342e02273521321615140e02232227
353332363635342e0223220701a90d1b2e31fe493e2a0d0a17262e01f0ea
e54884b4636f3d7471934e2e5170426332fd3b4629170b31311027484a03
61453f23150d31b3b768a66a2e04533b89715673461d0400>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g19 19 def
end
AARSSS+CambriaMath /Encoding get
dup 80 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[80{/.notdef}rp /g19 35{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
252.48 196.518 mo
(P)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
252.48 196.518 mo
(P) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 886 11 <000100790000050405550038008ab0852b5840302b0f030f91402b23172b
91303006091503181718a644081712253134032232232322a6442303007f
2c0d0d3a0f2a7f1db8fff0b30f014d1d2f2be13212392f33e1003f2b1100
33111733183f332b110017332b00182f1aed2b31301b40152b0f916c2b06
09150318081712253134032232230300183f331117333f331117332f2b30
315925141e03171521353e0235112111141e02171521353e023511342e02
273521150e0315112111342626273521150e02150490060e142527fe5d37
2c11fdd40915292efe5b3e2a0d0a17262e01a52c27170b022c11283b01a3
382c10fa3a3a2316120a31310e22465301a3fe5d433e24180c3131102748
4a0361453f23150d31310b16214245fe9e01625740221031310e23465200
>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g11 11 def
end
AARSSS+CambriaMath /Encoding get
dup 72 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[72{/.notdef}rp /g11 7{/.notdef}rp /g19 35{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
267.758 196.518 mo
(H)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
267.758 196.518 mo
(H) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 236 4 <00020006000004e90565001f002200beb0852b58404408092122050b0a20
220e2219182220212203050e051a1f1f240e1713080b2214200a030a9140
0f204f200211032020181201141e03111211a64400160e061b0512221804
003f332f17332b11001733111239182f5f5e5d1aed2b1112003939300118
2f333312392f3333111217391133331087c0c0c087c0c0c0311b4022080b
2214200a916c0f204f200211032020181201141e031100160e061b051222
180400183f332f17331117331112392f5f5e5d2b11123939305921353e02
353426272721070606151416171521353636370133011e02171501210303
1c323118100f25fe2e221a103d3ffe5538532701a19e01541825342dfcb3
01a2be310a182b24224f3181624a4c1f3c380931310970680453fba54e52
2e0b31021c028500>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g4 4 def
end
AARSSS+CambriaMath /Encoding get
dup 65 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[65{/.notdef}rp /g4 6{/.notdef}rp /g11 7{/.notdef}rp /g19 35{/.notdef}rp /g150 
139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
285.631 196.518 mo
(A)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
285.631 196.518 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 2284 22 <00010070fff003950565003000e1b0852b58400f2f100e15482f2d2f0001
00000b0416b8fff0403c0e154816130018101820188018040e0318181c0b
2424041c2d04030491402d13131c031c91130418a44f170117172820ed0f
0f3028ed07073200a4302fe112392fe112392fe111392f5de1003fed2b00
183f1aed2b1112003911331239182f5f5e5d12392b1112392f5d12392b31
301b400f2f100e15482f2d2f000100000b0416b8fff040230e1548161300
18101820188018040e0318181c0b24241c2d04916c2d13131c916c130400
183f2b3f2b1139113312392f5f5e5d12392b1112392f5d12392b30315913
1e0233323635342626272e02353436363332161711232e02232206061514
1616171e0215140e0223222711d414446c55757d34767975884369cb834c
916d6317465e4b41673c336c6a808d4f4275a3619dcd01375866317a754b
665a3c3a6f824d70a55a101cfef258622730614347625434406e8d5e6991
5b2935011200>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g22 22 def
end
AARSSS+CambriaMath /Encoding get
dup 83 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[65{/.notdef}rp /g4 6{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 
32{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
301.571 196.518 mo
(S)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
301.571 196.518 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 544 8 <000100790000042a0555002e00ceb0852b58b9000fffc0404b090c480f0a
1f1f17180202090a0a17031240090c48121791400a2e220a9128302223a6
44221803189140222e2da6442e090309912e0311a40f12121801a4020218
2120a41f1f300a187f272fe13212392fe13212392fe112392f33e1003fed
2b2b00182f1aed2b2b2b00182f1afdc62b2b11120039182f1112392f10c6
2b31301bb9000fffc04023090c480f0a1f1f17180202090a1240090c4812
0a17916c0a2218916c222e09916c2e0300183f2b2f2b2f2bc62b1112392f
1112392f10c62b3031590111232e0423211133323636373311232e022323
1121323e0337330321353e023511342e0227350420620f2022293827fec4
d62c32210f5e5e0e222f2fd60137313d2c2217146313fc623e2a0d0a1726
2e0555fed2314a321e0bfdf4193c40fe803c3d1afdbf1129424744fea131
1027484a0361453f23150d31>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g8 8 def
end
AARSSS+CambriaMath /Encoding get
dup 69 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[65{/.notdef}rp /g4 3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 
2{/.notdef}rp /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
314.334 196.518 mo
(E)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
314.334 196.518 mo
(E) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if

2 0 3 <> AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g3 3 def
end
AARSSS+CambriaMath /Encoding get
dup 32 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 32{/.notdef}rp /g4 3{/.notdef}rp /g8 2{/.notdef}rp /g11 
7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
329.003 196.518 mo
( )sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
329.003 196.518 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 11814 883 <000100b2000003ce0565001a005fb0852b58401e12161515170806090809
994408170417000e161609060009008a0e0e1c1b1112392fe1c610c61133
2f111239003f2f2b110033111239182f333931301b400b12161515170806
0908170400183f2f11331112392f333930315901141e03171521353e0335
11342623220607270133061502b70d213e5e4dfd1d6f5f32171c1b207657
2c01d4370601053a3b25150b0249490511223e46032b2825423a4d011760
aa00>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g883 883 def
end
AARSSS+CambriaMath /Encoding get
dup 49 /g883 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 15{/.notdef}rp /g4 3{/.notdef}rp /g8 
2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp /g150 
139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
333.796 196.518 mo
(1)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
333.796 196.518 mo
(1) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
352.972 195.112 mo
(P)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
352.972 195.112 mo
(P) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
368.25 195.112 mo
(H)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
368.25 195.112 mo
(H) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
386.123 195.112 mo
(A)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
386.123 195.112 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
402.063 195.112 mo
(S)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
402.063 195.112 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
414.826 195.112 mo
(E)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
414.826 195.112 mo
(E) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
429.495 195.112 mo
( )sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
429.495 195.112 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 11996 884 <00010081000003c9056500280099b0852b584033201d121209181816081d
16031a169b401d040905401013480528082803289f081919120905070620
8c12122a19280909188e192fe1332f331112392ff1d632cd1112392f002f
ed2b001810c62b333f1aed322b11120039182f113911123931301b401b20
1d1212091818081a1d169b6c1d040905401013480508289f6c0800182f2b
c62b333f2b3211392f113911123930315925323e02373303213536363736
373e02353426262322072335363633321615140e0307060702be313c2415
105511fcc92b9286743338371830634bbb417979d354babe152d4c5c71be
59a00c1c2d2ffedc3069dc95804248695d2f4b7342d0c03933a39b355957
646778c99600>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g884 884 def
end
AARSSS+CambriaMath /Encoding get
dup 50 /g884 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 14{/.notdef}rp /g4 3{/.notdef}rp 
/g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp 
/g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
434.287 195.112 mo
(2)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
434.287 195.112 mo
(2) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
674.092 203.574 mo
(P)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
674.092 203.574 mo
(P) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
689.37 203.574 mo
(H)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
689.37 203.574 mo
(H) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
707.243 203.574 mo
(A)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
707.243 203.574 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
723.183 203.574 mo
(S)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
723.183 203.574 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
735.946 203.574 mo
(E)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
735.946 203.574 mo
(E) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
750.615 203.574 mo
( )sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
750.615 203.574 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 12272 885 <00010090fff003ca0565003000bbb0852b5840440d0c2526262503259a40
260416269a28300f1a0111031a001a001e2d161e03191e9a401613042d03
012d9b04040c0826262a308e00001a088c2a2a1a128c2121321b8e1a2fe1
12392fe112392fe112392fe112392f1239003fed322b00183f1aed322b11
12003939182f2f5f5e5d2b00182f1aed2b111200393931301b401f0d0c26
259a6c260f1a0111031a001a002d19161e9a6c161301042d9b6c04040018
3f2b323f2b321139392f2f5f5e5d2f2b3939303159133536363332161615
14060607151e031514060623222627353316163332363534262323353e02
353426232206079f74ca5e71aa5a447b623d71583565d09556c753782373
638285b0aa5a87b95a76715e761c043abe373646835b5581602e090b3554
754b74b4682720d4685e8e8b929a5808588a566f78666900>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g885 885 def
end
AARSSS+CambriaMath /Encoding get
dup 51 /g885 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 
32{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
755.408 203.574 mo
(3)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
755.408 203.574 mo
(3) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
84.5424 362.645 mo
84.5424 512.422 li
80.1558 512.422 li
80.1558 362.645 li
cp
75.7693 364.833 mo
82.3491 351.702 li
88.9289 364.833 li
cp
88.9289 510.234 mo
82.3491 523.365 li
75.7693 510.234 li
cp
.997223 .918425 .647791 .507591 cmyk
f
103.085 540.422 mo
116.245 540.425 li
116.245 543.709 li
103.085 543.704 li
cp
126.116 540.428 mo
139.276 540.43 li
139.273 543.714 li
126.113 543.709 li
cp
149.144 540.433 mo
162.304 540.436 li
162.304 543.717 li
149.144 543.714 li
cp
172.175 540.438 mo
185.334 540.441 li
185.332 543.722 li
172.172 543.72 li
cp
195.203 540.443 mo
208.362 540.446 li
208.362 543.728 li
195.203 543.725 li
cp
218.233 540.449 mo
231.393 540.451 li
231.39 543.733 li
218.231 543.73 li
cp
241.261 540.454 mo
254.421 540.457 li
254.421 543.738 li
241.261 543.736 li
cp
264.292 540.459 mo
277.451 540.462 li
277.449 543.744 li
264.289 543.741 li
cp
287.333 540.465 mo
300.493 540.467 li
300.466 543.749 li
287.306 543.746 li
cp
310.356 540.467 mo
323.515 540.473 li
323.515 543.754 li
310.356 543.752 li
cp
333.378 540.473 mo
346.538 540.475 li
346.538 543.759 li
333.378 543.757 li
cp
356.401 540.478 mo
369.561 540.481 li
369.561 543.765 li
356.401 543.762 li
cp
379.45 540.483 mo
392.61 540.486 li
392.583 543.77 li
379.424 543.767 li
cp
402.473 540.489 mo
415.632 540.491 li
415.632 543.775 li
402.473 543.773 li
cp
425.496 540.494 mo
430.042 540.497 li
430.042 543.778 li
425.496 543.778 li
cp
f
33.7947 325.511 mo
40.9445 325.511 li
40.9445 326.363 li
40.4963 326.416 40.1642 326.54 39.9489 326.737 cv
39.7333 326.936 39.6256 327.214 39.6256 327.575 cv
39.6256 327.859 39.6514 328.137 39.7032 328.408 cv
39.7548 328.678 39.8627 329.111 40.0265 329.705 cv
42.5864 338.969 li
45.7787 329.745 li
45.909 329.381 46.01 329.042 46.0844 328.724 cv
46.1562 328.405 46.1934 328.071 46.1934 327.718 cv
46.1934 327.296 46.0844 326.975 45.8638 326.75 cv
45.6431 326.527 45.3055 326.397 44.8482 326.363 cv
44.8482 325.511 li
50.4205 325.511 li
50.4205 326.363 li
50.0935 326.416 49.817 326.522 49.5883 326.678 cv
49.3597 326.837 49.1524 327.066 48.9663 327.363 cv
48.7828 327.66 48.5648 328.143 48.3149 328.814 cv
42.8966 343.213 li
39.9101 343.213 li
35.6434 328.763 li
35.4539 328.119 35.2944 327.66 35.1652 327.389 cv
35.0357 327.119 34.8677 326.898 34.6608 326.731 cv
34.454 326.564 34.1653 326.442 33.7947 326.363 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
63.1494 339.963 mo
62.6629 339.963 62.2747 340.21 61.9876 340.701 cv
61.6978 341.194 61.525 341.905 61.4692 342.836 cv
64.6328 342.836 li
64.6062 341.868 64.4813 341.146 64.2527 340.674 cv
64.024 340.199 63.6572 339.963 63.1494 339.963 cv
cp
63.3036 338.977 mo
63.8778 338.977 64.3856 339.043 64.8189 339.175 cv
65.2523 339.308 65.6244 339.494 65.9355 339.73 cv
66.2439 339.966 66.5017 340.253 66.7038 340.589 cv
66.9457 340.987 67.1265 341.444 67.2514 341.964 cv
67.3737 342.481 67.4402 343.112 67.4455 343.86 cv
61.4213 343.86 li
61.4267 345.004 61.6314 345.845 62.0328 346.386 cv
62.4369 346.927 63.0484 347.197 63.8725 347.197 cv
64.3537 347.197 64.787 347.107 65.1752 346.927 cv
65.5606 346.746 65.978 346.428 66.43 345.975 cv
67.1983 346.807 li
66.5523 347.492 65.9116 347.975 65.2788 348.259 cv
64.6461 348.542 63.9177 348.686 63.0935 348.686 cv
61.6181 348.686 60.5068 348.282 59.7624 347.476 cv
59.0181 346.67 58.6459 345.473 58.6459 343.887 cv
58.6459 342.863 58.8373 341.979 59.2228 341.237 cv
59.6056 340.494 60.1479 339.932 60.8498 339.55 cv
61.5543 339.168 62.3704 338.977 63.3036 338.977 cv
cp
56.0272 338.977 mo
56.4127 338.977 56.8195 339.016 57.2448 339.099 cv
57.2448 341.717 li
55.5248 341.717 li
55.4158 341.351 55.2749 341.07 55.1021 340.873 cv
54.9266 340.677 54.6927 340.579 54.4029 340.579 cv
54.262 340.579 54.1105 340.621 53.943 340.706 cv
53.7728 340.791 53.6186 340.913 53.4751 341.067 cv
53.3342 341.221 53.2332 341.38 53.172 341.542 cv
53.1109 341.704 53.071 341.865 53.0524 342.03 cv
53.0338 342.194 53.0258 342.441 53.0258 342.77 cv
53.0258 345.794 li
53.0258 346.394 53.0471 346.815 53.0923 347.054 cv
53.1348 347.296 53.2252 347.484 53.3581 347.619 cv
53.491 347.755 53.7143 347.85 54.0307 347.908 cv
54.0307 348.534 li
49.3464 348.534 li
49.3464 347.908 li
49.6521 347.826 49.8622 347.717 49.9791 347.585 cv
50.0961 347.452 50.1759 347.272 50.2158 347.046 cv
50.2583 346.818 50.2796 346.404 50.2796 345.802 cv
50.2796 341.905 li
50.2796 341.438 50.2716 341.093 50.2556 340.868 cv
50.2397 340.642 50.1998 340.462 50.1413 340.327 cv
50.0802 340.191 49.9898 340.08 49.8648 339.995 cv
49.7425 339.91 49.5272 339.836 49.2241 339.772 cv
49.2241 339.128 li
51.8268 339.053 li
53.0258 339.053 li
52.8929 340.483 li
53.0152 340.512 li
53.4777 339.969 53.9536 339.576 54.4401 339.337 cv
54.9293 339.096 55.4583 338.977 56.0272 338.977 cv
cp
74.1955 334.918 mo
74.7405 334.918 75.2243 334.963 75.6497 335.05 cv
75.6497 336.984 li
74.3576 336.984 li
74.2486 336.637 74.1317 336.382 74.0014 336.218 cv
73.8711 336.053 73.701 335.971 73.491 335.971 cv
73.2198 335.971 73.0098 336.061 72.8662 336.242 cv
72.72 336.422 72.619 336.677 72.5658 337.008 cv
72.5126 337.34 72.486 337.807 72.486 338.406 cv
72.486 339.128 li
74.3177 339.128 li
74.3177 340.314 li
72.486 340.314 li
72.486 346.155 li
72.486 346.627 72.51 346.964 72.5605 347.158 cv
72.611 347.354 72.7014 347.51 72.8316 347.625 cv
72.9619 347.739 73.1905 347.831 73.5202 347.908 cv
73.5202 348.534 li
68.7881 348.534 li
68.7881 347.908 li
69.0858 347.818 69.2932 347.723 69.4101 347.614 cv
69.5271 347.508 69.6122 347.357 69.6627 347.163 cv
69.7132 346.972 69.7398 346.635 69.7398 346.155 cv
69.7398 340.314 li
68.5807 340.314 li
68.5807 339.658 li
68.9157 339.608 69.147 339.547 69.2772 339.475 cv
69.4075 339.401 69.5138 339.287 69.5963 339.128 cv
69.6787 338.971 69.7345 338.719 69.7664 338.38 cv
69.8701 337.242 70.2928 336.379 71.0372 335.796 cv
71.7815 335.21 72.8343 334.918 74.1955 334.918 cv
cp
ef
233.886 281.937 mo
247.046 281.963 li
247.041 285.253 li
233.881 285.226 li
cp
256.914 281.963 mo
270.074 281.99 li
270.069 285.279 li
256.909 285.253 li
cp
279.945 282.016 mo
293.102 282.043 li
293.102 285.306 li
279.94 285.306 li
cp
302.965 282.043 mo
316.125 282.069 li
316.125 285.359 li
302.965 285.332 li
cp
326.014 282.096 mo
339.174 282.096 li
339.147 285.385 li
325.988 285.359 li
cp
349.037 282.122 mo
362.197 282.149 li
362.197 285.438 li
349.037 285.412 li
cp
372.06 282.149 mo
385.219 282.175 li
385.219 285.465 li
372.06 285.438 li
cp
395.082 282.202 mo
408.242 282.229 li
408.242 285.491 li
395.082 285.491 li
cp
418.131 282.229 mo
431.291 282.255 li
431.264 285.545 li
418.105 285.518 li
cp
441.154 282.282 mo
454.314 282.282 li
454.314 285.571 li
441.154 285.545 li
cp
464.177 282.308 mo
477.336 282.335 li
477.336 285.624 li
464.177 285.598 li
cp
487.199 282.335 mo
500.359 282.361 li
500.359 285.651 li
487.199 285.624 li
cp
510.249 282.388 mo
523.408 282.414 li
523.382 285.677 li
510.222 285.677 li
cp
533.271 282.414 mo
546.431 282.441 li
546.431 285.73 li
533.271 285.704 li
cp
556.294 282.467 mo
569.453 282.494 li
569.453 285.757 li
556.294 285.73 li
cp
579.317 282.494 mo
592.476 282.52 li
592.476 285.81 li
579.317 285.783 li
cp
602.366 282.547 mo
615.525 282.547 li
615.499 285.836 li
602.339 285.81 li
cp
625.388 282.573 mo
638.548 282.6 li
638.548 285.863 li
625.388 285.863 li
cp
648.411 282.6 mo
661.571 282.626 li
661.571 285.916 li
648.411 285.889 li
cp
671.434 282.653 mo
684.593 282.68 li
684.593 285.942 li
671.434 285.916 li
cp
694.483 282.68 mo
707.643 282.706 li
707.616 285.995 li
694.456 285.969 li
cp
717.506 282.733 mo
730.665 282.733 li
730.665 286.022 li
717.506 285.995 li
cp
740.528 282.759 mo
753.688 282.786 li
753.688 286.075 li
740.528 286.049 li
cp
763.551 282.786 mo
776.711 282.812 li
776.711 286.102 li
763.551 286.075 li
cp
786.6 282.839 mo
799.76 282.865 li
799.733 286.128 li
786.574 286.128 li
cp
809.623 282.865 mo
813.637 282.865 li
813.637 286.155 li
809.623 286.155 li
cp
.997223 .918425 .647791 .507591 cmyk
f
102.128 280.982 mo
115.288 280.982 li
115.288 284.271 li
102.128 284.271 li
cp
125.156 280.982 mo
138.316 280.982 li
138.316 284.271 li
125.156 284.271 li
cp
148.187 280.982 mo
161.347 280.982 li
161.347 284.271 li
148.187 284.271 li
cp
171.215 280.982 mo
179.464 280.982 li
179.464 284.271 li
171.215 284.271 li
cp
f
701.368 445.363 mo
793.14 445.644 li
793.14 450.021 li
701.368 449.74 li
cp
703.548 454.125 mo
690.389 447.52 li
703.575 440.994 li
cp
790.96 441.262 mo
804.12 447.867 li
790.933 454.393 li
cp
f
97.3431 80.7244 mo
241.293 80.7244 li
241.293 30.8259 li
236.907 35.2029 li
379.982 35.2029 li
379.982 26.4489 li
232.52 26.4489 li
232.52 76.3474 li
236.907 71.9703 li
97.3431 71.9703 li
cp
f
372.325 26.4489 mo
452.772 26.4489 li
452.772 35.2029 li
372.325 35.2029 li
cp
f
238.669 26.4489 mo
459.737 26.4489 li
459.737 76.3474 li
455.351 71.9703 li
786.095 71.9703 li
786.095 80.7244 li
450.964 80.7244 li
450.964 30.8259 li
455.351 35.2029 li
238.669 35.2029 li
cp
f
786.122 80.8836 mo
1029.69 80.7244 li
1029.67 71.9703 li
786.095 72.1295 li
cp
f
99.5762 143.754 mo
241.918 143.754 li
241.918 96.4023 li
237.531 100.779 li
349.17 100.779 li
349.17 92.0252 li
233.145 92.0252 li
233.145 139.377 li
237.531 135 li
99.5762 135 li
cp
f
241.859 92.0252 mo
351.536 92.0252 li
351.536 139.483 li
347.149 135.106 li
787.531 135.106 li
787.531 143.86 li
342.763 143.86 li
342.763 96.4023 li
347.149 100.779 li
241.859 100.779 li
cp
f
783.569 143.807 mo
1029.69 143.436 li
1029.67 134.682 li
783.543 135.053 li
cp
f
343.374 26.4489 mo
384.368 26.4489 li
384.368 80.7244 li
343.374 80.7244 li
cp
352.147 76.3474 mo
347.761 71.9703 li
379.982 71.9703 li
375.595 76.3474 li
375.595 30.8259 li
379.982 35.2029 li
347.761 35.2029 li
352.147 30.8259 li
cp
f
376.393 28.2792 mo
344.198 73.2436 li
351.35 78.3369 li
383.544 33.3726 li
cp
f
351.403 28.3588 mo
381.444 72.66 li
374.16 77.5677 li
344.145 33.2664 li
cp
f
63.8353 51.9684 mo
70.6224 51.9684 li
70.6224 52.8173 li
70.1652 52.95 69.8541 53.0826 69.6866 53.2418 cv
69.5165 53.4009 69.3995 53.5866 69.3304 53.8519 cv
69.2613 54.1172 69.2267 54.5681 69.2267 55.2048 cv
69.2267 68.0442 li
71.7337 68.0442 li
72.2787 68.0442 72.72 67.9381 73.0603 67.7524 cv
73.4006 67.5402 73.693 67.1953 73.9402 66.7178 cv
74.1848 66.2403 74.4294 65.471 74.6687 64.3568 cv
76.4419 64.3568 li
76.1574 69.5828 li
63.8353 69.5828 li
63.8353 68.7339 li
64.3005 68.6013 64.6169 68.4687 64.7844 68.3095 cv
64.9545 68.1503 65.0688 67.9646 65.1273 67.6994 cv
65.1884 67.4341 65.2177 66.9831 65.2177 66.3199 cv
65.2177 55.2313 li
65.2177 54.5681 65.1911 54.1172 65.1353 53.8519 cv
65.0794 53.6131 64.9651 53.4009 64.7923 53.2418 cv
64.6195 53.0826 64.3005 52.95 63.8353 52.8173 cv
cp
48.2033 51.9684 mo
61.0279 51.9684 li
61.0279 56.0802 li
59.2573 56.0802 li
58.9729 55.2579 58.7309 54.7007 58.5342 54.4089 cv
58.3348 54.1172 58.0982 53.9049 57.8217 53.7192 cv
57.5479 53.5601 57.0774 53.4805 56.4127 53.4805 cv
53.5947 53.4805 li
53.5947 59.6615 li
55.3015 59.6615 li
55.6816 59.6615 55.9767 59.6084 56.1947 59.5023 cv
56.4101 59.3962 56.5882 59.237 56.7291 58.9717 cv
56.8726 58.733 57.0082 58.3351 57.1385 57.8045 cv
58.598 57.8045 li
58.598 63.057 li
57.1385 63.057 li
57.0162 62.553 56.8833 62.1816 56.7371 61.9163 cv
56.5908 61.6511 56.4154 61.4653 56.2133 61.3593 cv
56.0113 61.2266 55.7056 61.1735 55.3015 61.1735 cv
53.5947 61.1735 li
53.5947 68.0707 li
56.3994 68.0707 li
56.7025 68.0707 56.9551 68.0442 57.1624 68.0177 cv
57.3698 67.9646 57.5559 67.9116 57.7181 67.8055 cv
57.8829 67.7259 58.0397 67.5932 58.1913 67.4341 cv
58.3428 67.2749 58.4757 67.0892 58.5927 66.9035 cv
58.707 66.7178 58.832 66.4526 58.9596 66.1608 cv
59.0898 65.8424 59.2307 65.418 59.3876 64.8608 cv
61.1582 64.8608 li
60.9136 69.5828 li
48.2033 69.5828 li
48.2033 68.7339 li
48.6685 68.6013 48.9849 68.4687 49.1524 68.3095 cv
49.3225 68.1503 49.4368 67.9646 49.4953 67.6994 cv
49.5564 67.4606 49.5857 66.9831 49.5857 66.3464 cv
49.5857 55.2313 li
49.5857 54.5681 49.5591 54.1172 49.5033 53.8519 cv
49.4474 53.6131 49.3331 53.4009 49.1603 53.2418 cv
48.9875 53.0826 48.6685 52.95 48.2033 52.8173 cv
cp
40.8118 51.7562 mo
41.5791 51.7562 42.3118 51.8093 43.0099 51.8889 cv
43.708 51.9684 44.5053 52.1011 45.4012 52.3133 cv
45.4012 56.0537 li
43.6304 56.0537 li
43.3978 55.0987 43.0529 54.3824 42.5962 53.9315 cv
42.1392 53.507 41.4799 53.2683 40.618 53.2683 cv
39.8423 53.2683 39.2194 53.4805 38.7496 53.8784 cv
38.2799 54.2763 38.0451 54.8334 38.0451 55.5231 cv
38.0451 56.0272 38.1422 56.4516 38.336 56.823 cv
38.53 57.1944 38.8552 57.5392 39.3122 57.9106 cv
39.7689 58.2555 40.4327 58.6534 41.3031 59.1044 cv
42.3633 59.6349 43.1973 60.192 43.805 60.7225 cv
44.4125 61.2531 44.8615 61.8102 45.1486 62.4468 cv
45.4384 63.057 45.582 63.7998 45.582 64.6221 cv
45.582 65.6832 45.3374 66.5851 44.8456 67.381 cv
44.3545 68.1503 43.6391 68.7339 42.6996 69.1584 cv
41.7601 69.5828 40.6741 69.795 39.4414 69.795 cv
38.5622 69.795 37.6463 69.742 36.6941 69.6359 cv
35.7415 69.5297 34.8472 69.3971 34.0111 69.2114 cv
34.0111 65.2322 li
35.7825 65.2322 li
35.9981 66.2668 36.3578 67.0096 36.8621 67.5136 cv
37.3664 68.0177 38.1055 68.283 39.0793 68.283 cv
39.9327 68.283 40.5986 68.0707 41.0769 67.6198 cv
41.5554 67.1688 41.7944 66.5587 41.7944 65.7363 cv
41.7944 64.967 41.5639 64.3038 41.1027 63.7733 cv
40.6417 63.2427 39.8423 62.6856 38.7044 62.1285 cv
37.7564 61.6511 36.9655 61.1735 36.332 60.696 cv
35.6985 60.192 35.1987 59.6084 34.8323 58.9717 cv
34.466 58.3085 34.2828 57.5657 34.2828 56.7169 cv
34.2828 55.6558 34.5457 54.7538 35.0713 54.011 cv
35.5972 53.2948 36.3578 52.7112 37.3534 52.3398 cv
38.349 51.9684 39.5017 51.7562 40.8118 51.7562 cv
cp
ef
55.1473 124.999 mo
52.5606 132.268 li
57.2156 132.268 li
cp
66.0285 121.604 mo
72.4541 121.604 li
76.0378 132.215 li
79.9166 121.604 li
85.978 121.604 li
85.978 122.479 li
85.5233 122.585 85.2123 122.744 85.0475 122.877 cv
84.8853 123.036 84.771 123.248 84.7045 123.487 cv
84.6407 123.752 84.6088 124.203 84.6088 124.84 cv
84.6088 136.008 li
84.6088 136.539 84.6354 136.937 84.6859 137.255 cv
84.7391 137.547 84.8428 137.785 85.0023 137.945 cv
85.1618 138.104 85.4888 138.236 85.978 138.369 cv
85.978 139.218 li
79.3476 139.218 li
79.3476 138.369 li
79.7252 138.263 79.9883 138.183 80.1346 138.104 cv
80.2808 138.024 80.3951 137.918 80.4775 137.812 cv
80.5599 137.679 80.6211 137.494 80.6583 137.228 cv
80.6982 136.99 80.7168 136.565 80.7168 135.982 cv
80.7168 129.641 li
80.7168 128.952 80.7301 128.129 80.7567 127.201 cv
80.7806 126.246 80.8072 125.583 80.8337 125.185 cv
80.5626 125.185 li
80.4057 125.689 80.0787 126.617 79.5789 127.97 cv
76.1149 137.281 li
73.8392 137.281 li
70.1917 126.803 li
69.9764 126.219 69.7877 125.636 69.6228 125.052 cv
69.3915 125.052 li
69.4766 126.458 69.5191 128.156 69.5191 130.092 cv
69.5191 136.008 li
69.5191 136.645 69.5511 137.096 69.6122 137.334 cv
69.6707 137.6 69.793 137.812 69.9738 137.971 cv
70.1545 138.13 70.4682 138.263 70.9175 138.369 cv
70.9175 139.218 li
66.0285 139.218 li
66.0285 138.369 li
66.4938 138.263 66.8128 138.13 66.9803 137.971 cv
67.1478 137.812 67.2621 137.6 67.3232 137.361 cv
67.3817 137.096 67.4136 136.645 67.4136 136.008 cv
67.4136 124.84 li
67.4136 124.177 67.3844 123.752 67.3285 123.487 cv
67.2727 123.248 67.1637 123.063 66.9989 122.903 cv
66.8367 122.744 66.5124 122.612 66.0285 122.479 cv
cp
54.5784 121.524 mo
58.0291 121.524 li
62.296 135.982 li
62.4847 136.618 62.6443 137.069 62.7745 137.361 cv
62.9048 137.626 63.0723 137.838 63.2796 137.998 cv
63.4843 138.183 63.7741 138.289 64.1437 138.369 cv
64.1437 139.218 li
57.0082 139.218 li
57.0082 138.369 li
57.4549 138.316 57.7872 138.21 58.0025 137.998 cv
58.2178 137.812 58.3268 137.52 58.3268 137.175 cv
58.3268 136.883 58.2976 136.592 58.2365 136.273 cv
58.1753 135.955 58.077 135.531 57.9387 135.027 cv
57.5904 133.78 li
52.0687 133.78 li
51.6434 135 li
51.5211 135.345 51.4227 135.663 51.3456 136.008 cv
51.2685 136.326 51.2286 136.671 51.2286 137.016 cv
51.2286 137.865 51.6779 138.316 52.5738 138.369 cv
52.5738 139.218 li
47.0521 139.218 li
47.0521 138.369 li
47.3712 138.342 47.6503 138.236 47.8922 138.051 cv
48.1341 137.838 48.3548 137.6 48.5515 137.255 cv
48.7509 136.937 48.9609 136.459 49.1869 135.849 cv
cp
40.8118 121.418 mo
41.5791 121.418 42.3118 121.444 43.0099 121.524 cv
43.708 121.604 44.5053 121.763 45.4012 121.975 cv
45.4012 125.715 li
43.6304 125.715 li
43.3978 124.734 43.0529 124.018 42.5962 123.593 cv
42.1392 123.142 41.4799 122.93 40.618 122.93 cv
39.8423 122.93 39.2194 123.116 38.7496 123.514 cv
38.2799 123.938 38.0451 124.469 38.0451 125.185 cv
38.0451 125.689 38.1422 126.113 38.336 126.485 cv
38.53 126.829 38.8552 127.201 39.3122 127.546 cv
39.7689 127.891 40.4327 128.289 41.3031 128.74 cv
42.3633 129.297 43.1973 129.827 43.805 130.358 cv
44.4125 130.888 44.8615 131.472 45.1486 132.082 cv
45.4384 132.719 45.582 133.435 45.582 134.257 cv
45.582 135.318 45.3374 136.247 44.8456 137.016 cv
44.3545 137.785 43.6391 138.396 42.6996 138.82 cv
41.7601 139.218 40.6741 139.43 39.4414 139.43 cv
38.5622 139.43 37.6463 139.377 36.6941 139.297 cv
35.7415 139.191 34.8472 139.032 34.0111 138.847 cv
34.0111 134.867 li
35.7825 134.867 li
35.9981 135.902 36.3578 136.671 36.8621 137.175 cv
37.3664 137.679 38.1055 137.918 39.0793 137.918 cv
39.9327 137.918 40.5986 137.706 41.0769 137.255 cv
41.5554 136.83 41.7944 136.194 41.7944 135.398 cv
41.7944 134.602 41.5639 133.939 41.1027 133.408 cv
40.6417 132.878 39.8423 132.347 38.7044 131.764 cv
37.7564 131.313 36.9655 130.835 36.332 130.331 cv
35.6985 129.827 35.1987 129.27 34.8323 128.607 cv
34.466 127.944 34.2828 127.201 34.2828 126.352 cv
34.2828 125.317 34.5457 124.415 35.0713 123.673 cv
35.5972 122.93 36.3578 122.373 37.3534 121.975 cv
38.349 121.604 39.5017 121.418 40.8118 121.418 cv
cp
ef
321.202 45.8671 mo
328.407 45.8671 li
328.407 46.7159 li
328.008 46.769 327.716 46.8486 327.53 46.9812 cv
327.37 47.1404 327.29 47.3526 327.29 47.6444 cv
327.29 47.8832 327.37 48.1484 327.503 48.4668 cv
327.636 48.7586 327.928 49.2891 328.38 50.0054 cv
329.577 52.0215 li
331.145 49.7136 li
331.491 49.2096 331.73 48.8116 331.836 48.5464 cv
331.943 48.2811 332.023 47.9893 332.023 47.671 cv
332.023 47.4056 331.916 47.1934 331.73 47.0078 cv
331.544 46.8486 331.278 46.7425 330.933 46.7159 cv
330.933 45.8671 li
336.276 45.8671 li
336.276 46.7159 li
336.037 46.7955 335.798 46.9016 335.558 47.0609 cv
335.346 47.1934 335.08 47.4587 334.787 47.8036 cv
334.495 48.1484 334.016 48.7851 333.378 49.7136 cv
330.587 53.6927 li
334.362 59.9002 li
334.787 60.5899 335.106 61.1205 335.372 61.4918 cv
335.638 61.8632 335.851 62.1285 336.063 62.3142 cv
336.276 62.4734 336.489 62.5795 336.701 62.6326 cv
336.701 63.4814 li
329.523 63.4814 li
329.523 62.6326 li
329.896 62.5795 330.162 62.4999 330.348 62.3408 cv
330.534 62.2081 330.613 61.9958 330.613 61.7041 cv
330.613 61.5449 330.587 61.3857 330.534 61.2 cv
330.481 61.0143 330.401 60.8287 330.321 60.643 cv
330.215 60.4573 330.029 60.139 329.763 59.688 cv
327.955 56.7434 li
325.855 59.8472 li
325.695 60.0859 325.562 60.3246 325.429 60.5369 cv
325.323 60.7491 325.243 60.9348 325.217 61.0939 cv
325.164 61.2796 325.137 61.4653 325.137 61.7041 cv
325.137 61.9428 325.243 62.1285 325.429 62.3142 cv
325.616 62.4734 325.881 62.5795 326.227 62.6326 cv
326.227 63.4814 li
320.857 63.4814 li
320.857 62.6326 li
321.256 62.4999 321.628 62.2877 321.973 61.9428 cv
322.319 61.6245 322.877 60.9348 323.568 59.9002 cv
326.945 55.0721 li
323.701 49.6605 li
323.356 49.0769 323.037 48.5994 322.797 48.2015 cv
322.532 47.8301 322.319 47.5383 322.133 47.3261 cv
321.973 47.1138 321.814 46.9812 321.681 46.9016 cv
321.548 46.7955 321.388 46.7425 321.202 46.7159 cv
cp
304.401 45.8671 mo
319.634 45.8671 li
319.634 50.3768 li
317.853 50.3768 li
317.667 49.7401 317.534 49.2361 317.374 48.8912 cv
317.241 48.5464 317.082 48.2546 316.896 48.0158 cv
316.683 47.8036 316.47 47.6179 316.204 47.5383 cv
315.939 47.4322 315.513 47.3792 314.955 47.3792 cv
314.024 47.3792 li
314.024 60.2451 li
314.024 60.9082 314.078 61.3593 314.131 61.6245 cv
314.211 61.8898 314.343 62.102 314.556 62.2612 cv
314.742 62.4203 315.088 62.553 315.593 62.6326 cv
315.593 63.4814 li
308.468 63.4814 li
308.468 62.6326 li
308.814 62.553 309.106 62.4734 309.319 62.3938 cv
309.532 62.2877 309.691 62.155 309.797 61.9694 cv
309.904 61.7836 309.957 61.5449 309.984 61.2796 cv
310.01 60.9879 310.037 60.643 310.037 60.2451 cv
310.037 47.3792 li
308.973 47.3792 li
308.442 47.3792 308.043 47.4322 307.724 47.5648 cv
307.405 47.724 307.139 47.9628 306.9 48.3607 cv
306.687 48.7321 306.421 49.4218 306.182 50.3768 cv
304.401 50.3768 li
cp
ef
240.264 216.201 mo
459.551 216.201 li
459.551 162.297 li
455.164 166.674 li
1031.53 166.674 li
1031.53 157.92 li
450.778 157.92 li
450.778 211.824 li
455.164 207.447 li
240.264 207.447 li
cp
f
978.783 157.602 mo
1033.47 157.602 li
1033.47 210.737 li
1029.08 206.359 li
1039 206.359 li
1039 215.114 li
1024.7 215.114 li
1024.7 161.979 li
1029.08 166.356 li
978.783 166.356 li
cp
f
49.7585 185.588 mo
54.9957 185.588 li
59.5737 193.52 li
59.8581 194.024 60.2277 194.687 60.6849 195.536 cv
61.1422 196.385 61.5463 197.207 61.8999 197.95 cv
62.1072 197.95 li
62.0115 195.908 61.9637 193.653 61.9637 191.212 cv
61.9637 188.825 li
61.9637 188.241 61.9424 187.843 61.8999 187.604 cv
61.8573 187.366 61.7882 187.18 61.6925 187.047 cv
61.5995 186.915 61.4798 186.809 61.3363 186.729 cv
61.1954 186.649 60.9428 186.543 60.5813 186.437 cv
60.5813 185.588 li
65.4676 185.588 li
65.4676 186.437 li
65.1246 186.543 64.8801 186.649 64.7392 186.729 cv
64.5956 186.809 64.476 186.888 64.3749 187.021 cv
64.2766 187.153 64.2021 187.339 64.149 187.604 cv
64.0985 187.87 64.0719 188.268 64.0719 188.825 cv
64.0719 203.203 li
60.7886 203.203 li
54.9692 193.149 li
54.1849 191.796 53.608 190.735 53.2385 189.965 cv
53.1215 189.965 li
53.2066 191.796 53.2491 193.759 53.2491 195.801 cv
53.2491 199.966 li
53.2491 200.603 53.2837 201.054 53.3475 201.319 cv
53.4113 201.584 53.5282 201.797 53.6957 201.929 cv
53.8632 202.088 54.1822 202.221 54.6475 202.354 cv
54.6475 203.203 li
49.7585 203.203 li
49.7585 202.354 li
50.2158 202.221 50.5295 202.088 50.6969 201.929 cv
50.8644 201.77 50.9814 201.558 51.0452 201.319 cv
51.1117 201.054 51.1436 200.603 51.1436 199.966 cv
51.1436 188.798 li
51.1436 188.161 51.1143 187.71 51.0585 187.472 cv
51.0027 187.233 50.8857 187.021 50.7102 186.862 cv
50.5321 186.702 50.2158 186.543 49.7585 186.437 cv
cp
34.1664 185.588 mo
46.991 185.588 li
46.991 189.674 li
45.2204 189.674 li
44.936 188.878 44.694 188.321 44.4968 188.029 cv
44.2985 187.737 44.0613 187.498 43.7856 187.339 cv
43.5097 187.18 43.0399 187.1 42.3764 187.1 cv
39.5578 187.1 li
39.5578 193.281 li
41.2643 193.281 li
41.6437 193.281 41.9412 193.228 42.1565 193.122 cv
42.3721 193.016 42.5508 192.83 42.693 192.592 cv
42.8352 192.326 42.9711 191.955 43.1003 191.424 cv
44.5614 191.424 li
44.5614 196.677 li
43.1003 196.677 li
42.9796 196.173 42.8461 195.775 42.6996 195.536 cv
42.5529 195.271 42.3785 195.085 42.1759 194.953 cv
41.9733 194.846 41.6695 194.793 41.2643 194.793 cv
39.5578 194.793 li
39.5578 201.691 li
42.3633 201.691 li
42.6651 201.691 42.9192 201.664 43.1263 201.638 cv
43.3332 201.584 43.5184 201.531 43.6822 201.425 cv
43.846 201.319 44.0031 201.213 44.1541 201.027 cv
44.3048 200.868 44.4386 200.709 44.5547 200.497 cv
44.6701 200.311 44.7951 200.072 44.9227 199.754 cv
45.0529 199.462 45.1938 199.038 45.3507 198.481 cv
47.1213 198.481 li
46.8767 203.203 li
34.1664 203.203 li
34.1664 202.354 li
34.6319 202.221 34.9485 202.088 35.1165 201.929 cv
35.2848 201.77 35.3988 201.558 35.4592 201.319 cv
35.5195 201.054 35.5498 200.603 35.5498 199.966 cv
35.5498 188.825 li
35.5498 188.188 35.5217 187.737 35.4658 187.472 cv
35.4097 187.206 35.2954 187.021 35.1232 186.862 cv
34.9506 186.702 34.6319 186.57 34.1664 186.437 cv
cp
ef
241.915 215.14 mo
236.545 215.14 li
236.545 172.165 li
240.932 176.542 li
99.5762 176.542 li
99.5762 167.788 li
245.318 167.788 li
245.318 210.763 li
240.932 206.386 li
241.915 206.386 li
cp
f
978.783 143.436 mo
1035.22 143.436 li
1035.22 97.0389 li
1030.84 101.416 li
1039 101.416 li
1039 92.6619 li
1026.45 92.6619 li
1026.45 139.059 li
1030.84 134.682 li
978.783 134.682 li
cp
f
980.698 79.7694 mo
1037.14 79.7694 li
1037.14 33.3726 li
1032.75 37.7496 li
1040.91 37.7496 li
1040.91 28.9955 li
1028.36 28.9955 li
1028.36 75.3924 li
1032.75 71.0153 li
980.698 71.0153 li
cp
f
455.59 365.947 mo
514.662 365.947 li
514.662 357.193 li
455.59 357.193 li
cp
0 .961578 .907591 0 cmyk
f
512.136 318.046 mo
568.895 317.242 li
568.789 308.491 li
512.003 309.287 li
cp
f
567.885 339.526 mo
625.92 339.526 li
625.92 330.772 li
567.885 330.772 li
cp
f
622.464 352.768 mo
687.066 352.577 li
687.039 343.823 li
622.438 344.014 li
cp
f
687.252 352.938 mo
1028.36 324.866 li
1027.65 316.142 li
686.534 344.213 li
cp
f
650.405 289.046 mo
538.854 288.914 li
538.881 280.159 li
650.405 280.292 li
cp
.61709 .780514 0 0 cmyk
f
660.188 542.245 mo
646.151 284.775 li
654.898 284.298 li
668.961 541.77 li
cp
f
458.381 448 mo
460.561 363.592 li
451.788 363.366 li
449.635 447.777 li
cp
0 .961578 .907591 0 cmyk
f
517.4 362.018 mo
518.862 313.637 li
510.089 313.372 li
508.654 361.756 li
cp
f
564.482 337.974 mo
563.525 311.117 li
572.272 310.799 li
573.255 337.661 li
cp
f
628.1 350.314 mo
629.057 335.427 li
620.311 334.867 li
619.354 349.752 li
cp
f
486.827 376.333 mo
486.827 437.866 li
482.441 437.866 li
482.441 376.333 li
cp
478.054 378.521 mo
484.621 365.39 li
491.214 378.521 li
cp
491.214 435.678 mo
484.621 448.809 li
478.054 435.678 li
cp
.997223 .918425 .647791 .507591 cmyk
f
652.718 360.416 mo
652.718 437.789 li
648.331 437.789 li
648.331 360.416 li
cp
643.945 362.605 mo
650.511 349.474 li
657.104 362.605 li
cp
657.104 435.601 mo
650.511 448.732 li
643.945 435.601 li
cp
f
486.189 323.171 mo
486.189 352.596 li
481.803 352.596 li
481.803 323.171 li
cp
477.416 325.36 mo
483.983 312.231 li
490.576 325.36 li
cp
490.576 350.407 mo
483.983 363.538 li
477.416 350.407 li
cp
f
483.983 311.86 mo
497.142 311.86 li
497.142 315.141 li
483.983 315.141 li
cp
507.032 311.86 mo
512.402 311.86 li
512.402 315.141 li
507.032 315.141 li
cp
f
596.57 321.898 mo
596.57 326.623 li
592.184 326.623 li
592.184 321.898 li
cp
587.797 324.087 mo
594.364 310.958 li
600.957 324.087 li
cp
600.957 324.434 mo
594.364 337.565 li
587.797 324.434 li
cp
f
568.842 310.587 mo
582.002 310.587 li
582.002 313.876 li
568.842 313.876 li
cp
591.891 310.587 mo
597.261 310.587 li
597.261 313.876 li
591.891 313.876 li
cp
f
440.064 459.709 mo
440.862 528.846 li
436.475 528.896 li
435.678 459.76 li
cp
431.318 461.999 mo
437.725 448.793 li
444.477 461.847 li
cp
445.222 526.607 mo
438.788 539.812 li
432.062 526.758 li
cp
f
430.866 386.819 mo
432.142 386.819 li
432.115 387.456 432.089 388.339 432.089 389.467 cv
432.089 397.783 li
432.089 398.168 432.115 398.457 432.142 398.653 cv
432.195 398.847 432.275 399.006 432.381 399.131 cv
432.487 399.253 432.647 399.348 432.86 399.417 cv
433.046 399.489 433.312 399.542 433.631 399.576 cv
433.95 399.613 434.348 399.64 434.853 399.653 cv
434.853 400.558 li
426.267 400.558 li
426.267 399.653 li
427.011 399.619 427.516 399.574 427.835 399.518 cv
428.154 399.462 428.393 399.377 428.553 399.263 cv
428.739 399.152 428.845 398.993 428.925 398.786 cv
429.005 398.582 429.031 398.247 429.031 397.783 cv
429.031 390.589 li
429.031 390.318 428.978 390.122 428.898 390.002 cv
428.792 389.883 428.633 389.825 428.473 389.825 cv
428.287 389.825 428.074 389.899 427.755 390.053 cv
427.463 390.204 426.958 390.517 426.267 390.987 cv
425.655 389.934 li
cp
ef
430.095 415.787 mo
431.078 415.787 431.876 415.917 432.487 416.18 cv
433.099 416.443 433.551 416.798 433.817 417.244 cv
434.109 417.692 434.242 418.215 434.242 418.812 cv
434.242 419.337 434.136 419.822 433.95 420.273 cv
433.737 420.724 433.418 421.239 432.913 421.817 cv
432.434 422.393 431.637 423.218 430.494 424.292 cv
430.148 424.624 429.723 425.061 429.217 425.6 cv
428.739 426.141 428.34 426.605 428.074 426.99 cv
428.074 427.088 li
431.61 427.088 li
432.035 427.088 432.354 427.056 432.567 426.993 cv
432.78 426.932 432.939 426.82 433.072 426.666 cv
433.205 426.51 433.312 426.276 433.391 425.963 cv
434.534 425.963 li
434.295 429.526 li
425.177 429.526 li
425.177 428.868 li
425.682 427.696 426.718 426.184 428.314 424.332 cv
429.031 423.491 429.563 422.799 429.935 422.255 cv
430.307 421.711 430.6 421.196 430.786 420.711 cv
430.972 420.228 431.078 419.727 431.078 419.209 cv
431.078 418.48 430.892 417.907 430.573 417.493 cv
430.254 417.079 429.802 416.872 429.244 416.872 cv
428.154 416.872 427.463 417.652 427.17 419.209 cv
425.363 419.209 li
425.363 416.862 li
426.453 416.424 427.33 416.135 427.995 415.997 cv
428.659 415.856 429.35 415.787 430.095 415.787 cv
cp
ef
424.033 410.426 mo
436.156 410.426 li
436.156 409.153 li
424.033 409.153 li
cp
ef
439.958 402.258 mo
445.487 402.258 li
445.487 402.916 li
445.142 402.956 444.876 403.051 444.716 403.203 cv
444.557 403.357 444.477 403.571 444.477 403.85 cv
444.477 404.07 444.477 404.282 444.53 404.492 cv
444.557 404.701 444.637 405.033 444.77 405.492 cv
446.737 412.633 li
449.209 405.521 li
449.316 405.243 449.395 404.98 449.449 404.736 cv
449.502 404.489 449.528 404.232 449.528 403.959 cv
449.528 403.635 449.449 403.386 449.263 403.213 cv
449.103 403.041 448.837 402.943 448.492 402.916 cv
448.492 402.258 li
452.798 402.258 li
452.798 402.916 li
452.533 402.956 452.32 403.036 452.134 403.158 cv
451.974 403.282 451.815 403.457 451.655 403.685 cv
451.522 403.914 451.363 404.288 451.177 404.805 cv
446.976 415.907 li
444.69 415.907 li
441.393 404.765 li
441.26 404.269 441.128 403.914 441.021 403.707 cv
440.915 403.497 440.809 403.327 440.649 403.197 cv
440.489 403.07 440.25 402.975 439.958 402.916 cv
cp
ef
462.103 413.371 mo
461.704 413.371 461.412 413.562 461.199 413.941 cv
460.96 414.32 460.827 414.87 460.8 415.586 cv
463.22 415.586 li
463.22 414.84 463.113 414.283 462.927 413.92 cv
462.768 413.554 462.475 413.371 462.103 413.371 cv
cp
462.209 412.612 mo
462.661 412.612 463.034 412.662 463.379 412.766 cv
463.698 412.867 463.991 413.01 464.23 413.193 cv
464.469 413.376 464.682 413.596 464.841 413.854 cv
465.001 414.161 465.16 414.514 465.24 414.912 cv
465.347 415.313 465.4 415.798 465.4 416.374 cv
460.747 416.374 li
460.774 417.254 460.933 417.904 461.226 418.321 cv
461.545 418.737 462.023 418.944 462.635 418.944 cv
463.007 418.944 463.353 418.875 463.645 418.737 cv
463.938 418.599 464.257 418.353 464.629 418.002 cv
465.214 418.647 li
464.708 419.172 464.23 419.544 463.725 419.764 cv
463.246 419.984 462.688 420.093 462.05 420.093 cv
460.907 420.093 460.056 419.782 459.471 419.162 cv
458.913 418.541 458.621 417.618 458.621 416.395 cv
458.621 415.607 458.78 414.925 459.072 414.355 cv
459.365 413.782 459.764 413.349 460.322 413.052 cv
460.854 412.758 461.492 412.612 462.209 412.612 cv
cp
456.706 412.612 mo
456.999 412.612 457.318 412.644 457.637 412.708 cv
457.637 414.724 li
456.334 414.724 li
456.228 414.44 456.121 414.225 455.989 414.074 cv
455.856 413.922 455.696 413.846 455.457 413.846 cv
455.351 413.846 455.244 413.88 455.111 413.944 cv
454.978 414.01 454.845 414.103 454.739 414.222 cv
454.633 414.342 454.553 414.464 454.5 414.588 cv
454.473 414.713 454.447 414.838 454.42 414.965 cv
454.393 415.09 454.393 415.281 454.393 415.533 cv
454.393 417.864 li
454.393 418.326 454.42 418.65 454.447 418.835 cv
454.473 419.021 454.553 419.167 454.659 419.27 cv
454.766 419.377 454.925 419.448 455.164 419.493 cv
455.164 419.976 li
451.575 419.976 li
451.575 419.493 li
451.788 419.43 451.974 419.347 452.054 419.244 cv
452.134 419.143 452.214 419.005 452.24 418.827 cv
452.267 418.652 452.293 418.334 452.293 417.872 cv
452.293 414.87 li
452.293 414.509 452.267 414.241 452.267 414.068 cv
452.24 413.896 452.214 413.758 452.187 413.652 cv
452.134 413.548 452.054 413.464 451.974 413.397 cv
451.868 413.331 451.708 413.275 451.469 413.225 cv
451.469 412.729 li
453.463 412.67 li
454.393 412.67 li
454.287 413.774 li
454.393 413.795 li
454.739 413.376 455.111 413.074 455.483 412.888 cv
455.856 412.705 456.281 412.612 456.706 412.612 cv
cp
471.036 409.484 mo
471.461 409.484 471.833 409.519 472.152 409.588 cv
472.152 411.079 li
471.142 411.079 li
471.062 410.811 470.983 410.612 470.876 410.484 cv
470.77 410.36 470.637 410.296 470.477 410.296 cv
470.265 410.296 470.105 410.365 469.999 410.503 cv
469.893 410.644 469.813 410.84 469.786 411.095 cv
469.733 411.352 469.706 411.71 469.706 412.174 cv
469.706 412.729 li
471.115 412.729 li
471.115 413.641 li
469.706 413.641 li
469.706 418.143 li
469.706 418.506 469.733 418.766 469.76 418.915 cv
469.813 419.066 469.866 419.186 469.972 419.273 cv
470.079 419.361 470.265 419.435 470.504 419.493 cv
470.504 419.976 li
466.862 419.976 li
466.862 419.493 li
467.101 419.424 467.261 419.35 467.34 419.268 cv
467.42 419.183 467.5 419.069 467.526 418.92 cv
467.58 418.772 467.606 418.512 467.606 418.143 cv
467.606 413.641 li
466.702 413.641 li
466.702 413.137 li
466.968 413.097 467.128 413.052 467.234 412.994 cv
467.34 412.938 467.42 412.851 467.473 412.729 cv
467.553 412.607 467.606 412.413 467.606 412.15 cv
467.686 411.275 468.032 410.612 468.59 410.161 cv
469.175 409.71 469.972 409.484 471.036 409.484 cv
cp
ef
428.26 307.112 mo
429.536 307.112 li
429.51 307.748 429.483 308.624 429.483 309.764 cv
429.483 318.075 li
429.483 318.46 429.51 318.749 429.536 318.945 cv
429.59 319.142 429.669 319.301 429.776 319.423 cv
429.882 319.545 430.042 319.643 430.254 319.712 cv
430.467 319.781 430.706 319.834 431.025 319.871 cv
431.344 319.908 431.743 319.932 432.275 319.946 cv
432.275 320.85 li
423.661 320.85 li
423.661 319.946 li
424.406 319.911 424.937 319.869 425.23 319.81 cv
425.549 319.755 425.788 319.67 425.974 319.558 cv
426.134 319.444 426.24 319.285 426.32 319.081 cv
426.399 318.874 426.453 318.54 426.453 318.075 cv
426.453 310.878 li
426.453 310.613 426.399 310.427 426.293 310.295 cv
426.187 310.189 426.054 310.109 425.868 310.109 cv
425.708 310.109 425.469 310.189 425.15 310.348 cv
424.857 310.507 424.352 310.799 423.661 311.276 cv
423.05 310.215 li
cp
ef
427.356 339.335 mo
423.927 344.457 li
423.927 344.627 li
427.356 344.627 li
427.356 342.348 li
427.356 341.393 427.383 340.388 427.436 339.335 cv
cp
428.048 336.17 mo
430.307 336.17 li
430.307 344.627 li
430.6 344.627 li
430.945 344.627 431.158 344.606 431.291 344.561 cv
431.424 344.518 431.557 344.436 431.637 344.317 cv
431.743 344.197 431.823 343.985 431.903 343.68 cv
432.966 343.68 li
432.833 345.879 li
430.307 345.879 li
430.307 347.362 li
430.307 347.858 430.334 348.208 430.387 348.412 cv
430.44 348.614 430.547 348.765 430.653 348.863 cv
430.786 348.964 431.025 349.062 431.371 349.163 cv
431.371 349.818 li
426.293 349.818 li
426.293 349.163 li
426.639 349.07 426.878 348.964 427.011 348.85 cv
427.144 348.733 427.224 348.58 427.277 348.386 cv
427.33 348.195 427.356 347.853 427.356 347.362 cv
427.356 345.879 li
422.013 345.879 li
422.013 344.805 li
cp
ef
421.428 330.718 mo
433.551 330.718 li
433.551 329.445 li
421.428 329.445 li
cp
ef
437.379 322.551 mo
442.882 322.551 li
442.882 323.208 li
442.537 323.248 442.271 323.344 442.111 323.498 cv
441.952 323.649 441.872 323.866 441.872 324.142 cv
441.872 324.362 441.872 324.577 441.925 324.784 cv
441.952 324.994 442.058 325.328 442.164 325.784 cv
444.158 332.928 li
446.604 325.816 li
446.71 325.535 446.79 325.275 446.843 325.028 cv
446.896 324.784 446.923 324.524 446.923 324.254 cv
446.923 323.927 446.843 323.681 446.684 323.506 cv
446.498 323.333 446.232 323.235 445.886 323.208 cv
445.886 322.551 li
450.193 322.551 li
450.193 323.208 li
449.927 323.248 449.715 323.331 449.555 323.453 cv
449.369 323.575 449.209 323.75 449.076 323.98 cv
448.917 324.209 448.757 324.58 448.571 325.097 cv
444.397 336.202 li
442.085 336.202 li
438.788 325.057 li
438.655 324.561 438.522 324.209 438.416 323.999 cv
438.336 323.789 438.203 323.622 438.044 323.492 cv
437.884 323.362 437.645 323.27 437.379 323.208 cv
cp
ef
459.498 333.666 mo
459.126 333.666 458.807 333.854 458.594 334.236 cv
458.381 334.615 458.248 335.162 458.195 335.878 cv
460.641 335.878 li
460.614 335.133 460.508 334.578 460.349 334.212 cv
460.162 333.849 459.87 333.666 459.498 333.666 cv
cp
459.604 332.904 mo
460.056 332.904 460.428 332.957 460.774 333.058 cv
461.119 333.162 461.385 333.302 461.625 333.485 cv
461.864 333.668 462.077 333.889 462.236 334.146 cv
462.422 334.454 462.555 334.806 462.661 335.207 cv
462.741 335.605 462.794 336.093 462.794 336.669 cv
458.169 336.669 li
458.169 337.549 458.328 338.199 458.621 338.613 cv
458.94 339.03 459.418 339.239 460.056 339.239 cv
460.428 339.239 460.747 339.17 461.04 339.03 cv
461.359 338.892 461.678 338.648 462.023 338.297 cv
462.608 338.939 li
462.103 339.465 461.625 339.839 461.119 340.056 cv
460.641 340.276 460.083 340.385 459.445 340.385 cv
458.301 340.385 457.451 340.075 456.892 339.454 cv
456.308 338.833 456.015 337.913 456.015 336.69 cv
456.015 335.899 456.175 335.22 456.467 334.647 cv
456.76 334.074 457.185 333.642 457.717 333.347 cv
458.248 333.053 458.886 332.904 459.604 332.904 cv
cp
454.101 332.904 mo
454.42 332.904 454.712 332.936 455.058 333 cv
455.058 335.016 li
453.729 335.016 li
453.649 334.735 453.543 334.517 453.41 334.366 cv
453.277 334.215 453.091 334.141 452.852 334.141 cv
452.745 334.141 452.639 334.172 452.506 334.239 cv
452.373 334.305 452.267 334.398 452.134 334.517 cv
452.027 334.637 451.948 334.756 451.921 334.881 cv
451.868 335.005 451.841 335.13 451.815 335.257 cv
451.815 335.385 451.788 335.573 451.788 335.828 cv
451.788 338.157 li
451.788 338.621 451.815 338.945 451.841 339.13 cv
451.895 339.313 451.948 339.459 452.054 339.563 cv
452.16 339.669 452.32 339.743 452.586 339.786 cv
452.586 340.268 li
448.97 340.268 li
448.97 339.786 li
449.209 339.725 449.369 339.64 449.449 339.539 cv
449.555 339.435 449.608 339.298 449.635 339.122 cv
449.661 338.947 449.688 338.629 449.688 338.165 cv
449.688 335.162 li
449.688 334.801 449.688 334.536 449.661 334.363 cv
449.661 334.191 449.635 334.05 449.582 333.947 cv
449.528 333.841 449.449 333.756 449.369 333.69 cv
449.263 333.626 449.103 333.568 448.864 333.52 cv
448.864 333.021 li
450.884 332.963 li
451.788 332.963 li
451.708 334.066 li
451.788 334.087 li
452.16 333.671 452.506 333.369 452.878 333.183 cv
453.277 332.997 453.676 332.904 454.101 332.904 cv
cp
468.43 329.779 mo
468.856 329.779 469.228 329.811 469.547 329.88 cv
469.547 331.371 li
468.563 331.371 li
468.484 331.103 468.377 330.907 468.271 330.779 cv
468.191 330.652 468.058 330.588 467.899 330.588 cv
467.686 330.588 467.526 330.657 467.394 330.798 cv
467.287 330.936 467.207 331.132 467.181 331.39 cv
467.128 331.644 467.101 332.005 467.101 332.467 cv
467.101 333.021 li
468.537 333.021 li
468.537 333.936 li
467.101 333.936 li
467.101 338.435 li
467.101 338.801 467.128 339.059 467.181 339.21 cv
467.207 339.361 467.287 339.481 467.367 339.568 cv
467.473 339.656 467.659 339.727 467.899 339.786 cv
467.899 340.268 li
464.257 340.268 li
464.257 339.786 li
464.496 339.719 464.655 339.642 464.735 339.56 cv
464.841 339.478 464.895 339.361 464.948 339.213 cv
464.974 339.064 465.001 338.807 465.001 338.435 cv
465.001 333.936 li
464.097 333.936 li
464.097 333.432 li
464.363 333.392 464.549 333.345 464.629 333.289 cv
464.735 333.233 464.815 333.143 464.895 333.021 cv
464.948 332.899 465.001 332.708 465.027 332.445 cv
465.107 331.567 465.426 330.904 465.985 330.453 cv
466.569 330.005 467.367 329.779 468.43 329.779 cv
cp
ef
613.771 293.211 mo
615.047 293.211 li
615.02 293.848 614.994 294.723 614.994 295.864 cv
614.994 304.167 li
614.994 304.565 615.02 304.857 615.047 305.042 cv
615.1 305.228 615.18 305.387 615.286 305.52 cv
615.392 305.652 615.552 305.732 615.765 305.812 cv
615.951 305.865 616.217 305.918 616.536 305.971 cv
616.855 305.997 617.253 306.024 617.759 306.05 cv
617.759 306.952 li
609.172 306.952 li
609.172 306.05 li
609.916 305.997 610.421 305.971 610.74 305.918 cv
611.059 305.838 611.298 305.759 611.458 305.652 cv
611.644 305.546 611.75 305.387 611.83 305.175 cv
611.91 304.963 611.936 304.644 611.936 304.167 cv
611.936 296.978 li
611.936 296.713 611.91 296.5 611.803 296.394 cv
611.697 296.262 611.538 296.209 611.378 296.209 cv
611.192 296.209 610.979 296.288 610.66 296.447 cv
610.368 296.58 609.863 296.898 609.172 297.376 cv
608.56 296.315 li
cp
ef
613.053 329.416 mo
612.362 329.416 611.857 329.647 611.511 330.108 cv
611.165 330.57 610.979 331.233 610.979 332.103 cv
610.979 333.05 611.165 333.764 611.511 334.241 cv
611.857 334.719 612.362 334.958 613.053 334.958 cv
613.744 334.958 614.249 334.721 614.595 334.252 cv
614.94 333.78 615.1 333.122 615.1 332.273 cv
615.1 331.384 614.914 330.687 614.542 330.177 cv
614.17 329.671 613.664 329.416 613.053 329.416 cv
cp
613.106 323.288 mo
612.442 323.288 611.936 323.487 611.617 323.885 cv
611.272 324.283 611.112 324.872 611.112 325.646 cv
611.112 326.516 611.272 327.18 611.617 327.641 cv
611.963 328.103 612.468 328.334 613.106 328.334 cv
613.771 328.334 614.249 328.116 614.568 327.681 cv
614.887 327.246 615.047 326.628 615.047 325.827 cv
615.047 325.004 614.887 324.376 614.542 323.941 cv
614.223 323.506 613.718 323.288 613.106 323.288 cv
cp
613.133 322.174 mo
614.754 322.174 615.977 322.471 616.801 323.06 cv
617.626 323.651 618.051 324.487 618.051 325.567 cv
618.051 326.283 617.865 326.909 617.466 327.448 cv
617.094 327.983 616.536 328.416 615.765 328.74 cv
615.791 328.87 li
616.562 329.169 617.147 329.599 617.546 330.164 cv
617.945 330.726 618.131 331.4 618.131 332.183 cv
618.131 332.965 617.918 333.65 617.519 334.236 cv
617.094 334.825 616.482 335.279 615.711 335.6 cv
614.914 335.921 613.983 336.082 612.947 336.082 cv
611.936 336.082 611.059 335.934 610.315 335.639 cv
609.57 335.345 608.985 334.913 608.56 334.347 cv
608.161 333.78 607.949 333.111 607.949 332.342 cv
607.949 331.591 608.135 330.941 608.534 330.392 cv
608.906 329.84 609.517 329.387 610.341 329.029 cv
610.315 328.899 li
608.853 328.262 608.108 327.206 608.108 325.726 cv
608.108 325.049 608.321 324.442 608.746 323.901 cv
609.172 323.36 609.756 322.938 610.554 322.633 cv
611.325 322.328 612.176 322.174 613.133 322.174 cv
cp
ef
606.938 316.813 mo
619.061 316.813 li
619.061 315.539 li
606.938 315.539 li
cp
ef
622.863 308.65 mo
628.393 308.65 li
628.393 309.313 li
628.047 309.34 627.781 309.446 627.622 309.579 cv
627.462 309.738 627.382 309.95 627.382 310.242 cv
627.382 310.454 627.382 310.666 627.435 310.878 cv
627.462 311.091 627.542 311.409 627.675 311.886 cv
629.642 319.022 li
632.114 311.913 li
632.221 311.621 632.301 311.356 632.354 311.117 cv
632.407 310.878 632.433 310.613 632.433 310.348 cv
632.433 310.03 632.354 309.764 632.194 309.605 cv
632.008 309.419 631.742 309.34 631.397 309.313 cv
631.397 308.65 li
635.703 308.65 li
635.703 309.313 li
635.438 309.34 635.225 309.419 635.065 309.552 cv
634.879 309.658 634.72 309.844 634.587 310.083 cv
634.427 310.295 634.268 310.666 634.082 311.197 cv
629.881 322.293 li
627.595 322.293 li
624.298 311.144 li
624.166 310.666 624.033 310.295 623.926 310.083 cv
623.82 309.897 623.714 309.711 623.554 309.579 cv
623.395 309.446 623.155 309.366 622.863 309.313 cv
cp
ef
645.008 319.76 mo
644.609 319.76 644.317 319.948 644.104 320.328 cv
643.865 320.71 643.732 321.256 643.706 321.972 cv
646.151 321.972 li
646.125 321.227 646.018 320.672 645.859 320.306 cv
645.673 319.94 645.38 319.76 645.008 319.76 cv
cp
645.115 318.999 mo
645.566 318.999 645.939 319.052 646.284 319.152 cv
646.603 319.256 646.896 319.396 647.135 319.579 cv
647.374 319.763 647.587 319.983 647.746 320.24 cv
647.933 320.548 648.065 320.901 648.145 321.301 cv
648.252 321.699 648.305 322.187 648.305 322.763 cv
643.652 322.763 li
643.679 323.644 643.838 324.291 644.131 324.707 cv
644.45 325.124 644.928 325.333 645.566 325.333 cv
645.912 325.333 646.258 325.264 646.55 325.124 cv
646.843 324.986 647.188 324.742 647.534 324.392 cv
648.119 325.034 li
647.614 325.559 647.135 325.933 646.63 326.15 cv
646.151 326.371 645.593 326.479 644.955 326.479 cv
643.812 326.479 642.961 326.169 642.376 325.548 cv
641.818 324.927 641.526 324.007 641.526 322.784 cv
641.526 321.994 641.685 321.314 641.978 320.741 cv
642.27 320.168 642.695 319.736 643.227 319.442 cv
643.759 319.147 644.397 318.999 645.115 318.999 cv
cp
639.611 318.999 mo
639.904 318.999 640.223 319.03 640.568 319.094 cv
640.568 321.11 li
639.239 321.11 li
639.159 320.829 639.027 320.611 638.894 320.46 cv
638.761 320.309 638.601 320.235 638.362 320.235 cv
638.256 320.235 638.149 320.267 638.016 320.333 cv
637.883 320.399 637.75 320.489 637.644 320.609 cv
637.538 320.728 637.458 320.85 637.431 320.975 cv
637.378 321.1 637.352 321.224 637.325 321.352 cv
637.325 321.479 637.299 321.667 637.299 321.922 cv
637.299 324.251 li
637.299 324.715 637.325 325.039 637.352 325.225 cv
637.378 325.408 637.458 325.554 637.564 325.657 cv
637.671 325.763 637.83 325.837 638.07 325.88 cv
638.07 326.363 li
634.481 326.363 li
634.481 325.88 li
634.693 325.819 634.879 325.734 634.959 325.633 cv
635.039 325.53 635.119 325.392 635.145 325.217 cv
635.172 325.042 635.198 324.721 635.198 324.259 cv
635.198 321.256 li
635.198 320.895 635.172 320.63 635.172 320.458 cv
635.172 320.283 635.119 320.145 635.092 320.041 cv
635.039 319.935 634.959 319.85 634.879 319.784 cv
634.773 319.72 634.613 319.662 634.374 319.614 cv
634.374 319.115 li
636.395 319.057 li
637.299 319.057 li
637.192 320.16 li
637.299 320.182 li
637.644 319.763 638.016 319.463 638.388 319.277 cv
638.761 319.091 639.186 318.999 639.611 318.999 cv
cp
653.941 315.874 mo
654.366 315.874 654.738 315.905 655.057 315.974 cv
655.057 317.465 li
654.047 317.465 li
653.967 317.197 653.888 317.001 653.781 316.874 cv
653.675 316.746 653.542 316.683 653.383 316.683 cv
653.196 316.683 653.01 316.752 652.904 316.892 cv
652.798 317.03 652.718 317.227 652.691 317.484 cv
652.638 317.738 652.612 318.099 652.612 318.561 cv
652.612 319.115 li
654.021 319.115 li
654.021 320.03 li
652.612 320.03 li
652.612 324.53 li
652.612 324.896 652.638 325.153 652.665 325.304 cv
652.718 325.455 652.798 325.575 652.877 325.662 cv
652.984 325.75 653.17 325.821 653.409 325.88 cv
653.409 326.363 li
649.767 326.363 li
649.767 325.88 li
650.006 325.814 650.166 325.737 650.245 325.654 cv
650.352 325.572 650.405 325.455 650.432 325.307 cv
650.485 325.158 650.511 324.898 650.511 324.53 cv
650.511 320.03 li
649.607 320.03 li
649.607 319.526 li
649.873 319.487 650.059 319.439 650.139 319.383 cv
650.245 319.327 650.325 319.237 650.405 319.115 cv
650.458 318.993 650.511 318.802 650.511 318.54 cv
650.591 317.662 650.937 316.998 651.495 316.547 cv
652.08 316.096 652.877 315.874 653.941 315.874 cv
cp
ef
.2645 1 1 .00109865 cmyk
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
534.042 244.267 mo
(S)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
534.042 244.267 mo
(S) false chp
.28526 lw
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
547.128 244.267 mo
(A)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
547.128 244.267 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 1952 21 <00020079000004f80555002f003c009bb0852b5840351c1b003131000331
914000003b072409060706a6442126071413a644143b033b9114032a1f1f
1b26251b01187e37373e2531017f0d2fe1322f11392fe111391133123911
33003fed2b2b00182f33332b11003333111239182f1aed2b111200393931
301b401a1c1b0031916c00003b073100916c240906212607143b916c1403
00183f2b2f33331133332b1112392f2b39393031590111141e0217152135
3e023511342e0227352132161514060715161617171e0217152126262727
2e0323031133323e0235342626232201aa0b16262efe5a3e2a0d0a17262e
01efeae897973d57355a27383a30feeb2644215828332b31316e71576c5c
374184705a0251feac484121150d31311027484a0361453f23150d31aab3
89c03608195d62a4484c280831357a3fa74c481d0b02a8fdae19467d5b5f
7e42>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g21 21 def
end
AARSSS+CambriaMath /Encoding get
dup 82 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 /.notdef /g21 
/g22 32{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
563.398 244.267 mo
(R)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
563.398 244.267 mo
(R) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
579.669 244.267 mo
( )sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
579.669 244.267 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 1186 15 <00010079000004100555001e0071b0852b58402700091009020c03090917
000b0ca6440b00030091400b19161716a64417030a09a4080820007f102f
e112392fe132003f2b110033182f1aed2b2b11120039182f5f5e5d31301b
401300091009020c030909170b00916c0b1916170300183f11332f2b1139
2f5f5e5d3031592521323e0437330321353e023511342e02273521150e03
1501a901062b3a29211e1b146514fc7d3e2a0d0a17262e01a52c25180c5c
0a15253c5b5bfe6e311027484a0361453f23150d31310c1320424800>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g15 15 def
end
AARSSS+CambriaMath /Encoding get
dup 76 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
584.447 244.267 mo
(L)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
584.447 244.267 mo
(L) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 4072 145 <00020069fff003d603cd000d001c0065b0852b58401f0011031195400016
071a031a95071016100b014d16830a200c014d0a0a1e0eb8fff0b50b014d
0e8303b8ffe0b30c014d032f2be12b12392f2be12b003fed2b00183f1aed
2b31301b400c0011956c0016071a956c071000183f2b3f2b303159052226
353436363332161514060601141633323e02353426262322060214d0db73
c880d6dc6ecafe88837a435e3b1a417048798110f5f0a5e46ff9e9a6e471
01facedd416e914f93c25bd2>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g145 145 def
end
AARSSS+CambriaMath /Encoding get
dup 111 /g145 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 27{/.notdef}rp /g145 4{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
598.78 244.267 mo
(o)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
598.78 244.267 mo
(o) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 3252 137 <0003003ffe4103e203cd0032004100530167b0852b58405742215227270a
082f0836030895c036010f361f362f36030936362f0f5201524000100115
0f10010f101f102f10ef10ff1005230310102f48010032000300ee40320f
194803489540191c2f3f033f952f10270a0c224c24b8ffc0402910014d24
241e2142424c45201013014c451e1e5402092831042a3b8405100f014d05
0515330000554cb8ffe0400b0f13014c4c15155533842a2fe112392fcd2b
12392f1112392f2be112173911392fcd2b1139113311392f2b1239cd3232
003fed2b00183f1aed2b00183f1aed2b110033111239182f5f5e5d715e5d
1acd5d12392f5e5d71ed2b11120039391112393931301b40494221522727
0a2f3608956cc036010f361f362f36030936362f0f52015240001001150f
10010f101f102f10ef10ff1005230310102f48013200ee6c320f1948956c
191c2f3f956c2f1000183f2b3f2b3f2b321112392f5f5e5d715e5d1acd5d
12392f5e5d712b1139391112393930315901270716161514062322270615
14161633333216161514060623222e023534363726263534363726263534
3e023332172101141633323e023534262623220613060615141633323636
35342e0223232203e2b9091f24c9b9533c4c1d4344f06a86396ccc8865a7
7741544d2f364051484b39658a5048470162fd4a666033482d153256385f
641933338f935a81440e27483a95510357070b1f6b3ea3b1153a38252610
426f4a5e935218395d463f6727134a32395f3d2a905c567f532911fed07d
88274459315876377efced2655365a55305a3c1c352a1900>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g137 137 def
end
AARSSS+CambriaMath /Encoding get
dup 103 /g137 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 19{/.notdef}rp /g137 7{/.notdef}rp /g145 4{/.notdef}rp 
/g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
612.874 244.267 mo
(g)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
612.874 244.267 mo
(g) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 3846 139 <00020053000001e9054400030019008cb0852b58402a17041904a7441915
11aa10100fa744100f02637003010f03df03020f035f03df030303018302
1385020ab8ffe0b30f014d0ab8ffc0b310014d0a2f2b2bc4e110e1002f5d
715ded3f2b001810e53f2b11003331301b401e1704191511aa100f030263
6c7003010f03df03020f035f03df030309030300182f5f5e5d715d2b3fe5
3f113330315901152335033e033511342e02273537331114161617152101
7fb8662721170d0418312de93d102d33fe780544c2c2faed0c1220424601
b4404e2f17083509fd355643230d3100>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g139 139 def
end
AARSSS+CambriaMath /Encoding get
dup 105 /g139 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 19{/.notdef}rp /g137 /.notdef /g139 5{/.notdef}rp 
/g145 4{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
625.906 244.267 mo
(i)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
625.906 244.267 mo
(i) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AARSSS+CambriaMath gcheck setglobal} if
2 2650 133 <00010069fff0035203cd002100c6b0852b5840442001300102b00101011f
8013472000121012201203091f12010f120119031240262948120f180f03
0f974018161f06030695401f1010100a1220131323020101230a831b2fe1
11392fcd12392f1a19cd1239182f003f1aed2b00183f1aed2b001810d62b
5f5e5d725e5d1a19ed1a1810cd5d7131301b40312001300102b00101011f
801213476c00121012201203091f12010f12011903124026294812180f97
6c18161f06956c1f1000183f2b3f2bc62b5f5e5d725e5d2b1a10cd5d7130
31590115232e022322060615141e0233323637170e032322263534363633
3216034a7f11324231466c3f183a604745774039334e595733bdc870ca84
528b03a5d1414b1e5ab885558d6438364442383d2913fbed94e57c13>AARSSS+CambriaMath AddT42Char 
AARSSS+CambriaMath /CharStrings get begin
/g133 133 def
end
AARSSS+CambriaMath /Encoding get
dup 99 /g133 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AARSSS+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 15{/.notdef}rp /g133 3{/.notdef}rp /g137 /.notdef 
/g139 5{/.notdef}rp /g145 4{/.notdef}rp /g150 139{/.notdef}rp]
AARSSS+CambriaMath nf
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
632.914 244.267 mo
(c)sh
AARSSS+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
632.914 244.267 mo
(c) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
810.075 243.816 mo
(S)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
810.075 243.816 mo
(S) false chp
.28457 lw
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
823.447 243.816 mo
(S)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
823.447 243.816 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
836.58 243.816 mo
( )sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
836.58 243.816 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
841.32 243.816 mo
(L)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
841.32 243.816 mo
(L) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
855.645 243.816 mo
(o)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
855.645 243.816 mo
(o) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
869.705 243.816 mo
(g)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
869.705 243.816 mo
(g) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
882.786 243.816 mo
(i)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
882.786 243.816 mo
(i) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
889.776 243.816 mo
(c)sh
AARSSS+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
889.776 243.816 mo
(c) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 18 579.418 ]ct
@
grestore newpath
672.55 321.418 mo
685.71 321.362 li
685.683 318.078 li
672.524 318.134 li
cp
695.573 321.32 mo
708.733 321.264 li
708.706 317.98 li
695.546 318.036 li
cp
718.596 321.222 mo
731.755 321.166 li
731.755 317.884 li
718.596 317.94 li
cp
741.618 321.126 mo
754.778 321.07 li
754.778 317.786 li
741.618 317.842 li
cp
764.667 321.028 mo
777.827 320.972 li
777.8 317.691 li
764.641 317.746 li
cp
787.69 320.93 mo
800.85 320.877 li
800.823 317.593 li
787.664 317.648 li
cp
810.713 320.834 mo
823.872 320.779 li
823.872 317.494 li
810.713 317.55 li
cp
833.735 320.736 mo
846.895 320.68 li
846.895 317.399 li
833.735 317.455 li
cp
856.785 320.641 mo
869.944 320.585 li
869.918 317.301 li
856.758 317.356 li
cp
879.807 320.542 mo
892.967 320.487 li
892.94 317.205 li
879.781 317.261 li
cp
902.83 320.444 mo
915.99 320.389 li
915.99 317.107 li
902.83 317.163 li
cp
925.853 320.349 mo
939.012 320.293 li
939.012 317.009 li
925.853 317.065 li
cp
948.902 320.251 mo
962.061 320.195 li
962.035 316.913 li
948.875 316.969 li
cp
971.924 320.155 mo
985.084 320.099 li
985.058 316.815 li
971.898 316.871 li
cp
994.947 320.057 mo
1008.11 320.001 li
1008.11 316.72 li
994.947 316.773 li
cp
1017.97 319.959 mo
1027.89 319.919 li
1027.89 316.635 li
1017.97 316.677 li
cp
.997223 .918425 .647791 .507591 cmyk
f
677.601 331.766 mo
677.601 340.735 li
673.215 340.735 li
673.215 331.766 li
cp
668.828 333.955 mo
675.395 320.824 li
681.988 333.955 li
cp
681.988 338.547 mo
675.421 351.678 li
668.828 338.547 li
cp
f
676.671 357.135 mo
677.947 357.135 li
677.894 357.771 677.867 358.655 677.867 359.782 cv
677.867 368.099 li
677.867 368.483 677.894 368.772 677.947 368.969 cv
677.974 369.162 678.053 369.322 678.16 369.446 cv
678.293 369.568 678.426 369.664 678.638 369.733 cv
678.851 369.804 679.117 369.857 679.409 369.892 cv
679.728 369.929 680.154 369.956 680.659 369.969 cv
680.659 370.873 li
672.045 370.873 li
672.045 369.969 li
672.79 369.934 673.321 369.889 673.64 369.834 cv
673.959 369.778 674.199 369.693 674.358 369.579 cv
674.518 369.467 674.651 369.308 674.73 369.101 cv
674.81 368.897 674.837 368.563 674.837 368.099 cv
674.837 360.904 li
674.837 360.634 674.783 360.437 674.677 360.318 cv
674.571 360.199 674.438 360.14 674.252 360.14 cv
674.092 360.14 673.853 360.215 673.561 360.368 cv
673.242 360.52 672.763 360.833 672.072 361.302 cv
671.46 360.249 li
cp
ef
671.088 386.103 mo
672.072 386.103 672.869 386.233 673.481 386.496 cv
674.119 386.758 674.544 387.114 674.837 387.559 cv
675.102 388.008 675.235 388.53 675.235 389.127 cv
675.235 389.652 675.156 390.138 674.943 390.589 cv
674.757 391.04 674.411 391.554 673.933 392.133 cv
673.454 392.708 672.63 393.533 671.487 394.608 cv
671.141 394.939 670.716 395.377 670.237 395.915 cv
669.759 396.457 669.36 396.921 669.068 397.306 cv
669.068 397.404 li
672.603 397.404 li
673.055 397.404 673.374 397.372 673.587 397.308 cv
673.8 397.247 673.959 397.136 674.092 396.982 cv
674.199 396.825 674.305 396.592 674.385 396.279 cv
675.528 396.279 li
675.315 399.842 li
666.17 399.842 li
666.17 399.184 li
666.675 398.011 667.738 396.499 669.307 394.647 cv
670.025 393.807 670.583 393.114 670.955 392.57 cv
671.327 392.027 671.62 391.512 671.806 391.026 cv
671.992 390.544 672.072 390.042 672.072 389.525 cv
672.072 388.795 671.912 388.222 671.593 387.809 cv
671.248 387.395 670.822 387.188 670.237 387.188 cv
669.174 387.188 668.483 387.968 668.164 389.525 cv
666.383 389.525 li
666.383 387.177 li
667.446 386.74 668.323 386.45 668.988 386.313 cv
669.653 386.172 670.37 386.103 671.088 386.103 cv
cp
ef
681.509 386.092 mo
679.01 389.854 li
679.01 389.979 li
681.509 389.979 li
681.509 388.307 li
681.509 387.604 681.536 386.867 681.589 386.092 cv
cp
682.015 383.768 mo
683.663 383.768 li
683.663 389.979 li
683.902 389.979 li
684.141 389.979 684.301 389.963 684.407 389.931 cv
684.514 389.899 684.593 389.841 684.646 389.753 cv
684.726 389.666 684.806 389.509 684.859 389.286 cv
685.63 389.286 li
685.55 390.899 li
683.663 390.899 li
683.663 391.989 li
683.663 392.353 683.689 392.61 683.743 392.759 cv
683.796 392.907 683.849 393.019 683.955 393.09 cv
684.035 393.165 684.195 393.236 684.46 393.31 cv
684.46 393.793 li
680.712 393.793 li
680.712 393.31 li
680.978 393.242 681.164 393.165 681.244 393.08 cv
681.35 392.995 681.403 392.881 681.456 392.74 cv
681.483 392.6 681.509 392.348 681.509 391.989 cv
681.509 390.899 li
677.575 390.899 li
677.575 390.111 li
cp
ef
665.027 379.468 mo
676.033 379.468 li
687.039 379.468 li
687.039 380.742 li
676.033 380.742 li
665.027 380.742 li
cp
ef
690.867 372.574 mo
696.37 372.574 li
696.37 373.232 li
696.025 373.271 695.786 373.367 695.6 373.518 cv
695.44 373.672 695.36 373.887 695.36 374.165 cv
695.36 374.386 695.387 374.598 695.413 374.807 cv
695.467 375.017 695.546 375.349 695.679 375.808 cv
697.647 382.949 li
700.119 375.837 li
700.199 375.558 700.279 375.296 700.332 375.051 cv
700.411 374.805 700.438 374.547 700.438 374.274 cv
700.438 373.951 700.332 373.701 700.172 373.529 cv
700.013 373.356 699.747 373.258 699.401 373.232 cv
699.401 372.574 li
703.681 372.574 li
703.681 373.232 li
703.442 373.271 703.229 373.351 703.043 373.473 cv
702.857 373.598 702.698 373.773 702.565 374.001 cv
702.432 374.229 702.246 374.603 702.06 375.12 cv
697.886 386.222 li
695.573 386.222 li
692.303 375.081 li
692.143 374.585 692.011 374.229 691.931 374.022 cv
691.824 373.813 691.692 373.643 691.532 373.513 cv
691.372 373.386 691.16 373.29 690.867 373.232 cv
cp
ef
712.986 383.686 mo
712.614 383.686 712.322 383.877 712.082 384.257 cv
711.87 384.636 711.737 385.185 711.683 385.901 cv
714.129 385.901 li
714.103 385.156 714.023 384.599 713.837 384.235 cv
713.651 383.869 713.385 383.686 712.986 383.686 cv
cp
713.092 382.928 mo
713.544 382.928 713.943 382.978 714.262 383.081 cv
714.608 383.182 714.9 383.325 715.14 383.509 cv
715.379 383.692 715.565 383.912 715.724 384.169 cv
715.91 384.477 716.043 384.83 716.15 385.228 cv
716.23 385.628 716.283 386.114 716.309 386.689 cv
711.657 386.689 li
711.657 387.57 711.816 388.22 712.135 388.636 cv
712.428 389.053 712.906 389.26 713.544 389.26 cv
713.917 389.26 714.262 389.191 714.555 389.053 cv
714.847 388.915 715.166 388.668 715.512 388.318 cv
716.097 388.963 li
715.618 389.488 715.113 389.859 714.634 390.079 cv
714.129 390.3 713.571 390.408 712.933 390.408 cv
711.816 390.408 710.939 390.098 710.381 389.477 cv
709.796 388.857 709.53 387.933 709.53 386.71 cv
709.53 385.923 709.663 385.241 709.955 384.67 cv
710.248 384.097 710.673 383.665 711.205 383.368 cv
711.763 383.073 712.375 382.928 713.092 382.928 cv
cp
707.616 382.928 mo
707.908 382.928 708.227 382.959 708.546 383.023 cv
708.546 385.039 li
707.217 385.039 li
707.137 384.755 707.031 384.54 706.898 384.389 cv
706.765 384.238 706.579 384.161 706.366 384.161 cv
706.26 384.161 706.127 384.196 705.994 384.259 cv
705.861 384.326 705.755 384.418 705.649 384.538 cv
705.542 384.657 705.463 384.779 705.409 384.904 cv
705.356 385.029 705.33 385.153 705.33 385.281 cv
705.303 385.405 705.303 385.596 705.303 385.848 cv
705.303 388.18 li
705.303 388.642 705.303 388.965 705.356 389.151 cv
705.383 389.337 705.463 389.483 705.542 389.586 cv
705.649 389.692 705.835 389.766 706.074 389.809 cv
706.074 390.292 li
702.458 390.292 li
702.458 389.809 li
702.698 389.745 702.857 389.663 702.937 389.559 cv
703.043 389.459 703.097 389.321 703.123 389.143 cv
703.176 388.968 703.176 388.65 703.176 388.188 cv
703.176 385.185 li
703.176 384.824 703.176 384.556 703.15 384.384 cv
703.15 384.211 703.123 384.074 703.07 383.967 cv
703.017 383.864 702.964 383.779 702.857 383.713 cv
702.777 383.646 702.591 383.591 702.379 383.54 cv
702.379 383.044 li
704.373 382.986 li
705.303 382.986 li
705.197 384.089 li
705.276 384.111 li
705.649 383.692 706.021 383.389 706.393 383.203 cv
706.765 383.02 707.164 382.928 707.616 382.928 cv
cp
721.919 379.8 mo
722.344 379.8 722.716 379.834 723.035 379.903 cv
723.035 381.394 li
722.052 381.394 li
721.972 381.126 721.866 380.927 721.786 380.8 cv
721.679 380.675 721.547 380.612 721.387 380.612 cv
721.174 380.612 721.015 380.681 720.909 380.819 cv
720.802 380.959 720.722 381.156 720.669 381.41 cv
720.643 381.668 720.616 382.026 720.616 382.49 cv
720.616 383.044 li
722.025 383.044 li
722.025 383.957 li
720.616 383.957 li
720.616 388.459 li
720.616 388.822 720.616 389.082 720.669 389.231 cv
720.696 389.382 720.776 389.501 720.882 389.589 cv
720.988 389.676 721.148 389.75 721.414 389.809 cv
721.414 390.292 li
717.771 390.292 li
717.771 389.809 li
717.984 389.74 718.144 389.666 718.25 389.583 cv
718.33 389.498 718.383 389.384 718.436 389.236 cv
718.463 389.087 718.489 388.827 718.489 388.459 cv
718.489 383.957 li
717.612 383.957 li
717.612 383.453 li
717.851 383.413 718.037 383.368 718.144 383.31 cv
718.25 383.254 718.33 383.166 718.383 383.044 cv
718.436 382.922 718.489 382.729 718.516 382.466 cv
718.596 381.591 718.915 380.927 719.499 380.476 cv
720.058 380.025 720.882 379.8 721.919 379.8 cv
cp
ef
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/AARSSS+CambriaMath*1 uf
/AARSSS+CambriaMath uf
/KAAAAA+CambriaMath uf
/AARSSR+Calibri-Bold*1 uf
/AARSSR+Calibri-Bold uf
/IAAAAA+Calibri-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
