%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SARWAVE.pdf
%%Creator: Adobe Acrobat 22.1.0
%%For: lwzz0
%%CreationDate: 2022/5/16, 19:31:21
%%BoundingBox: 0 0 885 457
%%HiResBoundingBox: 0 0 884.2386 456.9955
%%CropBox: 0 0 884.2386 456.9955
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1181 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.425dc87, 2021/10/27-16:20:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® Visio® LTSC"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Visio® LTSC"
   xmp:CreateDate="2022-05-16T19:30:35+08:00"
   xmp:ModifyDate="2022-05-16T19:31:09+08:00"
   xmp:MetadataDate="2022-05-16T19:31:09+08:00"
   xmpMM:DocumentID="uuid:72012493-6F4D-4B97-849C-4197BC3F93DB"
   xmpMM:InstanceID="uuid:c64baa39-5e0e-4b0c-be48-154aead8e890">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>李 王臻</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -456.995 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-5 0 mo
3.05176e-5 456.995 li
884.239 456.995 li
884.239 0 li
cp
clp
gsave
-.0783691 457.277 mo
884.922 457.277 li
884.922 -.723083 li
-.0783691 -.723083 li
cp
clp
gsave
-495.078 544.277 mo
1218.64 544.277 li
1218.64 -297.523 li
-495.078 -297.523 li
cp
eclp
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
-495.078 544.367 mo
1218.75 544.367 li
1218.75 -297.523 li
-495.078 -297.523 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
534.155 417.313 mo
789.963 417.313 li
789.963 121.658 li
534.155 121.658 li
cp
false sop
/1 
[/DeviceCMYK] /CSA add_res
.000915541 .180697 .122988 0 cmyk
ef
534.155 417.313 mo
789.963 417.313 li
789.963 121.658 li
534.155 121.658 li
cp
.697291 .362615 .972839 .00378424 cmyk
.55 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
358.295 417.672 mo
534.395 417.672 li
534.395 122.017 li
358.294 122.017 li
cp
.126345 .00903334 .181552 0 cmyk
ef
358.295 417.672 mo
534.395 417.672 li
534.395 122.017 li
358.294 122.017 li
cp
.697291 .362615 .972839 .00378424 cmyk
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
461.85 280.2 mo
460.79 280.2 460.26 280.999 460.26 282.576 cv
460.26 284.034 460.72 284.752 461.64 284.752 cv
461.83 284.752 462 284.742 462.16 284.702 cv
462.32 284.672 462.47 284.613 462.61 284.543 cv
462.76 284.473 462.89 284.383 463.01 284.283 cv
463.13 284.173 463.221 284.093 463.261 284.034 cv
463.301 283.964 463.331 283.874 463.361 283.744 cv
463.381 283.624 463.401 283.454 463.401 283.235 cv
463.401 282.257 463.271 281.508 463 280.989 cv
462.74 280.46 462.36 280.2 461.85 280.2 cv
cp
461.93 279.361 mo
463.12 279.361 464.041 279.731 464.671 280.45 cv
465.301 281.178 465.611 282.237 465.611 283.614 cv
465.611 285.481 465.141 286.949 464.211 288.017 cv
463.271 289.095 461.93 289.694 460.169 289.824 cv
459.779 289.384 li
459.779 288.845 li
460.33 288.835 460.8 288.745 461.19 288.586 cv
461.58 288.426 461.91 288.206 462.2 287.907 cv
462.49 287.617 462.73 287.248 462.91 286.799 cv
463.1 286.34 463.241 285.761 463.321 285.052 cv
463.251 285.022 li
462.86 285.291 462.48 285.481 462.11 285.601 cv
461.74 285.721 461.29 285.781 460.77 285.781 cv
459.909 285.781 459.239 285.511 458.759 284.982 cv
458.279 284.453 458.039 283.714 458.039 282.766 cv
458.039 282.097 458.189 281.508 458.499 280.989 cv
458.819 280.46 459.269 280.06 459.849 279.781 cv
460.44 279.501 461.13 279.361 461.93 279.361 cv
cp
.997223 .918425 .647791 .507591 cmyk
ef
466.802 306.365 mo
466.562 306.365 466.332 306.395 466.112 306.475 cv
465.901 306.545 465.711 306.645 465.541 306.765 cv
465.381 306.884 465.271 306.984 465.211 307.064 cv
465.151 307.144 465.111 307.254 465.091 307.394 cv
465.061 307.543 465.051 307.793 465.051 308.162 cv
465.051 309.071 465.181 309.76 465.431 310.219 cv
465.691 310.678 466.082 310.908 466.602 310.908 cv
467.142 310.908 467.542 310.718 467.802 310.329 cv
468.072 309.939 468.202 309.34 468.202 308.532 cv
468.202 307.823 468.082 307.284 467.842 306.914 cv
467.602 306.545 467.262 306.365 466.802 306.365 cv
cp
468.752 301.284 mo
469.163 301.803 li
469.163 302.272 li
468.062 302.292 467.182 302.632 466.502 303.281 cv
465.821 303.93 465.361 304.868 465.141 306.076 cv
465.211 306.106 li
465.601 305.836 466.001 305.647 466.392 305.517 cv
466.792 305.397 467.222 305.327 467.692 305.327 cv
468.262 305.327 468.762 305.457 469.173 305.706 cv
469.583 305.956 469.893 306.315 470.103 306.775 cv
470.313 307.234 470.423 307.773 470.423 308.382 cv
470.423 309.041 470.283 309.63 470.003 310.129 cv
469.723 310.638 469.293 311.037 468.702 311.317 cv
468.122 311.606 467.412 311.746 466.562 311.746 cv
465.791 311.746 465.121 311.596 464.561 311.287 cv
464.011 310.977 463.581 310.518 463.291 309.909 cv
462.99 309.31 462.84 308.572 462.84 307.713 cv
462.84 306.545 463.09 305.487 463.581 304.548 cv
464.071 303.6 464.771 302.841 465.681 302.272 cv
466.582 301.693 467.612 301.364 468.752 301.284 cv
cp
457.879 301.284 mo
458.839 301.284 li
458.809 301.763 458.789 302.432 458.789 303.281 cv
458.789 309.54 li
458.789 309.829 458.809 310.049 458.839 310.189 cv
458.869 310.339 458.929 310.458 459.009 310.548 cv
459.099 310.648 459.219 310.718 459.369 310.768 cv
459.529 310.818 459.719 310.858 459.959 310.888 cv
460.189 310.918 460.5 310.938 460.89 310.948 cv
460.89 311.626 li
454.408 311.626 li
454.408 310.948 li
454.968 310.918 455.358 310.888 455.598 310.848 cv
455.838 310.798 456.018 310.738 456.148 310.658 cv
456.268 310.568 456.358 310.448 456.418 310.299 cv
456.478 310.139 456.508 309.889 456.508 309.54 cv
456.508 304.129 li
456.508 303.92 456.468 303.77 456.388 303.68 cv
456.308 303.59 456.208 303.55 456.068 303.55 cv
455.948 303.55 455.768 303.61 455.538 303.72 cv
455.308 303.84 454.938 304.069 454.418 304.429 cv
453.957 303.63 li
cp
ef
452.727 296.412 mo
461.97 296.412 li
471.213 296.412 li
471.213 297.371 li
461.97 297.371 li
452.727 297.371 li
cp
ef
473.974 291.101 mo
478.116 291.101 li
478.116 291.601 li
477.856 291.631 477.665 291.7 477.545 291.82 cv
477.415 291.93 477.355 292.09 477.355 292.299 cv
477.355 292.469 477.365 292.629 477.395 292.789 cv
477.425 292.938 477.495 293.198 477.585 293.537 cv
479.076 298.918 li
480.927 293.557 li
480.997 293.348 481.057 293.158 481.097 292.968 cv
481.147 292.789 481.167 292.589 481.167 292.389 cv
481.167 292.14 481.097 291.95 480.977 291.82 cv
480.847 291.69 480.647 291.621 480.386 291.601 cv
480.386 291.101 li
483.618 291.101 li
483.618 291.601 li
483.427 291.631 483.267 291.69 483.137 291.78 cv
482.997 291.87 482.877 292.01 482.777 292.18 cv
482.667 292.349 482.537 292.629 482.397 293.018 cv
479.256 301.374 li
477.515 301.374 li
475.045 292.988 li
474.935 292.619 474.845 292.349 474.764 292.19 cv
474.694 292.04 474.594 291.91 474.474 291.81 cv
474.354 291.71 474.184 291.641 473.974 291.601 cv
cp
ef
486.759 298.958 mo
486.989 298.958 487.219 298.978 487.459 299.028 cv
487.459 300.525 li
486.469 300.525 li
486.409 300.316 486.328 300.156 486.228 300.046 cv
486.128 299.936 485.998 299.876 485.828 299.876 cv
485.748 299.876 485.658 299.896 485.568 299.946 cv
485.468 299.996 485.378 300.066 485.298 300.156 cv
485.218 300.246 485.158 300.336 485.128 300.426 cv
485.088 300.515 485.068 300.615 485.058 300.705 cv
485.048 300.805 485.038 300.945 485.038 301.134 cv
485.038 302.871 li
485.038 303.211 485.048 303.45 485.078 303.59 cv
485.108 303.73 485.158 303.84 485.228 303.92 cv
485.308 303.989 485.438 304.049 485.618 304.079 cv
485.618 304.439 li
482.927 304.439 li
482.927 304.079 li
483.107 304.029 483.227 303.969 483.297 303.9 cv
483.357 303.82 483.408 303.72 483.427 303.59 cv
483.457 303.45 483.467 303.221 483.467 302.871 cv
483.467 300.635 li
483.467 300.366 483.457 300.166 483.447 300.046 cv
483.438 299.916 483.417 299.807 483.387 299.727 cv
483.347 299.657 483.297 299.587 483.227 299.537 cv
483.157 299.497 483.037 299.447 482.857 299.417 cv
482.857 299.048 li
484.358 298.998 li
485.038 298.998 li
484.968 299.817 li
485.038 299.837 li
485.298 299.527 485.568 299.297 485.848 299.168 cv
486.128 299.028 486.439 298.958 486.759 298.958 cv
cp
ef
490.82 299.527 mo
490.54 299.527 490.32 299.667 490.16 299.946 cv
489.99 300.226 489.89 300.635 489.86 301.174 cv
491.67 301.174 li
491.66 300.615 491.59 300.206 491.46 299.926 cv
491.32 299.657 491.11 299.527 490.82 299.527 cv
cp
490.91 298.958 mo
491.24 298.958 491.53 298.998 491.78 299.068 cv
492.03 299.148 492.241 299.258 492.421 299.387 cv
492.601 299.527 492.741 299.687 492.861 299.876 cv
493.001 300.106 493.101 300.376 493.171 300.665 cv
493.251 300.965 493.281 301.334 493.291 301.753 cv
489.83 301.753 li
489.84 302.412 489.95 302.901 490.18 303.211 cv
490.41 303.52 490.77 303.67 491.24 303.67 cv
491.51 303.67 491.76 303.62 491.98 303.52 cv
492.211 303.41 492.451 303.231 492.701 302.971 cv
493.141 303.45 li
492.771 303.84 492.411 304.119 492.04 304.279 cv
491.68 304.449 491.26 304.529 490.79 304.529 cv
489.94 304.529 489.31 304.299 488.879 303.83 cv
488.449 303.37 488.239 302.682 488.239 301.773 cv
488.239 301.184 488.349 300.675 488.569 300.256 cv
488.789 299.827 489.099 299.507 489.5 299.287 cv
489.91 299.068 490.38 298.958 490.91 298.958 cv
cp
497.422 296.632 mo
497.742 296.632 498.012 296.652 498.263 296.702 cv
498.263 297.81 li
497.522 297.81 li
497.452 297.61 497.392 297.471 497.312 297.371 cv
497.242 297.281 497.142 297.231 497.022 297.231 cv
496.862 297.231 496.742 297.281 496.662 297.391 cv
496.582 297.491 496.522 297.64 496.492 297.83 cv
496.462 298.02 496.442 298.289 496.442 298.629 cv
496.442 299.048 li
497.492 299.048 li
497.492 299.727 li
496.442 299.727 li
496.442 303.071 li
496.442 303.351 496.462 303.54 496.492 303.65 cv
496.512 303.76 496.572 303.85 496.642 303.92 cv
496.722 303.979 496.852 304.039 497.042 304.079 cv
497.042 304.439 li
494.321 304.439 li
494.321 304.079 li
494.491 304.029 494.611 303.969 494.681 303.91 cv
494.751 303.85 494.791 303.76 494.821 303.65 cv
494.851 303.54 494.871 303.351 494.871 303.071 cv
494.871 299.727 li
494.201 299.727 li
494.201 299.347 li
494.391 299.317 494.531 299.287 494.601 299.238 cv
494.681 299.198 494.741 299.138 494.791 299.048 cv
494.831 298.948 494.871 298.808 494.881 298.609 cv
494.941 297.96 495.182 297.471 495.612 297.131 cv
496.042 296.792 496.642 296.632 497.422 296.632 cv
cp
ef
91.2449 421.604 mo
91.2458 185.931 li
88.77 185.931 li
88.769 421.604 li
cp
93.7217 187.169 mo
90.0074 179.762 li
86.2941 187.169 li
cp
f
90.0074 419.551 mo
846.582 419.551 li
846.582 422.022 li
90.0074 422.022 li
cp
845.332 417.08 mo
852.764 420.786 li
845.332 424.493 li
cp
f
91.9661 264.547 mo
196.869 250.571 li
196.439 247.306 li
91.53 261.282 li
cp
0 .961578 .907591 0 cmyk
f
206.162 319.293 mo
274.906 320.002 li
274.866 323.296 li
206.132 322.588 li
cp
f
275.016 321.28 mo
276.166 323.137 li
276.156 323.117 li
277.317 324.954 li
277.297 324.934 li
278.457 326.701 li
278.437 326.661 li
279.598 328.348 li
279.557 328.298 li
280.728 329.851 li
280.678 329.783 li
281.858 331.199 li
281.798 331.133 li
282.398 331.777 li
282.358 331.734 li
282.959 332.333 li
282.899 332.274 li
283.509 332.821 li
283.439 332.759 li
284.039 333.246 li
283.949 333.179 li
284.569 333.606 li
284.499 333.559 li
285.109 333.941 li
284.999 333.877 li
285.62 334.199 li
285.53 334.157 li
286.16 334.434 li
286.01 334.377 li
287.27 334.796 li
287.1 334.749 li
288.371 335.025 li
288.22 335 li
289.501 335.157 li
289.391 335.147 li
290.681 335.215 li
290.611 335.212 li
291.902 335.227 li
291.852 335.228 li
293.152 335.205 li
293.212 338.499 li
291.892 338.522 li
290.541 338.506 li
289.161 338.435 li
287.74 338.261 li
286.31 337.948 li
284.889 337.476 li
284.149 337.147 li
283.419 336.772 li
282.719 336.334 li
282.018 335.851 li
281.328 335.3 li
280.658 334.693 li
280.008 334.043 li
279.357 333.345 li
278.117 331.863 li
276.897 330.245 li
275.706 328.518 li
274.526 326.721 li
273.365 324.864 li
272.215 323.007 li
cp
f
293.182 335.222 mo
358.565 335.243 li
358.555 338.537 li
293.172 338.516 li
cp
f
786.011 253.885 mo
538.276 406.041 li
540.007 408.846 li
787.742 256.69 li
cp
0 .302953 .905394 0 cmyk
f
196.869 248.404 mo
197.909 257.988 li
198.44 262.72 li
198.95 267.402 li
199.46 272.004 li
199.97 276.496 li
200.46 280.879 li
200.96 285.112 li
201.441 289.195 li
201.671 291.171 li
201.901 293.088 li
202.131 294.965 li
202.361 296.792 li
202.361 296.782 li
202.581 298.549 li
202.801 300.266 li
202.801 300.256 li
203.021 301.913 li
203.011 301.903 li
203.231 303.49 li
203.441 305.018 li
203.641 306.475 li
203.641 306.465 li
203.852 307.853 li
204.042 309.161 li
204.042 309.151 li
204.232 310.388 li
204.422 311.547 li
204.422 311.537 li
204.602 312.625 li
204.592 312.605 li
204.772 313.603 li
204.952 314.531 li
204.942 314.511 li
205.112 315.37 li
205.112 315.36 li
205.272 316.139 li
205.272 316.119 li
205.432 316.837 li
205.432 316.827 li
205.592 317.486 li
205.582 317.456 li
205.732 318.055 li
205.722 317.995 li
205.872 318.535 li
205.872 318.525 li
206.012 319.004 li
206.002 318.944 li
206.142 319.363 li
206.122 319.313 li
206.262 319.683 li
206.232 319.603 li
206.372 319.922 li
206.342 319.852 li
206.472 320.122 li
206.412 320.002 li
206.662 320.421 li
206.422 320.112 li
206.672 320.371 li
206.192 320.032 li
206.442 320.142 li
205.752 320.002 li
205.982 320.002 li
205.312 320.142 li
205.542 320.042 li
205.182 320.262 li
205.412 320.072 li
205.232 320.252 li
205.442 320.012 li
205.352 320.122 li
205.792 319.533 li
208.433 321.52 li
207.943 322.168 li
207.593 322.558 li
207.093 322.957 li
206.342 323.296 li
205.402 323.296 li
204.552 322.907 li
203.942 322.308 li
203.551 321.659 li
203.371 321.29 li
203.191 320.891 li
203.021 320.451 li
202.861 319.972 li
202.711 319.463 li
202.541 318.884 li
202.381 318.255 li
202.221 317.576 li
202.051 316.827 li
201.881 316.019 li
201.701 315.14 li
201.531 314.192 li
201.341 313.174 li
201.161 312.076 li
200.971 310.908 li
200.78 309.65 li
200.58 308.322 li
200.38 306.934 li
200.17 305.467 li
199.96 303.94 li
199.74 302.342 li
199.53 300.685 li
199.31 298.968 li
199.08 297.191 li
198.86 295.364 li
198.62 293.477 li
198.39 291.551 li
198.16 289.574 li
197.679 285.491 li
197.179 281.248 li
196.689 276.866 li
196.179 272.363 li
195.669 267.761 li
195.159 263.079 li
194.628 258.337 li
193.588 248.764 li
cp
0 .961578 .907591 0 cmyk
f
187.466 255.732 mo
89.2112 304.568 li
90.6837 307.513 li
188.936 258.677 li
cp
0 .302953 .905394 0 cmyk
f
205.552 405.782 mo
540.967 406.358 li
540.967 409.652 li
205.542 409.076 li
cp
f
189.427 257.788 mo
191.427 280.589 li
192.428 291.87 li
193.448 302.991 li
194.488 313.922 li
194.488 313.912 li
195.539 324.604 li
195.539 324.594 li
196.629 334.988 li
196.629 334.978 li
197.749 345.033 li
197.749 345.021 li
198.89 354.688 li
198.89 354.677 li
199.48 359.341 li
199.48 359.331 li
200.08 363.883 li
200.07 363.872 li
200.69 368.305 li
200.69 368.295 li
201.311 372.592 li
201.311 372.582 li
201.941 376.753 li
201.941 376.738 li
202.581 380.766 li
202.581 380.75 li
203.241 384.63 li
203.241 384.612 li
203.912 388.34 li
203.912 388.324 li
204.592 391.888 li
204.592 391.867 li
205.282 395.267 li
205.282 395.24 li
206.002 398.474 li
205.992 398.45 li
206.723 401.505 li
206.712 401.47 li
207.463 404.337 li
207.453 404.302 li
208.223 406.983 li
205.042 407.885 li
204.272 405.188 li
203.511 402.285 li
202.781 399.201 li
202.051 395.94 li
201.351 392.517 li
200.67 388.934 li
199.99 385.19 li
199.32 381.294 li
198.68 377.251 li
198.05 373.068 li
197.419 368.762 li
196.799 364.318 li
196.199 359.755 li
195.619 355.08 li
194.468 345.403 li
193.348 335.337 li
192.258 324.934 li
191.197 314.232 li
190.167 303.291 li
189.146 292.16 li
188.136 280.869 li
186.145 258.068 li
cp
f
188.916 211.238 mo
146.122 211.238 li
146.122 214.532 li
188.916 214.532 li
cp
.61709 .780514 0 0 cmyk
f
189.427 212.066 mo
200.64 406.334 li
197.349 406.523 li
186.135 212.256 li
cp
f
197.269 405.662 mo
411.403 405.756 li
411.403 409.05 li
197.259 408.956 li
cp
f
413.183 409.02 mo
423.957 215.131 li
420.656 214.952 li
409.892 408.837 li
cp
f
515.739 405.782 mo
618.074 405.991 li
618.064 409.286 li
515.729 409.076 li
cp
f
618.214 408.578 mo
630.928 212.266 li
627.637 212.056 li
614.923 408.365 li
cp
f
627.857 211.238 mo
791.833 212.236 li
791.813 215.531 li
627.837 214.532 li
cp
f
279.147 176.587 mo
279.147 181.529 li
280.388 181.529 li
280.388 176.587 li
cp
279.147 185.232 mo
279.147 190.174 li
280.388 190.174 li
280.388 185.232 li
cp
279.147 193.877 mo
279.147 198.819 li
280.388 198.819 li
280.388 193.877 li
cp
279.147 202.523 mo
279.147 207.464 li
280.378 207.464 li
280.388 202.523 li
cp
279.147 211.178 mo
279.137 216.12 li
280.378 216.12 li
280.378 211.178 li
cp
279.137 219.823 mo
279.137 224.765 li
280.378 224.765 li
280.378 219.823 li
cp
279.137 228.468 mo
279.137 233.41 li
280.378 233.41 li
280.378 228.468 li
cp
279.137 237.114 mo
279.137 242.055 li
280.378 242.055 li
280.378 237.114 li
cp
279.137 245.769 mo
279.137 250.71 li
280.368 250.71 li
280.368 245.769 li
cp
279.127 254.414 mo
279.127 259.356 li
280.368 259.356 li
280.368 254.414 li
cp
279.127 263.059 mo
279.127 268.001 li
280.368 268.001 li
280.368 263.059 li
cp
279.127 271.705 mo
279.127 276.646 li
280.368 276.646 li
280.368 271.705 li
cp
279.127 280.36 mo
279.127 285.301 li
280.358 285.301 li
280.368 280.36 li
cp
279.127 289.005 mo
279.117 293.947 li
280.358 293.947 li
280.358 289.005 li
cp
279.117 297.65 mo
279.117 302.592 li
280.358 302.592 li
280.358 297.65 li
cp
279.117 306.296 mo
279.117 311.237 li
280.358 311.237 li
280.358 306.296 li
cp
279.117 314.951 mo
279.117 319.892 li
280.358 319.892 li
280.358 314.951 li
cp
279.117 323.596 mo
279.117 325.573 li
280.348 325.573 li
280.348 323.596 li
cp
.899962 .828183 .680751 .520256 cmyk
f
37.1696 318.155 mo
42.5181 318.155 li
42.5181 318.794 li
42.183 318.824 41.9339 318.924 41.7729 319.074 cv
41.6118 319.213 41.5318 319.423 41.5318 319.693 cv
41.5318 319.912 41.5508 320.112 41.5898 320.322 cv
41.6278 320.521 41.7089 320.841 41.8309 321.29 cv
43.7466 328.218 li
46.1354 321.32 li
46.2314 321.05 46.3074 320.791 46.3625 320.551 cv
46.4175 320.322 46.4445 320.062 46.4445 319.802 cv
46.4445 319.483 46.3625 319.243 46.1974 319.084 cv
46.0333 318.914 45.7803 318.814 45.4381 318.794 cv
45.4381 318.155 li
49.6066 318.155 li
49.6066 318.794 li
49.3615 318.824 49.1544 318.904 48.9834 319.024 cv
48.8123 319.144 48.6572 319.313 48.5192 319.533 cv
48.3801 319.762 48.2171 320.122 48.03 320.621 cv
43.9786 331.395 li
41.7439 331.395 li
38.5527 320.581 li
38.4108 320.102 38.2915 319.762 38.1947 319.553 cv
38.0981 319.353 37.9724 319.193 37.8176 319.064 cv
37.6629 318.944 37.4469 318.844 37.1696 318.794 cv
cp
.997223 .918425 .647791 .507591 cmyk
ef
48.6943 325.822 mo
55.4956 325.822 li
55.4956 328.048 li
54.5323 328.048 li
54.3772 327.609 54.2462 327.31 54.1381 327.15 cv
54.0301 326.99 53.902 326.87 53.752 326.78 cv
53.6019 326.681 53.3459 326.641 52.9847 326.641 cv
51.6273 326.641 li
51.6273 330.213 li
52.5276 330.213 li
52.7476 330.213 52.9177 330.179 53.0377 330.111 cv
53.1568 330.043 53.2558 329.929 53.3328 329.77 cv
53.4109 329.612 53.4749 329.387 53.5269 329.097 cv
54.3212 329.097 li
54.3212 332.157 li
53.5269 332.157 li
53.4699 331.862 53.4019 331.634 53.3228 331.472 cv
53.2428 331.311 53.1448 331.198 53.0267 331.132 cv
52.9097 331.067 52.7436 331.034 52.5276 331.034 cv
51.6273 331.034 li
51.6273 333.638 li
51.6273 334.003 51.6463 334.257 51.6833 334.399 cv
51.7213 334.542 51.7953 334.657 51.9054 334.744 cv
52.0154 334.83 52.2065 334.895 52.4786 334.937 cv
52.4786 335.4 li
48.6943 335.4 li
48.6943 334.937 li
48.9433 334.876 49.1124 334.802 49.2044 334.716 cv
49.2955 334.629 49.3595 334.516 49.3945 334.379 cv
49.4295 334.241 49.4465 333.991 49.4465 333.631 cv
49.4465 327.589 li
49.4465 327.23 49.4315 326.98 49.4015 326.85 cv
49.3705 326.711 49.3085 326.601 49.2144 326.511 cv
49.1214 326.431 48.9473 326.351 48.6943 326.281 cv
cp
60.4723 325.702 mo
60.8894 325.702 61.2886 325.732 61.6677 325.772 cv
62.0478 325.822 62.482 325.892 62.9692 326.012 cv
62.9692 328.048 li
62.0058 328.048 li
61.8788 327.519 61.6917 327.13 61.4426 326.89 cv
61.1945 326.651 60.8354 326.531 60.3673 326.531 cv
59.9451 326.531 59.606 326.641 59.3509 326.86 cv
59.0948 327.08 58.9668 327.379 58.9668 327.759 cv
58.9668 328.028 59.0198 328.258 59.1258 328.458 cv
59.2309 328.66 59.4079 328.855 59.657 329.044 cv
59.9051 329.233 60.2662 329.45 60.7394 329.694 cv
61.3166 329.993 61.7697 330.286 62.1009 330.574 cv
62.431 330.862 62.6751 331.176 62.8321 331.514 cv
62.9892 331.854 63.0682 332.248 63.0682 332.697 cv
63.0682 333.273 62.9341 333.773 62.667 334.196 cv
62.4 334.619 62.0108 334.945 61.4996 335.172 cv
60.9885 335.399 60.3973 335.513 59.727 335.513 cv
59.2489 335.513 58.7507 335.486 58.2325 335.432 cv
57.7144 335.378 57.2272 335.299 56.773 335.196 cv
56.773 333.035 li
57.7364 333.035 li
57.8534 333.591 58.0495 334.006 58.3236 334.281 cv
58.5977 334.554 58.9998 334.691 59.53 334.691 cv
59.9941 334.691 60.3563 334.571 60.6163 334.333 cv
60.8764 334.094 61.0075 333.756 61.0075 333.315 cv
61.0075 332.885 60.8814 332.526 60.6304 332.238 cv
60.3803 331.95 59.9451 331.651 59.3259 331.343 cv
58.8097 331.09 58.3796 330.83 58.0355 330.56 cv
57.6903 330.292 57.4183 329.979 57.2192 329.623 cv
57.0201 329.267 56.9201 328.86 56.9201 328.398 cv
56.9201 327.829 57.0631 327.34 57.3492 326.93 cv
57.6353 326.531 58.0495 326.231 58.5907 326.022 cv
59.1328 325.812 59.7601 325.702 60.4723 325.702 cv
cp
ef
70.6848 203.85 mo
70.2847 203.85 69.9976 203.86 69.8235 203.87 cv
69.8235 214.732 li
69.9395 214.752 70.2336 214.762 70.7038 214.762 cv
71.6971 214.762 72.4694 214.562 73.0206 214.163 cv
73.5718 213.764 73.9909 213.155 74.277 212.336 cv
74.5641 211.517 74.7082 210.489 74.7082 209.251 cv
74.7082 207.484 74.3631 206.147 73.6728 205.228 cv
72.9836 204.31 71.9872 203.85 70.6848 203.85 cv
cp
56.3999 203.85 mo
55.9997 203.85 55.7126 203.86 55.5386 203.87 cv
55.5386 214.732 li
55.6546 214.752 55.9487 214.762 56.4189 214.762 cv
57.4122 214.762 58.1845 214.562 58.7357 214.163 cv
59.2869 213.764 59.706 213.155 59.9921 212.336 cv
60.2792 211.517 60.4233 210.489 60.4233 209.251 cv
60.4233 207.484 60.0781 206.147 59.3879 205.228 cv
58.6987 204.31 57.7023 203.85 56.3999 203.85 cv
cp
65.7911 202.722 mo
70.8198 202.722 li
71.8962 202.722 72.7965 202.802 73.5178 202.972 cv
74.24 203.142 74.8822 203.401 75.4424 203.761 cv
76.0036 204.12 76.4568 204.549 76.8019 205.048 cv
77.147 205.548 77.4031 206.127 77.5702 206.785 cv
77.7382 207.444 77.8222 208.193 77.8222 209.022 cv
77.8222 210.379 77.6122 211.527 77.193 212.486 cv
76.8189 213.354 76.2797 214.043 75.5735 214.572 cv
74.8672 215.101 74.0239 215.461 73.0446 215.66 cv
72.2963 215.82 71.342 215.9 70.1816 215.9 cv
65.7911 215.9 li
65.7911 215.261 li
66.1392 215.171 66.3763 215.061 66.5014 214.952 cv
66.6274 214.832 66.7124 214.682 66.7584 214.492 cv
66.8035 214.303 66.8255 213.963 66.8255 213.474 cv
66.8255 205.158 li
66.8255 204.669 66.8045 204.33 66.7624 204.14 cv
66.7214 203.95 66.6354 203.791 66.5064 203.681 cv
66.3773 203.561 66.1392 203.451 65.7911 203.361 cv
cp
51.5062 202.722 mo
56.5349 202.722 li
57.6113 202.722 58.5116 202.802 59.2329 202.972 cv
59.9551 203.142 60.5973 203.401 61.1575 203.761 cv
61.7187 204.12 62.1719 204.549 62.517 205.048 cv
62.8621 205.548 63.1182 206.127 63.2852 206.785 cv
63.4533 207.444 63.5373 208.193 63.5373 209.022 cv
63.5373 210.379 63.3273 211.527 62.9081 212.486 cv
62.534 213.354 61.9948 214.043 61.2886 214.572 cv
60.5823 215.101 59.739 215.461 58.7597 215.66 cv
58.0114 215.82 57.0571 215.9 55.8967 215.9 cv
51.5062 215.9 li
51.5062 215.261 li
51.8543 215.171 52.0914 215.061 52.2164 214.952 cv
52.3425 214.832 52.4275 214.682 52.4735 214.492 cv
52.5186 214.303 52.5406 213.963 52.5406 213.474 cv
52.5406 205.158 li
52.5406 204.669 52.5196 204.33 52.4775 204.14 cv
52.4365 203.95 52.3505 203.791 52.2214 203.681 cv
52.0924 203.561 51.8543 203.451 51.5062 203.361 cv
cp
37.8878 202.722 mo
43.2364 202.722 li
43.2364 203.361 li
42.9012 203.401 42.6522 203.491 42.4911 203.641 cv
42.3301 203.791 42.25 204 42.25 204.27 cv
42.25 204.479 42.269 204.689 42.308 204.889 cv
42.3461 205.088 42.4271 205.418 42.5491 205.857 cv
44.4648 212.785 li
46.8536 205.887 li
46.9496 205.617 47.0257 205.358 47.0807 205.128 cv
47.1357 204.889 47.1627 204.639 47.1627 204.37 cv
47.1627 204.06 47.0807 203.811 46.9156 203.651 cv
46.7516 203.481 46.4985 203.381 46.1564 203.361 cv
46.1564 202.722 li
50.3248 202.722 li
50.3248 203.361 li
50.0797 203.401 49.8726 203.471 49.7016 203.591 cv
49.5305 203.711 49.3755 203.88 49.2374 204.11 cv
49.0984 204.33 48.9353 204.689 48.7483 205.188 cv
44.6969 215.96 li
42.4621 215.96 li
39.2709 205.158 li
39.1291 204.669 39.0097 204.33 38.9131 204.13 cv
38.8163 203.92 38.6906 203.761 38.5359 203.631 cv
38.3811 203.511 38.1651 203.421 37.8878 203.361 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
361.366 338.052 mo
366.317 338.033 li
366.307 336.797 li
361.356 336.817 li
cp
370.029 338.018 mo
374.98 337.999 li
374.97 336.763 li
370.019 336.783 li
cp
378.691 337.984 mo
383.643 337.965 li
383.643 336.73 li
378.691 336.749 li
cp
387.354 337.95 mo
392.306 337.931 li
392.306 336.696 li
387.354 336.716 li
cp
396.027 337.916 mo
400.979 337.897 li
400.969 336.662 li
396.017 336.682 li
cp
404.69 337.883 mo
409.642 337.863 li
409.632 336.628 li
404.68 336.647 li
cp
413.353 337.849 mo
418.305 337.829 li
418.305 336.594 li
413.353 336.613 li
cp
422.016 337.815 mo
426.968 337.795 li
426.968 336.56 li
422.016 336.579 li
cp
430.689 337.781 mo
435.641 337.761 li
435.631 336.526 li
430.679 336.545 li
cp
439.352 337.746 mo
444.304 337.727 li
444.294 336.491 li
439.342 336.511 li
cp
448.015 337.712 mo
452.967 337.693 li
452.967 336.457 li
448.015 336.477 li
cp
456.678 337.678 mo
461.63 337.659 li
461.63 336.423 li
456.678 336.443 li
cp
465.351 337.644 mo
470.303 337.625 li
470.293 336.389 li
465.341 336.409 li
cp
474.014 337.61 mo
478.966 337.591 li
478.956 336.355 li
474.004 336.375 li
cp
482.677 337.576 mo
487.629 337.556 li
487.629 336.321 li
482.677 336.34 li
cp
491.34 337.542 mo
496.292 337.522 li
496.292 336.287 li
491.34 336.306 li
cp
500.013 337.508 mo
504.965 337.488 li
504.955 336.253 li
500.003 336.272 li
cp
.997223 .918425 .647791 .507591 cmyk
f
91.63 258.158 mo
96.5817 258.138 li
96.5777 256.9 li
91.626 256.92 li
cp
100.296 258.128 mo
105.248 258.108 li
105.243 256.87 li
100.291 256.89 li
cp
108.961 258.088 mo
113.913 258.078 li
113.908 256.84 li
108.957 256.86 li
cp
117.627 258.058 mo
122.579 258.038 li
122.574 256.81 li
117.622 256.82 li
cp
126.292 258.028 mo
131.247 258.008 li
131.237 256.77 li
126.287 256.79 li
cp
134.958 257.998 mo
139.91 257.978 li
139.9 256.74 li
134.948 256.76 li
cp
143.621 257.958 mo
148.573 257.938 li
148.573 256.71 li
143.621 256.73 li
cp
152.284 257.928 mo
157.236 257.908 li
157.236 256.67 li
152.284 256.69 li
cp
160.957 257.898 mo
165.908 257.878 li
165.898 256.64 li
160.947 256.66 li
cp
169.62 257.858 mo
174.571 257.848 li
174.561 256.61 li
169.61 256.63 li
cp
178.283 257.828 mo
183.234 257.808 li
183.234 256.58 li
178.283 256.59 li
cp
186.946 257.798 mo
191.897 257.778 li
191.897 256.54 li
186.946 256.56 li
cp
195.619 257.768 mo
200.57 257.748 li
200.56 256.51 li
195.609 256.53 li
cp
204.282 257.728 mo
209.233 257.708 li
209.223 256.481 li
204.272 256.501 li
cp
212.945 257.698 mo
217.896 257.679 li
217.896 256.441 li
212.945 256.461 li
cp
221.608 257.669 mo
226.559 257.649 li
226.559 256.411 li
221.608 256.431 li
cp
230.281 257.629 mo
235.232 257.619 li
235.222 256.381 li
230.271 256.401 li
cp
238.944 257.599 mo
243.895 257.579 li
243.885 256.351 li
238.934 256.361 li
cp
247.607 257.569 mo
252.558 257.549 li
252.558 256.311 li
247.607 256.331 li
cp
256.27 257.539 mo
261.221 257.519 li
261.221 256.281 li
256.27 256.301 li
cp
264.942 257.499 mo
269.894 257.479 li
269.884 256.251 li
264.932 256.271 li
cp
273.605 257.469 mo
278.557 257.449 li
278.547 256.211 li
273.595 256.231 li
cp
282.268 257.439 mo
287.22 257.419 li
287.22 256.181 li
282.268 256.201 li
cp
290.931 257.399 mo
295.883 257.389 li
295.883 256.151 li
290.931 256.171 li
cp
299.604 257.369 mo
304.556 257.349 li
304.546 256.121 li
299.594 256.131 li
cp
308.267 257.339 mo
313.219 257.319 li
313.209 256.081 li
308.257 256.101 li
cp
316.93 257.309 mo
321.882 257.289 li
321.882 256.051 li
316.93 256.071 li
cp
325.593 257.269 mo
330.545 257.249 li
330.545 256.021 li
325.593 256.041 li
cp
334.266 257.239 mo
339.218 257.219 li
339.208 255.981 li
334.256 256.001 li
cp
342.929 257.209 mo
347.881 257.189 li
347.871 255.951 li
342.919 255.971 li
cp
351.592 257.169 mo
356.544 257.159 li
356.544 255.922 li
351.592 255.941 li
cp
360.255 257.139 mo
365.207 257.119 li
365.207 255.892 li
360.255 255.902 li
cp
368.918 257.109 mo
373.87 257.09 li
373.87 255.852 li
368.918 255.872 li
cp
377.591 257.08 mo
382.543 257.06 li
382.533 255.822 li
377.581 255.842 li
cp
386.254 257.04 mo
391.206 257.02 li
391.196 255.792 li
386.244 255.812 li
cp
394.917 257.01 mo
399.869 256.99 li
399.869 255.752 li
394.917 255.772 li
cp
403.58 256.98 mo
408.532 256.96 li
408.532 255.722 li
403.58 255.742 li
cp
412.253 256.94 mo
417.205 256.93 li
417.195 255.692 li
412.243 255.712 li
cp
420.916 256.91 mo
425.868 256.89 li
425.858 255.662 li
420.906 255.672 li
cp
429.579 256.88 mo
434.531 256.86 li
434.531 255.622 li
429.579 255.642 li
cp
438.242 256.85 mo
443.194 256.83 li
443.194 255.592 li
438.242 255.612 li
cp
446.915 256.81 mo
451.867 256.79 li
451.857 255.562 li
446.905 255.582 li
cp
455.578 256.78 mo
460.53 256.76 li
460.52 255.522 li
455.568 255.542 li
cp
464.241 256.75 mo
469.193 256.73 li
469.193 255.492 li
464.241 255.512 li
cp
472.904 256.71 mo
477.856 256.7 li
477.856 255.462 li
472.904 255.482 li
cp
481.577 256.68 mo
486.529 256.66 li
486.519 255.432 li
481.567 255.442 li
cp
490.24 256.65 mo
495.192 256.63 li
495.182 255.392 li
490.23 255.412 li
cp
498.903 256.62 mo
503.854 256.6 li
503.854 255.362 li
498.903 255.382 li
cp
507.566 256.58 mo
512.517 256.56 li
512.517 255.333 li
507.566 255.353 li
cp
516.239 256.55 mo
521.19 256.53 li
521.18 255.293 li
516.229 255.313 li
cp
524.902 256.521 mo
529.853 256.501 li
529.843 255.263 li
524.892 255.283 li
cp
533.565 256.481 mo
538.516 256.471 li
538.516 255.233 li
533.565 255.253 li
cp
542.228 256.451 mo
547.179 256.431 li
547.179 255.203 li
542.228 255.213 li
cp
550.901 256.421 mo
555.852 256.401 li
555.842 255.163 li
550.891 255.183 li
cp
559.564 256.391 mo
564.515 256.371 li
564.505 255.133 li
559.554 255.153 li
cp
568.227 256.351 mo
573.178 256.331 li
573.178 255.103 li
568.227 255.123 li
cp
576.89 256.321 mo
581.841 256.301 li
581.841 255.063 li
576.89 255.083 li
cp
585.563 256.291 mo
590.514 256.271 li
590.504 255.033 li
585.552 255.053 li
cp
594.225 256.251 mo
599.177 256.241 li
599.167 255.003 li
594.215 255.023 li
cp
602.888 256.221 mo
607.84 256.201 li
607.84 254.973 li
602.888 254.983 li
cp
611.551 256.191 mo
616.503 256.171 li
616.503 254.933 li
611.551 254.953 li
cp
620.214 256.161 mo
625.166 256.141 li
625.166 254.903 li
620.214 254.923 li
cp
628.887 256.121 mo
633.839 256.101 li
633.829 254.873 li
628.877 254.893 li
cp
637.55 256.091 mo
642.502 256.071 li
642.502 254.833 li
637.55 254.853 li
cp
646.213 256.061 mo
651.165 256.041 li
651.165 254.803 li
646.213 254.823 li
cp
654.876 256.021 mo
659.828 256.011 li
659.828 254.773 li
654.876 254.793 li
cp
663.549 255.991 mo
668.501 255.971 li
668.491 254.744 li
663.539 254.754 li
cp
672.212 255.961 mo
677.164 255.941 li
677.164 254.704 li
672.212 254.724 li
cp
680.875 255.932 mo
685.827 255.912 li
685.827 254.674 li
680.875 254.694 li
cp
689.538 255.892 mo
694.49 255.872 li
694.49 254.644 li
689.538 254.664 li
cp
698.211 255.862 mo
703.163 255.842 li
703.153 254.604 li
698.201 254.624 li
cp
706.874 255.832 mo
711.826 255.812 li
711.826 254.574 li
706.874 254.594 li
cp
715.537 255.792 mo
720.489 255.782 li
720.489 254.544 li
715.537 254.564 li
cp
724.2 255.762 mo
729.152 255.742 li
729.152 254.514 li
724.2 254.524 li
cp
732.873 255.732 mo
737.825 255.712 li
737.815 254.474 li
732.863 254.494 li
cp
741.536 255.702 mo
746.488 255.682 li
746.488 254.444 li
741.536 254.464 li
cp
750.199 255.662 mo
755.151 255.642 li
755.151 254.414 li
750.199 254.434 li
cp
758.862 255.632 mo
763.814 255.612 li
763.814 254.374 li
758.862 254.394 li
cp
767.535 255.602 mo
772.487 255.582 li
772.477 254.344 li
767.525 254.364 li
cp
776.198 255.562 mo
781.15 255.552 li
781.15 254.314 li
776.198 254.334 li
cp
f
220.367 364.987 mo
221.568 364.987 li
221.568 373.123 li
221.888 373.123 li
222.108 373.123 222.288 373.101 222.418 373.056 cv
222.548 373.011 222.678 372.939 222.818 372.839 cv
222.958 372.739 223.168 372.559 223.458 372.299 cv
223.748 372.038 223.968 371.807 224.118 371.604 cv
224.269 371.4 224.369 371.224 224.419 371.073 cv
224.469 370.921 224.499 370.775 224.499 370.634 cv
224.499 370.189 224.219 369.929 223.648 369.852 cv
223.648 369.234 li
228.49 369.234 li
228.49 369.852 li
228.23 369.89 227.95 370.006 227.64 370.199 cv
227.34 370.392 226.849 370.797 226.189 371.415 cv
224.789 372.718 li
227.28 376.405 li
227.65 376.952 227.92 377.328 228.09 377.534 cv
228.27 377.74 228.42 377.886 228.55 377.973 cv
228.68 378.06 228.84 378.126 229.03 378.172 cv
229.03 378.809 li
224.299 378.809 li
224.299 378.172 li
224.589 378.114 224.739 377.962 224.739 377.717 cv
224.739 377.551 224.679 377.352 224.569 377.125 cv
224.459 376.896 224.229 376.541 223.908 376.057 cv
223.158 374.938 li
222.988 374.687 222.858 374.505 222.758 374.393 cv
222.648 374.28 222.548 374.195 222.448 374.137 cv
222.348 374.079 222.208 374.05 222.028 374.05 cv
221.568 374.05 li
221.568 376.019 li
221.568 376.63 221.588 377.052 221.618 377.283 cv
221.658 377.515 221.738 377.7 221.858 377.838 cv
221.978 377.977 222.198 378.088 222.528 378.172 cv
222.528 378.809 li
217.796 378.809 li
217.796 378.172 li
218.116 378.088 218.346 377.978 218.467 377.843 cv
218.597 377.709 218.677 377.526 218.707 377.298 cv
218.747 377.07 218.767 376.643 218.767 376.019 cv
218.767 368.491 li
218.767 367.802 218.757 367.31 218.737 367.014 cv
218.717 366.718 218.677 366.495 218.617 366.343 cv
218.557 366.192 218.467 366.073 218.346 365.987 cv
218.226 365.9 218.006 365.824 217.676 365.76 cv
217.676 365.122 li
cp
ef
329.115 361.224 mo
331.135 361.751 332.686 363.118 333.766 365.326 cv
334.856 367.532 335.407 370.144 335.407 373.162 cv
335.407 376.18 334.856 378.793 333.766 380.999 cv
332.686 383.206 331.135 384.574 329.115 385.101 cv
328.874 384.309 li
330.435 383.724 331.615 382.448 332.426 380.483 cv
333.226 378.517 333.626 376.08 333.626 373.172 cv
333.626 370.257 333.226 367.815 332.426 365.847 cv
331.615 363.877 330.435 362.6 328.874 362.014 cv
cp
237.003 361.224 mo
237.243 362.014 li
235.682 362.6 234.502 363.877 233.702 365.847 cv
232.891 367.815 232.491 370.257 232.491 373.172 cv
232.491 376.08 232.891 378.517 233.702 380.483 cv
234.502 382.448 235.682 383.724 237.243 384.309 cv
237.003 385.101 li
234.992 384.574 233.442 383.206 232.351 380.999 cv
231.261 378.793 230.711 376.18 230.711 373.162 cv
230.711 370.144 231.261 367.532 232.351 365.326 cv
233.442 363.118 234.992 361.751 237.003 361.224 cv
cp
ef
238.153 365.634 mo
243.505 365.634 li
243.505 366.271 li
243.175 366.31 242.925 366.403 242.765 366.551 cv
242.595 366.699 242.515 366.908 242.515 367.178 cv
242.515 367.39 242.535 367.598 242.575 367.8 cv
242.615 368.003 242.695 368.327 242.815 368.771 cv
244.736 375.701 li
247.126 368.8 li
247.216 368.529 247.296 368.276 247.346 368.037 cv
247.406 367.799 247.436 367.548 247.436 367.284 cv
247.436 366.969 247.346 366.728 247.186 366.561 cv
247.016 366.393 246.766 366.297 246.426 366.271 cv
246.426 365.634 li
250.598 365.634 li
250.598 366.271 li
250.347 366.31 250.137 366.389 249.967 366.508 cv
249.797 366.626 249.647 366.797 249.507 367.019 cv
249.367 367.241 249.207 367.603 249.017 368.105 cv
244.966 378.876 li
242.735 378.876 li
239.544 368.066 li
239.394 367.584 239.284 367.241 239.184 367.039 cv
239.084 366.836 238.964 366.671 238.804 366.547 cv
238.653 366.421 238.433 366.329 238.153 366.271 cv
cp
ef
259.531 375.806 mo
259.871 375.806 260.201 375.82 260.531 375.848 cv
260.861 375.876 261.281 375.937 261.811 376.03 cv
261.811 377.666 li
260.881 377.666 li
260.771 377.366 260.651 377.134 260.521 376.971 cv
260.391 376.807 260.251 376.694 260.101 376.63 cv
259.941 376.567 259.761 376.536 259.541 376.536 cv
259.231 376.536 258.99 376.606 258.8 376.746 cv
258.62 376.887 258.53 377.084 258.53 377.336 cv
258.53 377.514 258.56 377.666 258.63 377.792 cv
258.69 377.919 258.81 378.042 258.98 378.161 cv
259.151 378.281 259.471 378.44 259.961 378.642 cv
260.651 378.931 261.151 379.247 261.441 379.586 cv
261.741 379.925 261.881 380.333 261.881 380.81 cv
261.881 381.513 261.631 382.052 261.131 382.428 cv
260.631 382.806 259.921 382.993 259 382.993 cv
258.23 382.993 257.37 382.884 256.42 382.664 cv
256.42 380.986 li
257.36 380.986 li
257.47 381.412 257.65 381.732 257.9 381.944 cv
258.14 382.157 258.47 382.264 258.87 382.264 cv
259.221 382.264 259.491 382.184 259.671 382.025 cv
259.851 381.865 259.941 381.634 259.941 381.33 cv
259.941 381.139 259.901 380.975 259.821 380.839 cv
259.741 380.703 259.601 380.574 259.411 380.449 cv
259.221 380.325 258.9 380.162 258.44 379.962 cv
257.78 379.676 257.31 379.361 257.01 379.017 cv
256.71 378.673 256.57 378.287 256.57 377.855 cv
256.57 377.434 256.69 377.07 256.93 376.76 cv
257.18 376.452 257.52 376.215 257.98 376.051 cv
258.43 375.888 258.95 375.806 259.531 375.806 cv
cp
254.559 375.806 mo
254.839 375.806 255.139 375.837 255.459 375.898 cv
255.459 377.834 li
254.179 377.834 li
254.109 377.563 253.999 377.355 253.869 377.209 cv
253.739 377.065 253.569 376.992 253.359 376.992 cv
253.248 376.992 253.138 377.024 253.008 377.087 cv
252.888 377.15 252.768 377.239 252.668 377.354 cv
252.558 377.468 252.488 377.586 252.438 377.705 cv
252.398 377.824 252.368 377.944 252.358 378.066 cv
252.338 378.188 252.338 378.37 252.338 378.614 cv
252.338 380.853 li
252.338 381.297 252.348 381.609 252.378 381.787 cv
252.418 381.964 252.478 382.103 252.578 382.204 cv
252.678 382.305 252.848 382.376 253.078 382.418 cv
253.078 382.882 li
249.607 382.882 li
249.607 382.418 li
249.837 382.358 249.997 382.278 250.077 382.18 cv
250.167 382.081 250.227 381.948 250.257 381.78 cv
250.287 381.611 250.297 381.304 250.297 380.86 cv
250.297 377.975 li
250.297 377.629 250.297 377.372 250.287 377.206 cv
250.267 377.041 250.247 376.907 250.197 376.806 cv
250.157 376.705 250.087 376.623 249.997 376.56 cv
249.907 376.498 249.747 376.443 249.517 376.396 cv
249.517 375.919 li
251.448 375.862 li
252.338 375.862 li
252.238 376.922 li
252.328 376.943 li
252.668 376.541 253.018 376.25 253.379 376.072 cv
253.739 375.895 254.139 375.806 254.559 375.806 cv
cp
264.182 374.164 mo
265.863 374.164 li
265.863 375.919 li
267.863 375.919 li
267.863 376.796 li
265.863 376.796 li
265.863 379.962 li
265.863 380.49 265.893 380.881 265.933 381.134 cv
265.983 381.386 266.073 381.572 266.183 381.692 cv
266.303 381.811 266.453 381.87 266.623 381.87 cv
266.853 381.87 267.053 381.83 267.213 381.752 cv
267.373 381.672 267.523 381.571 267.663 381.449 cv
268.104 382.039 li
267.693 382.39 267.323 382.637 266.983 382.78 cv
266.643 382.923 266.293 382.993 265.913 382.993 cv
265.213 382.993 264.692 382.806 264.352 382.428 cv
264.002 382.052 263.832 381.482 263.832 380.719 cv
263.832 376.796 li
262.952 376.796 li
262.952 376.311 li
263.242 376.265 263.452 376.194 263.582 376.101 cv
263.722 376.007 263.822 375.882 263.902 375.725 cv
263.972 375.568 264.032 375.364 264.082 375.111 cv
264.122 374.858 264.162 374.543 264.182 374.164 cv
cp
ef
274.826 373.799 mo
286.741 373.799 li
286.741 372.516 li
274.826 372.516 li
cp
ef
297.334 365.634 mo
302.685 365.634 li
302.685 366.271 li
302.355 366.31 302.105 366.403 301.945 366.551 cv
301.775 366.699 301.695 366.908 301.695 367.178 cv
301.695 367.39 301.715 367.598 301.755 367.8 cv
301.795 368.003 301.875 368.327 301.995 368.771 cv
303.916 375.701 li
306.307 368.8 li
306.397 368.529 306.477 368.276 306.527 368.037 cv
306.587 367.799 306.617 367.548 306.617 367.284 cv
306.617 366.969 306.527 366.728 306.367 366.561 cv
306.197 366.393 305.947 366.297 305.606 366.271 cv
305.606 365.634 li
309.778 365.634 li
309.778 366.271 li
309.528 366.31 309.318 366.389 309.148 366.508 cv
308.978 366.626 308.828 366.797 308.688 367.019 cv
308.547 367.241 308.387 367.603 308.197 368.105 cv
304.146 378.876 li
301.915 378.876 li
298.724 368.066 li
298.574 367.584 298.464 367.241 298.364 367.039 cv
298.264 366.836 298.144 366.671 297.984 366.547 cv
297.834 366.421 297.614 366.329 297.334 366.271 cv
cp
ef
322.182 383.331 mo
322.022 383.462 321.892 383.604 321.802 383.759 cv
321.712 383.913 321.672 384.091 321.672 384.292 cv
321.672 384.629 321.822 384.878 322.112 385.04 cv
322.402 385.202 322.872 385.282 323.503 385.282 cv
324.093 385.282 324.543 385.184 324.853 384.987 cv
325.153 384.79 325.313 384.515 325.313 384.159 cv
325.313 383.864 325.213 383.657 325.033 383.538 cv
324.843 383.419 324.563 383.359 324.203 383.359 cv
322.992 383.359 li
322.642 383.359 322.382 383.349 322.182 383.331 cv
cp
323.463 376.529 mo
323.112 376.529 322.852 376.663 322.692 376.933 cv
322.522 377.201 322.442 377.615 322.442 378.172 cv
322.442 378.761 322.522 379.2 322.692 379.487 cv
322.852 379.775 323.122 379.919 323.473 379.919 cv
323.793 379.919 324.043 379.786 324.213 379.519 cv
324.383 379.253 324.473 378.846 324.473 378.298 cv
324.473 377.723 324.393 377.283 324.223 376.982 cv
324.053 376.68 323.803 376.529 323.463 376.529 cv
cp
317.36 375.862 mo
318.241 375.862 li
318.241 380.853 li
318.241 381.302 318.251 381.61 318.271 381.776 cv
318.301 381.942 318.361 382.075 318.451 382.176 cv
318.541 382.277 318.701 382.358 318.941 382.418 cv
318.941 382.882 li
315.51 382.882 li
315.51 382.418 li
315.74 382.358 315.9 382.278 315.98 382.18 cv
316.07 382.081 316.13 381.948 316.16 381.78 cv
316.19 381.611 316.2 381.304 316.2 380.86 cv
316.2 377.596 li
316.2 377.268 316.18 377.036 316.14 376.898 cv
316.1 376.759 316.03 376.654 315.93 376.581 cv
315.84 376.509 315.67 376.447 315.42 376.396 cv
315.42 375.919 li
cp
323.483 375.806 mo
323.723 375.806 323.933 375.818 324.113 375.841 cv
324.293 375.865 324.473 375.891 324.653 375.919 cv
327.184 375.919 li
327.184 376.859 li
325.983 376.725 li
325.953 376.803 li
326.083 376.934 326.194 377.113 326.284 377.34 cv
326.374 377.567 326.414 377.839 326.414 378.158 cv
326.414 378.971 326.164 379.589 325.673 380.011 cv
325.173 380.432 324.453 380.643 323.493 380.643 cv
323.022 380.643 322.642 380.601 322.352 380.516 cv
322.112 380.726 321.992 380.953 321.992 381.197 cv
321.992 381.337 322.022 381.445 322.082 381.52 cv
322.142 381.595 322.242 381.652 322.382 381.692 cv
322.522 381.732 322.722 381.752 322.982 381.752 cv
324.723 381.752 li
325.513 381.752 326.093 381.903 326.484 382.208 cv
326.874 382.511 327.064 382.984 327.064 383.625 cv
327.064 384.127 326.924 384.557 326.644 384.917 cv
326.364 385.278 325.953 385.552 325.423 385.742 cv
324.893 385.931 324.263 386.026 323.533 386.026 cv
323.012 386.026 322.522 386.002 322.092 385.955 cv
321.662 385.909 321.292 385.824 320.992 385.7 cv
320.682 385.576 320.452 385.406 320.281 385.191 cv
320.121 384.975 320.031 384.702 320.031 384.369 cv
320.031 384.103 320.121 383.857 320.291 383.632 cv
320.462 383.408 320.692 383.216 321.002 383.056 cv
320.802 382.917 320.662 382.755 320.572 382.572 cv
320.482 382.39 320.432 382.165 320.432 381.898 cv
320.432 381.613 320.522 381.342 320.682 381.085 cv
320.842 380.827 321.132 380.547 321.532 380.242 cv
321.172 380.037 320.892 379.766 320.702 379.432 cv
320.512 379.097 320.422 378.705 320.422 378.256 cv
320.422 377.695 320.552 377.229 320.822 376.862 cv
321.092 376.495 321.452 376.227 321.912 376.058 cv
322.362 375.891 322.892 375.806 323.483 375.806 cv
cp
311.749 375.806 mo
312.089 375.806 312.419 375.82 312.749 375.848 cv
313.079 375.876 313.499 375.937 314.029 376.03 cv
314.029 377.666 li
313.099 377.666 li
312.989 377.366 312.869 377.134 312.739 376.971 cv
312.609 376.807 312.469 376.694 312.319 376.63 cv
312.159 376.567 311.979 376.536 311.759 376.536 cv
311.448 376.536 311.208 376.606 311.018 376.746 cv
310.838 376.887 310.748 377.084 310.748 377.336 cv
310.748 377.514 310.778 377.666 310.848 377.792 cv
310.908 377.919 311.028 378.042 311.198 378.161 cv
311.368 378.281 311.689 378.44 312.179 378.642 cv
312.869 378.931 313.369 379.247 313.659 379.586 cv
313.959 379.925 314.099 380.333 314.099 380.81 cv
314.099 381.513 313.849 382.052 313.349 382.428 cv
312.849 382.806 312.139 382.993 311.218 382.993 cv
310.448 382.993 309.588 382.884 308.637 382.664 cv
308.637 380.986 li
309.578 380.986 li
309.688 381.412 309.868 381.732 310.118 381.944 cv
310.358 382.157 310.688 382.264 311.088 382.264 cv
311.438 382.264 311.709 382.184 311.889 382.025 cv
312.069 381.865 312.159 381.634 312.159 381.33 cv
312.159 381.139 312.119 380.975 312.039 380.839 cv
311.959 380.703 311.819 380.574 311.629 380.449 cv
311.438 380.325 311.118 380.162 310.658 379.962 cv
309.998 379.676 309.528 379.361 309.228 379.017 cv
308.928 378.673 308.788 378.287 308.788 377.855 cv
308.788 377.434 308.908 377.07 309.148 376.76 cv
309.398 376.452 309.738 376.215 310.198 376.051 cv
310.648 375.888 311.168 375.806 311.749 375.806 cv
cp
316.25 373.117 mo
318.181 373.117 li
318.181 374.837 li
316.25 374.837 li
cp
ef
68.8012 403.337 mo
68.402 403.337 68.1149 403.344 67.9409 403.356 cv
67.9409 414.214 li
68.0569 414.233 68.35 414.243 68.8212 414.243 cv
69.8135 414.243 70.5858 414.043 71.137 413.645 cv
71.6882 413.246 72.1073 412.638 72.3944 411.82 cv
72.6815 411.004 72.8245 409.977 72.8245 408.742 cv
72.8245 406.973 72.4794 405.629 71.7902 404.712 cv
71.1 403.795 70.1036 403.337 68.8012 403.337 cv
cp
63.9075 402.208 mo
68.9372 402.208 li
70.0136 402.208 70.9129 402.292 71.6351 402.458 cv
72.3574 402.626 72.9986 402.89 73.5598 403.25 cv
74.121 403.61 74.5732 404.04 74.9183 404.539 cv
75.2634 405.037 75.5195 405.616 75.6875 406.276 cv
75.8546 406.936 75.9386 407.68 75.9386 408.51 cv
75.9386 409.862 75.7295 411.017 75.3104 411.975 cv
74.9363 412.838 74.3961 413.532 73.6898 414.059 cv
72.9846 414.588 72.1413 414.951 71.161 415.151 cv
70.4137 415.304 69.4594 415.382 68.298 415.382 cv
63.9075 415.382 li
63.9075 414.745 li
64.2556 414.654 64.4927 414.552 64.6187 414.436 cv
64.7438 414.32 64.8298 414.167 64.8748 413.978 cv
64.9198 413.788 64.9428 413.448 64.9428 412.959 cv
64.9428 404.64 li
64.9428 404.15 64.9218 403.811 64.8798 403.621 cv
64.8378 403.432 64.7528 403.279 64.6237 403.163 cv
64.4947 403.047 64.2556 402.941 63.9075 402.845 cv
cp
50.1938 402.208 mo
54.1111 402.208 li
57.5343 408.144 li
57.7474 408.517 58.0245 409.022 58.3666 409.659 cv
58.7077 410.296 59.0108 410.897 59.2749 411.464 cv
59.43 411.464 li
59.3589 409.926 59.3239 408.246 59.3239 406.425 cv
59.3239 404.631 li
59.3239 404.205 59.3079 403.902 59.2749 403.718 cv
59.2429 403.534 59.1919 403.395 59.1208 403.298 cv
59.0498 403.202 58.9608 403.123 58.8548 403.062 cv
58.7477 403 58.5597 402.928 58.2886 402.845 cv
58.2886 402.208 li
61.9448 402.208 li
61.9448 402.845 li
61.6867 402.928 61.5047 402.999 61.3986 403.057 cv
61.2916 403.115 61.2016 403.192 61.1275 403.289 cv
61.0535 403.385 60.9965 403.531 60.9585 403.728 cv
60.9195 403.924 60.9005 404.225 60.9005 404.631 cv
60.9005 415.382 li
58.4436 415.382 li
54.0911 407.873 li
53.5049 406.857 53.0728 406.058 52.7957 405.479 cv
52.7086 405.479 li
52.7727 406.863 52.8057 408.323 52.8057 409.862 cv
52.8057 412.969 li
52.8057 413.451 52.8297 413.79 52.8777 413.983 cv
52.9257 414.175 53.0127 414.328 53.1388 414.441 cv
53.2648 414.554 53.5019 414.654 53.85 414.745 cv
53.85 415.382 li
50.1938 415.382 li
50.1938 414.745 li
50.5359 414.654 50.769 414.551 50.895 414.431 cv
51.0211 414.312 51.1081 414.159 51.1561 413.973 cv
51.2041 413.786 51.2291 413.451 51.2291 412.969 cv
51.2291 404.621 li
51.2291 404.138 51.2081 403.805 51.1661 403.621 cv
51.1241 403.439 51.0371 403.286 50.905 403.163 cv
50.773 403.041 50.5359 402.934 50.1938 402.845 cv
cp
43.3954 402.053 mo
44.8079 402.053 46.1034 402.224 47.2838 402.565 cv
47.2838 405.305 li
45.9583 405.305 li
45.8103 404.765 45.6412 404.349 45.4512 404.056 cv
45.2611 403.763 45.016 403.544 44.7159 403.4 cv
44.4158 403.255 44.0307 403.182 43.5605 403.182 cv
42.9223 403.182 42.3581 403.377 41.8679 403.766 cv
41.3778 404.155 40.9906 404.776 40.7075 405.629 cv
40.4234 406.481 40.2814 407.561 40.2814 408.867 cv
40.2814 410.649 40.5085 412.018 40.9636 412.974 cv
41.4178 413.93 42.058 414.407 42.8833 414.407 cv
43.4505 414.407 43.8696 414.238 44.1407 413.901 cv
44.4108 413.562 44.5468 413.024 44.5468 412.283 cv
44.5468 411.917 li
44.5468 411.428 44.5308 411.079 44.4988 410.87 cv
44.4658 410.66 44.4158 410.505 44.3488 410.402 cv
44.2808 410.299 44.1917 410.215 44.0827 410.151 cv
43.9726 410.086 43.7796 410.012 43.5025 409.928 cv
43.5025 409.292 li
48.4542 409.292 li
48.4542 409.928 li
48.1311 410.025 47.912 410.135 47.796 410.257 cv
47.6799 410.38 47.6009 410.541 47.5589 410.744 cv
47.5179 410.947 47.4969 411.232 47.4969 411.599 cv
47.4969 415.237 li
46.1034 415.527 li
45.4462 414.832 li
44.6789 415.301 43.7986 415.536 42.8062 415.536 cv
40.9236 415.536 39.5191 414.988 38.594 413.891 cv
37.6688 412.794 37.2062 411.132 37.2062 408.906 cv
37.2062 407.465 37.456 406.231 37.9557 405.205 cv
38.4553 404.178 39.1775 403.397 40.1223 402.86 cv
41.0666 402.321 42.158 402.053 43.3954 402.053 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
.61709 .780514 0 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /IAAAAA+Calibri-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f329fef5b5e000000cc000000606376
74203fba58ec0000012c000006886670676da1ea42ac000007b400000913
676c7966fc27b0700000d6e400001e1668656164f85c7982000010c80000
0036686865610dbb0be90000110000000024686d747885bc0baf00001124
000047d86c6f6361f275e9f5000058fc000036566d617870289a17900000
8f54000000206e616d65df42d33000008f740000308b70726570f940ca73
0000c000000016e1676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e4002effc000247b00000009000000004d53202000200000
1d390600fe0001c4079e0226200001ff0000000003c0050e000000200014
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000005aa001500a0fff8ff42fea2fdbc03b6015401cc
0108010e00ff00f5006e014000a0055e006b0570fff60122fff10547ffec
04faffec0131fff4000a03a0036600b400e1044c007c40465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000063ae1370dc4145f0f3cf50019080000000000
bbeb7ccc00000000d7497752fbdafd350a1a085000010009000200000000
0000000100000600fe0001c40aa0fbdafa860a1a00010000000000000000
00000000000008c2040e0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000006fe008d00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000004bb00160000000000000000
000000000000000000000000046800210000000000000000000000000000
000000000000000000000000000000000000000000000447000a00000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000003cb005a0000000000000000
000000000000000000000000049100860000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000006480086000000000000000000000000000000000000
00000000000004da00550000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003fd00860000
000000000000042500860000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000435001b00000000000000000000
000000000000000000000404002600000000000000000000000000000000
000000000000000000000000000000000000000003f30047000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000359004800000000000000000000
0000000000000000000000000000000000000000000000000000044b004b
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0682007e0000000000000000000000000000000000000000000000000000
0000044d0048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000044b007e000000000000
000002d8007e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002bf0036000000000244003802f5
003a00000000000000000000000000000000000000000000000000000000
00000000046c005a0000000002f5003902f5005a000000000200005a0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000029b00e600000000000000000000
0000000000000000000000000000026900cf000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000038200790000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
049a00780000000000000000000000000000000000000000000000000000
000000000000031300180000000002c90018000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000049a
007800000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000>
<0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e016101610161016101610161
016101610161016101610161016101610161016101610161016101610161
016101610161016101610161016101610161016101610161016101610161
0161016101610161016101610161016101610161016101c301c301c301c3
01c301c3024d024d024d024d024d024d024d024d024d024d02b302b302b3
02b302b302b302b302b302b302b302b302b302b302b3031a031a031a031a
031a031a035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f03d503d503d503d503d503d503d50423042304230423042304230423
04230423042304230423047d047d047d04fa04fa04fa04fa04fa04fa04fa
04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa
04fa04fa04fa054a054a054a054a054a054a05c705c705c705c705c705c7
05c705c705c705c706b206b206b206b206b206b206b206b206b206b206b2
06b206b206b2074707470747074707470747074707470747074707e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e208a3
08a308a308a308a308a308a308a309150915091509150915091509150915
091509150915091509b609b609b60a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340aa30aa30b000b660b660b660b660b660b660b660b660b66
0be60be60c2f0c990c990cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0d3a0d3a0d3a0d3a0d3a0d3a0d3a0d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dde
0dde0dde0dde0dde0dde0dde0dde0dde0e320e320ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0000000100001b2a0051
0005002c000100020010002f006000000cf816e1000100010000002d0222
0000000300000000021000000000000300000001000e0210000000030000
0002000804d60000000300000003002e04b00000000300000004001804c6
0000000300000005001804de0000000300000006001804f6000000030000
00070076050e0000000300000008002a0592000000030000000900200796
000000030000000a02a00210000000030000000b005607b6000000030000
000c002a080c000000030000000d0e060836000000030000000e004a07b6
00010000000000000108163c000100000000000100071744000100000000
0002000418a70001000000000003001718940001000000000004000c189f
0001000000000005000c18ab0001000000000006000c18b7000100000000
0007003b18c30001000000000008001516430001000000000009001018fe
000100000000000a01501744000100000000000b002b190e000100000000
000c00151939000100000000000d0703194e000100000000000e0025190e
0003000104090000021205840003000104090001000e0210000300010409
0002000804d60003000104090003002e04b00003000104090004001804c6
0003000104090005001804de0003000104090006001804f6000300010409
00070076050e0003000104090008002a0592000300010409000900200796
000300010409000a02a00210000300010409000b005607b6000300010409
000c002a080c000300010409000d0e182051000300010409000e004a07b6
00a9002000320030003100380020004d006900630072006f0073006f0066
007400200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e00430061006c006900620072
0069002000690073002000610020006d006f006400650072006e00200073
0061006e0073002000730065007200690066002000660061006d0069006c
00790020007700690074006800200073007500620074006c006500200072
006f0075006e00640069006e006700730020006f006e0020007300740065
006d007300200061006e006400200063006f0072006e006500720073002e
002000490074002000660065006100740075007200650073002000720065
0061006c0020006900740061006c006900630073002c00200073006d0061
006c006c00200063006100700073002c00200061006e00640020006d0075
006c007400690070006c00650020006e0075006d006500720061006c0020
0073006500740073002e0020004900740073002000700072006f0070006f
007200740069006f006e007300200061006c006c006f0077002000680069
0067006800200069006d007000610063007400200069006e002000740069
006700680074006c007900200073006500740020006c0069006e00650073
0020006f0066002000620069006700200061006e006400200073006d0061
006c006c0020007400650078007400200061006c0069006b0065002e0020
00430061006c0069006200720069002700730020006d0061006e00790020
00630075007200760065007300200061006e006400200074006800650020
006e00650077002000720061007300740065007200690073006500720020
007400650061006d00200075007000200069006e00200062006900670067
00650072002000730069007a0065007300200074006f0020007200650076
00650061006c002000610020007700610072006d00200061006e00640020
0073006f006600740020006300680061007200610063007400650072002e
004d006900630072006f0073006f00660074003a002000430061006c0069
00620072006900200042006f006c006400560065007200730069006f006e
00200036002e0032003300430061006c0069006200720069002d0042006f
006c006400430061006c0069006200720069002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000740068
00650020004d006900630072006f0073006f00660074002000670072006f
007500700020006f006600200063006f006d00700061006e006900650073
002e00a9002000320030003100380020004d006900630072006f0073006f
0066007400200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e000d000a0048006500620072006500770020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200063006f007000790072006900670068
0074002000a9002000320030003000330020002600200032003000300037
002c002000520061006c00700068002000480061006e0063006f0063006b
002000260020004a006f0068006e00200048007500640073006f006e002e
002000540068006900730020006c00610079006f007500740020006c006f
00670069006300200066006f00720020004200690062006c006900630061
006c00200048006500620072006500770020006900730020006f00700065
006e00200073006f007500720063006500200073006f0066007400770061
0072006500200075006e00640065007200200074006800650020004d0049
00540020004c006900630065006e00730065003b00200073006500650020
0065006d0062006500640064006500640020006c006900630065006e0073
00650020006400650073006300720069007000740069006f006e00200066
006f0072002000640065007400610069006c0073002e004c007500630028
006100730029002000640065002000470072006f006f0074006800740074
00700073003a002f002f0064006f00630073002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f00610062006f007500740068007400740070003a
002f002f006c00750063006100730066006f006e00740073002e0063006f
006d004d006900630072006f0073006f0066007400200073007500700070
006c00690065006400200066006f006e0074002e00200059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f0020006300720065006100740065002c00200064
006900730070006c00610079002c00200061006e00640020007000720069
006e007400200063006f006e00740065006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
0020006c006900630065006e007300650020007400650072006d00730020
006f00720020007400650072006d00730020006f00660020007500730065
002c0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000700072006f0064007500630074002c002000730065
00720076006900630065002c0020006f007200200063006f006e00740065
006e007400200069006e0020007700680069006300680020007400680069
007300200066006f006e0074002000770061007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e00200041006e00790020006f00740068006500720020
007500730065002000690073002000700072006f00680069006200690074
00650064002e000d000d00540068006500200066006f006c006c006f0077
0069006e00670020006c006900630065006e00730065002c002000620061
0073006500640020006f006e00200074006800650020004d004900540020
006c006900630065006e00730065002000280068007400740070003a002f
002f0065006e002e00770069006b006900700065006400690061002e006f
00720067002f00770069006b0069002f004d00490054005f004c00690063
0065006e007300650029002c0020006100700070006c0069006500730020
0074006f00200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
0072006500770020201c004c00610079006f007500740020004c006f0067
00690063201d0020006100730020006a006f0069006e0074006c00790020
0064006500760065006c006f007000650064002000620079002000520061
006c00700068002000480061006e0063006f0063006b00200061006e0064
0020004a006f0068006e00200048007500640073006f006e002e0020000d
000d005000650072006d0069007300730069006f006e0020006900730020
0068006500720065006200790020006700720061006e007400650064002c
002000660072006500650020006f00660020006300680061007200670065
002c00200074006f00200061006e007900200070006500720073006f006e
0020006f0062007400610069006e0069006e00670020006100200063006f
007000790020006f006600200074006800650020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
00480065006200720065007700200061006e00640020006100730073006f
00630069006100740065006400200064006f00630075006d0065006e0074
006100740069006f006e002000660069006c006500730020002800740068
00650020201c004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065201d0029002c00200074006f
0020006400650061006c00200069006e00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
007700610072006500200077006900740068006f00750074002000720065
0073007400720069006300740069006f006e002c00200069006e0063006c
007500640069006e006700200077006900740068006f007500740020006c
0069006d00690074006100740069006f006e002000740068006500200072
0069006700680074007300200074006f0020007500730065002c00200063
006f00700079002c0020006d006f0064006900660079002c0020006d0065
007200670065002c0020007000750062006c006900730068002c00200064
006900730074007200690062007500740065002c0020007300750062006c
006900630065006e00730065002c00200061006e0064002f006f00720020
00730065006c006c00200063006f00700069006500730020006f00660020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065002c00200061006e0064
00200074006f0020007000650072006d0069007400200070006500720073
006f006e007300200074006f002000770068006f006d0020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f0066007400770061007200650020006900730020006600750072006e
0069007300680065006400200074006f00200064006f00200073006f002c
0020007300750062006a00650063007400200074006f0020007400680065
00200066006f006c006c006f00770069006e006700200063006f006e0064
006900740069006f006e0073003a000d000d005400680065002000610062
006f0076006500200063006f00700079007200690067006800740020006e
006f007400690063006500200061006e0064002000740068006900730020
007000650072006d0069007300730069006f006e0020006e006f00740069
006300650020007300680061006c006c00200062006500200069006e0063
006c007500640065006400200069006e00200061006c006c00200063006f
00700069006500730020006f00720020007300750062007300740061006e
007400690061006c00200070006f007200740069006f006e00730020006f
006600200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002e000d000d
00540048004500200053004f004600540057004100520045002000490053
002000500052004f00560049004400450044002000270041005300200049
00530027002c00200057004900540048004f005500540020005700410052
00520041004e005400590020004f004600200041004e00590020004b0049
004e0044002c002000450058005000520045005300530020004f00520020
0049004d0050004c004900450044002c00200049004e0043004c00550044
0049004e004700200042005500540020004e004f00540020004c0049004d
004900540045004400200054004f00200054004800450020005700410052
00520041004e00540049004500530020004f00460020004d004500520043
00480041004e0054004100420049004c004900540059002c002000460049
0054004e00450053005300200046004f0052002000410020005000410052
0054004900430055004c0041005200200050005500520050004f00530045
00200041004e00440020004e004f004e0049004e004600520049004e0047
0045004d0045004e0054002e00200049004e0020004e004f002000450056
0045004e00540020005300480041004c004c002000540048004500200041
005500540048004f005200530020004f005200200043004f005000590052
004900470048005400200048004f004c0044004500520053002000420045
0020004c004900410042004c004500200046004f005200200041004e0059
00200043004c00410049004d002c002000440041004d0041004700450053
0020004f00520020004f00540048004500520020004c0049004100420049
004c004900540059002c0020005700480045005400480045005200200049
004e00200041004e00200041004300540049004f004e0020004f00460020
0043004f004e00540052004100430054002c00200054004f005200540020
004f00520020004f00540048004500520057004900530045002c00200041
0052004900530049004e0047002000460052004f004d002c0020004f0055
00540020004f00460020004f005200200049004e00200043004f004e004e
0045004300540049004f004e002000570049005400480020005400480045
00200053004f0046005400570041005200450020004f0052002000540048
004500200055005300450020004f00520020004f00540048004500520020
004400450041004c0049004e0047005300200049004e0020005400480045
00200053004f004600540057004100520045002e000da92032303138204d
6963726f736f667420436f72706f726174696f6e2e20416c6c2052696768
74732052657365727665642e0d486562726577204f70656e54797065204c
61796f7574206c6f67696320636f7079726967687420a920323030332026
20323030372c2052616c70682048616e636f636b2026204a6f686e204875
64736f6e2e2054686973206c61796f7574206c6f67696320666f72204269
626c6963616c20486562726577206973206f70656e20736f757263652073
6f66747761726520756e64657220746865204d4954204c6963656e73653b
2073656520656d626564646564206c6963656e7365206465736372697074
696f6e20666f722064657461696c732e43616c696272692069732061206d
6f6465726e2073616e732073657269662066616d696c7920776974682073
7562746c6520726f756e64696e6773206f6e207374656d7320616e642063
6f726e6572732e204974206665617475726573207265616c206974616c69
63732c20736d616c6c20636170732c20616e64206d756c7469706c65206e
756d6572616c20736574732e204974732070726f706f7274696f6e732061
6c6c6f77206869676820696d7061637420696e2074696768746c79207365
74206c696e6573206f662062696720616e6420736d616c6c207465787420
616c696b652e2043616c696272692773206d616e79206375727665732061
6e6420746865206e65772072617374657269736572207465616d20757020
696e206269676765722073697a657320746f2072657665616c2061207761
726d20616e6420736f6674206368617261637465722e4d6963726f736f66
743a2043616c6962726920426f6c6456657273696f6e20362e323343616c
696272692d426f6c6443616c6962726920697320612074726164656d6172
6b206f6620746865204d6963726f736f66742067726f7570206f6620636f
6d70616e6965732e4c7563286173292064652047726f6f7468747470733a
2f2f646f63732e6d6963726f736f66742e636f6d2f7479706f6772617068
792f61626f7574687474703a2f2f6c75636173666f6e74732e636f6d4d69
63726f736f667420737570706c69656420666f6e742e20596f75206d6179
20757365207468697320666f6e7420746f206372656174652c2064697370
6c61792c20616e64207072696e7420636f6e74656e74206173207065726d
697474656420627920746865206c6963656e7365207465726d73206f7220
7465726d73206f66207573652c206f6620746865204d6963726f736f6674
2070726f647563742c20736572766963652c206f7220636f6e74656e7420
696e207768696368207468697320666f6e742077617320696e636c756465
642e20596f75206d6179206f6e6c792028692920656d6265642074686973
20666f6e7420696e20636f6e74656e74206173207065726d697474656420
62792074686520656d62656464696e67207265737472696374696f6e7320
696e636c7564656420696e207468697320666f6e743b20616e6420286969
292074656d706f726172696c7920646f776e6c6f6164207468697320666f
6e7420746f2061207072696e746572206f72206f74686572206f75747075
742064657669636520746f2068656c70207072696e7420636f6e74656e74
2e20416e79206f74686572207573652069732070726f686962697465642e
0d0d54686520666f6c6c6f77696e67206c6963656e73652c206261736564
206f6e20746865204d4954206c6963656e73652028687474703a2f2f656e
2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e73
65292c206170706c69657320746f20746865204f70656e54797065204c61
796f7574206c6f67696320666f72204269626c6963616c20486562726577
20d24c61796f7574204c6f676963d3206173206a6f696e746c7920646576
656c6f7065642062792052616c70682048616e636f636b20616e64204a6f
686e20487564736f6e2e200d0d5065726d697373696f6e20697320686572
656279206772616e7465642c2066726565206f66206368617267652c2074
6f20616e7920706572736f6e206f627461696e696e67206120636f707920
6f6620746865204f70656e54797065204c61796f7574206c6f6769632066
6f72204269626c6963616c2048656272657720616e64206173736f636961
74656420646f63756d656e746174696f6e2066696c6573202874686520d2
4c61796f7574204c6f67696320536f667477617265d3292c20746f206465
616c20696e20746865204c61796f7574204c6f67696320536f6674776172
6520776974686f7574207265737472696374696f6e2c20696e636c756469
6e6720776974686f7574206c696d69746174696f6e207468652072696768
747320746f207573652c20636f70792c206d6f646966792c206d65726765
2c207075626c6973682c20646973747269627574652c207375626c696365
6e73652c20616e642f6f722073656c6c20636f70696573206f6620746865
204c61796f7574204c6f67696320536f6674776172652c20616e6420746f
207065726d697420706572736f6e7320746f2077686f6d20746865204c61
796f7574204c6f67696320536f667477617265206973206675726e697368
656420746f20646f20736f2c207375626a65637420746f2074686520666f
6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f7665
20636f70797269676874206e6f7469636520616e64207468697320706572
6d697373696f6e206e6f74696365207368616c6c20626520696e636c7564
656420696e20616c6c20636f70696573206f72207375627374616e746961
6c20706f7274696f6e73206f6620746865204c61796f7574204c6f676963
20536f6674776172652e0d0d54484520534f465457415245204953205052
4f564944454420274153204953272c20574954484f55542057415252414e
5459204f4620414e59204b494e442c2045585052455353204f5220494d50
4c4945442c20494e434c5544494e4720425554204e4f54204c494d495445
4420544f205448452057415252414e54494553204f46204d45524348414e
544142494c4954592c204649544e45535320464f52204120504152544943
554c415220505552504f534520414e44204e4f4e494e4652494e47454d45
4e542e20494e204e4f204556454e54205348414c4c205448452041555448
4f5253204f5220434f5059524947485420484f4c44455253204245204c49
41424c4520464f5220414e5920434c41494d2c2044414d41474553204f52
204f54484552204c494142494c4954592c205748455448455220494e2041
4e20414354494f4e204f4620434f4e54524143542c20544f5254204f5220
4f54484552574953452c2041524953494e472046524f4d2c204f5554204f
46204f5220494e20434f4e4e454354494f4e20574954482054484520534f
465457415245204f522054484520555345204f52204f5448455220444541
4c494e475320494e2054484520534f4654574152452e0d004d0069006300
72006f0073006f0066007400200073007500700070006c00690065006400
200066006f006e0074002e00200059006f00750020006d00610079002000
75007300650020007400680069007300200066006f006e00740020007400
6f0020006300720065006100740065002c00200064006900730070006c00
610079002c00200061006e00640020007000720069006e00740020006300
6f006e00740065006e00740020006100730020007000650072006d006900
7400740065006400200062007900200074006800650020006c0069006300
65006e007300650020007400650072006d00730020006f00720020007400
650072006d00730020006f00660020007500730065002c0020006f006600
200074006800650020004d006900630072006f0073006f00660074002000
700072006f0064007500630074002c002000730065007200760069006300
65002c0020006f007200200063006f006e00740065006e00740020006900
6e0020007700680069006300680020007400680069007300200066006f00
6e0074002000770061007300200069006e0063006c007500640065006400
2e00200059006f00750020006d006100790020006f006e006c0079002000
280069002900200065006d00620065006400200074006800690073002000
66006f006e007400200069006e00200063006f006e00740065006e007400
20006100730020007000650072006d006900740074006500640020006200
79002000740068006500200065006d00620065006400640069006e006700
20007200650073007400720069006300740069006f006e00730020006900
6e0063006c007500640065006400200069006e0020007400680069007300
200066006f006e0074003b00200061006e00640020002800690069002900
2000740065006d0070006f0072006100720069006c007900200064006f00
77006e006c006f006100640020007400680069007300200066006f006e00
7400200074006f002000610020007000720069006e007400650072002000
6f00720020006f00740068006500720020006f0075007400700075007400
2000640065007600690063006500200074006f002000680065006c007000
20007000720069006e007400200063006f006e00740065006e0074002e00
200041006e00790020006f00740068006500720020007500730065002000
690073002000700072006f0068006900620069007400650064002e000d00
0a000d000a00540068006500200066006f006c006c006f00770069006e00
670020006c006900630065006e00730065002c0020006200610073006500
640020006f006e00200074006800650020004d004900540020006c006900
630065006e00730065002000280068007400740070003a002f002f006500
6e002e00770069006b006900700065006400690061002e006f0072006700
2f00770069006b0069002f004d00490054005f004c006900630065006e00
7300650029002c0020006100700070006c00690065007300200074006f00
200074006800650020004f00700065006e00540079007000650020004c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
770020201c004c00610079006f007500740020004c006f00670069006320
1d0020006100730020006a006f0069006e0074006c007900200064006500
760065006c006f007000650064002000620079002000520061006c007000
68002000480061006e0063006f0063006b00200061006e00640020004a00
6f0068006e00200048007500640073006f006e002e0020000d000a000d00
0a005000650072006d0069007300730069006f006e002000690073002000
68006500720065006200790020006700720061006e007400650064002c00
2000660072006500650020006f0066002000630068006100720067006500
2c00200074006f00200061006e007900200070006500720073006f006e00
20006f0062007400610069006e0069006e00670020006100200063006f00
7000790020006f006600200074006800650020004f00700065006e005400
79007000650020004c00610079006f007500740020006c006f0067006900
6300200066006f00720020004200690062006c006900630061006c002000
480065006200720065007700200061006e00640020006100730073006f00
630069006100740065006400200064006f00630075006d0065006e007400
6100740069006f006e002000660069006c00650073002000280074006800
650020201c004c00610079006f007500740020004c006f00670069006300
200053006f006600740077006100720065201d0029002c00200074006f00
20006400650061006c00200069006e00200074006800650020004c006100
79006f007500740020004c006f00670069006300200053006f0066007400
7700610072006500200077006900740068006f0075007400200072006500
73007400720069006300740069006f006e002c00200069006e0063006c00
7500640069006e006700200077006900740068006f007500740020006c00
69006d00690074006100740069006f006e00200074006800650020007200
69006700680074007300200074006f0020007500730065002c0020006300
6f00700079002c0020006d006f0064006900660079002c0020006d006500
7200670065002c0020007000750062006c006900730068002c0020006400
6900730074007200690062007500740065002c0020007300750062006c00
6900630065006e00730065002c00200061006e0064002f006f0072002000
730065006c006c00200063006f00700069006500730020006f0066002000
74006800650020004c00610079006f007500740020004c006f0067006900
6300200053006f006600740077006100720065002c00200061006e006400
200074006f0020007000650072006d006900740020007000650072007300
6f006e007300200074006f002000770068006f006d002000740068006500
20004c00610079006f007500740020004c006f0067006900630020005300
6f0066007400770061007200650020006900730020006600750072006e00
69007300680065006400200074006f00200064006f00200073006f002c00
20007300750062006a00650063007400200074006f002000740068006500
200066006f006c006c006f00770069006e006700200063006f006e006400
6900740069006f006e0073003a000d000a000d000a005400680065002000
610062006f0076006500200063006f007000790072006900670068007400
20006e006f007400690063006500200061006e0064002000740068006900
730020007000650072006d0069007300730069006f006e0020006e006f00
740069006300650020007300680061006c006c0020006200650020006900
6e0063006c007500640065006400200069006e00200061006c006c002000
63006f00700069006500730020006f007200200073007500620073007400
61006e007400690061006c00200070006f007200740069006f006e007300
20006f006600200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002e00
0d000a000d000a00540048004500200053004f0046005400570041005200
45002000490053002000500052004f005600490044004500440020002700
4100530020004900530027002c00200057004900540048004f0055005400
2000570041005200520041004e005400590020004f004600200041004e00
590020004b0049004e0044002c0020004500580050005200450053005300
20004f005200200049004d0050004c004900450044002c00200049004e00
43004c005500440049004e004700200042005500540020004e004f005400
20004c0049004d004900540045004400200054004f002000540048004500
2000570041005200520041004e00540049004500530020004f0046002000
4d00450052004300480041004e0054004100420049004c00490054005900
2c0020004600490054004e00450053005300200046004f00520020004100
200050004100520054004900430055004c00410052002000500055005200
50004f0053004500200041004e00440020004e004f004e0049004e004600
520049004e00470045004d0045004e0054002e00200049004e0020004e00
4f0020004500560045004e00540020005300480041004c004c0020005400
48004500200041005500540048004f005200530020004f00520020004300
4f005000590052004900470048005400200048004f004c00440045005200
530020004200450020004c004900410042004c004500200046004f005200
200041004e005900200043004c00410049004d002c002000440041004d00
410047004500530020004f00520020004f00540048004500520020004c00
49004100420049004c004900540059002c00200057004800450054004800
45005200200049004e00200041004e00200041004300540049004f004e00
20004f004600200043004f004e00540052004100430054002c0020005400
4f005200540020004f00520020004f005400480045005200570049005300
45002c002000410052004900530049004e0047002000460052004f004d00
2c0020004f005500540020004f00460020004f005200200049004e002000
43004f004e004e0045004300540049004f004e0020005700490054004800
2000540048004500200053004f0046005400570041005200450020004f00
52002000540048004500200055005300450020004f00520020004f005400
48004500520020004400450041004c0049004e0047005300200049004e00
2000540048004500200053004f004600540057004100520045002e000d00
0a0000>
<b20903eb411d03430001003b03410001008b0330009b033000020004032f
0064032f0074032f00d4032f0004032d032a0038001f032c032a0038001f
032b032ab2381f24bf032a00a4032a00b4032a0003ffc0032ab2232746b9
ffc0032ab21c20464163033c0038033b0055033a00380339005503380038
033700550336003803350055033400380333005503230038032200550321
003803200055002b03400001006b03400001033d003803220055006b033b
00010024033100540331000200240331003403310054033100f403310004
001403270044032700e40327000300040327002403270044032700740327
008403270094032700d4032700f40327000800a403220001003403200001
001403200024032000440320005403200074032000840320000602f9b21e
1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1f
b802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802
f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb2
1e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c
1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb8
02e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802df
b21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d
191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1f
b802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802
d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb2
1d121fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802cab21d19
1fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb8
02c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1
b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d
2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1f
b802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802
b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b2
1c321fb802afb21c331fb802aeb21c331fb802adb21c331fb802acb21c33
1fb802abb21c331fb802aab21c311fb802a9b21c311fb802a8b21c321fb8
02a7b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3
b21c321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c
331fb8029eb21c331fb8029db21c331fb8029cb21c311fb8029bb21c311f
b8029ab21c321fb80299b21c321fb80298b21c321fb80297b21c321fb802
96b21c321fb80295b21c331fb80294b21c331fb80293b21c331fb80292b2
1c331fb80291b21c331fb80290b21c331fb8028fb21c331fb8028eb21c31
1fb8028db21c321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb8
0289b21c321fb80288b21c331fb80287b21c331fb80286b21c331fb80285
b21c331fb80284b21c331fb80283b21c331fb80282b21b341fb80281b21b
341fb80280b21b341fb8027fb21b341fb8027eb21b341fb8027db21b341f
b8027cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b341fb802
78b21b341fb80277b21b341fb80276b21b341fb80275b21b341fb80274b2
1b341fb80273b21b341fb80272b21b341fb80271b21b341fb80270b21b34
1fb8026fb21a351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8
026bb21a351fb8026ab21a351fb80269b21a351fb80268b21a351fb80267
b21a351fb80266b21a351fb80265b21a351fb80264b21a351fb80263b21a
351fb80262b21a351fb80261b21a351fb80260b21a351fb8025fb21a351f
b8025eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a351fb802
5ab21a351fb80259b219371fb80258b219371fb80257b219371fb80256b2
19371fb80255b219371fb80254b219371fb80253b219371fb80252b21937
1fb80251b219371fb80250b219371fb8024fb219371fb8024eb219371fb8
024db219371fb8024cb219371fb8024bb219371fb8024ab219371fb80249
b219371fb80248b219371fb80247b219371fb80246b219371fb80245b219
371fb80244b219371fb80243b219371fb80242b219371fb80241b219371f
b80240b219371fb8023fb219371fb8023eb219371fb8023db219371fb802
3cb219371fb8023bb219371fb8023ab219371fb80239b218391fb80238b2
18391fb80237b218391fb80236b218391fb80235b218391fb80234b21839
1fb80233b218391fb80232b218391fb80231b218391fb80230b218391fb8
0301b2182e1fb8022fb218391fb8022eb218391fb8022db218391fb8022c
b218391fb8022bb218391fb8022ab218391fb80229b218391fb80228b218
391fb80227b218391fb80226b218391fb80225b2173b1fb80224b2173b1f
b80223b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb802
1fb2173b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2
173b1fb8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b
1fb80216b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb8
0212b2173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020e
b2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab217
3b1fb80209b217321fb80208b217321fb80207b2173b1fb80206b2173b1f
b80205b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb802
01b2173b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2
173b1fb801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b
1fb801f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb8
01f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0
b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb217
3b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1f
b801e7b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801
e3b216371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb2
16441fb801deb216441fb801ddb216441fb801dcb216451fb801dbb21646
1fb801dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb8
01d6b216381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2
b216441fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216
461fb801cdb216461fb801ccb216461fb801cbb216431fb801cab216231f
b801c9b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801
c5b216421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b2
16461fb801c0b216461fb801bfb216461fb801beb216461fb801bdb21646
1fb801bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb8
01b8b216421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4
b216441fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216
451fb801afb216451fb801aeb216461fb801adb216461fb801acb216461f
b801abb216461fb801aab216461fb801a9b215341fb801a8b215411fb801
a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b2
15521fb801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f
1fb8019eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8
019ab2154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196
b215501fb80195b215521fb80194b215521fb80193b215521fb80192b215
411fb80191b2154f1fb80190b215501fb8018fb215501fb8018eb215511f
b8018db215521fb8018cb215521fb8018bb215521fb8018ab214581fb801
89b214591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2
145b1fb80184b2145c1fb80183b214591fb80182b2145d1fb8018140af14
5d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561f
b20b561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b
561faa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561f
a30b561fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a
681f980a681f970a681f960a681f950a681f940a681f930a681f920a681f
910a681f9009681f8f09681f8e09681f8d09681f8c09681f410902fc02fa
0056001f02fb02fa0068001f017fb213321fb8017eb212371fb80174b212
371fb80173b211421fb80172b211421fb80171b211421fb80170b211421f
b8016fb211421fb8016eb211421fb8016db211421fb8016cb211421fb801
6bb211421fb8016ab211421fb8013cb211421fb8013bb210421fb8013ab2
10421fb80139b210421fb80138b210421fb80137b210421fb80136b21042
1fb80135b210421fb80134b210421fb80133b210421fb80132b20f451fb8
0131b20f451fb80130b20f451fb80112b20f451fb80111b20f451fb80110
b20f451fb8010fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e
481fb8010bb20e481fb8010ab20e481fb80109b20e481fb80108b20e481f
b80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a
1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda
0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b56
1fba0b561f9d0a681f9c0a681fb80180b213321fb8017ab211401fb80179
b211421fb80178b211421fb80177b211421fb80176b211421fb80175b211
421fb80143b211421fb80142b210421fb80141b210421fb80140b210421f
b8013fb210421fb8013eb210421fb8013db20f451fb80115b20f451fb801
14b20f451fb80113b20f451fb903030302b2401fa4be030200b4030200c4
030200030300b213321fb8017bb213321fb80153b212371fb80152b21140
1fb80151b211401fb80150b211401fb8014fb211401fb8014eb211401fb8
014db211401fb8014cb211401fb8014bb211401fb8014ab211401fb80149
b211401fb80148b211401fb80147b211401fb80146b211401fb80145b211
401fb80144b211401fb80122b211401fb80121b210421fb80120b210421f
b8011fb210421fb8011eb210421fb8011db210421fb8011cb210421fb801
1bb210421fb8011ab210421fb80119b210421fb80118b20f451fb80117b2
0f451fb80116409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e48
1ff80e481ff70e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff1
0d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e
1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc6
0c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b56
1fb40b561fb30b561f9b0a681fb802fdb212371fb8017db212371fb8017c
b212371fb80169b2112e1fb80168b2112e1fb80167b211401fb80166b211
401fb80165b211401fb80164b211401fb80163b211401fb80162b211401f
b80161b211401fb80160b211401fb8015fb211401fb8015eb211401fb801
5db211401fb8015cb211401fb8015bb211401fb8015ab211401fb80159b2
11401fb80158b211401fb80157b211401fb80156b211401fb80155b21140
1fb80154b211401fb8012fb211401fb8012eb210421fb8012db210421fb8
012cb210421fb8012bb210421fb8012ab210421fb80129b210421fb80128
b210421fb80127b210421fb80126b210421fb80125b20f451fb80124b20f
451fb80123b20f451fb80105b20f451fb80104b20f451fb80103b20f451f
b80102b20f451fb80101b20e481fb8010040a20e481fff0e481ffe0e481f
e80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c
4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f83012e1f82488055
81ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb
7d067c487a557bab7a55047a147a020a7948775578ab77550b77010c7648
75555475e475f4750314755475647574759475d475e47507a475b475c475
03b8ffc0401275383b46807590750214757475020075010fb8ffc0402175
0b0e467448725573ab725504723472023bf47201e0720102307201507260
7202b8ffc0b372242846b8ffc0403572161a461072307240720371486f55
70ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d46
6e486d55df6d0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef
02fe40ff016b032e1f6a03251f692e675568ab6755662e645565ab645563
2e6255612e60555f2e5d555eab5d555c2e5a555bab5a55592e5855570325
1f562e545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554c
ab4b554a2e485549ab4855504801472e46554503361f001f01001e01001e
701e801ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a
7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f19
9f19030c7012801202701180110230114011d011e011040011a011020f8f
0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f
0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f
0d038f0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946
ef0aff0a02400a242746ef09ff0902ff0901000301200101000110012001
0308b8ffc0b401151f4603bd0100010000050001019000542b4bb807ff52
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b2
03a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d4259
2b5e73757373742b732b73742b2b73745e732b5e7374757374755e737475
73015e7374737475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b732b2b73
755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b73742b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b0073747373747374732b73742b2b2b2b2b2b2b2b2b732b2b2b
73737373185f5e00000000>
[7703 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 706 115 <00010016fffa04a605140024004eb10102435558b200191ab8024db42419
0c1917b80294400b400d191f5218051252055500183f3f12393f01192f18
d41aed123910dded123930311bb71f5218051252055500183f3f12393f30
3159250e0323222e0427012626363633321e02170133013e033332161606
0703110510243e3228392819110904fe7f0c05193c362e341c0b05013b01
0135040c1d362f2e3313070c2e11150b030104080c110d047b242a150504
0a140ffc1a03e111150c0406172a2300>IAAAAA+Calibri-Bold AddT42Char 
3 3428 272 <00010048ffea032103d60035009bb10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1afd2bd42bed3ffd
2bd4ed012fedc43230311bbc0018011f001f0024ffe8b40b0f014c24b801
1fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b240
094d00183f1afd2bd42bed3ffd2bd4ed30315925140e0623222e0235343e
0233321e0615140623222e0223220615141e0233323e0233321e02032103
0507183a4a572e679f6c374378a462284d43351609050314101126344832
62681a334d33344b38260d090c0704b01a23180f17211a10407db47486c3
803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00>IAAAAA+Calibri-Bold AddT42Char 
3 4036 373 <0001007efffa060903d7005000a9b10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1aed2b3fed2b012fed39d4ed11392fed3930311bb900
10ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d400e
40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1aed2b3fed2b
30315925140e0223222e023511342e022322060711140e0223222e023511
342e022322060711140e0223222e023511343e0233321e02151536363332
1e02173e0333321e021506090c1c302526301d0b112335252d5c360c1d30
2425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a4a93
503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a351d
4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a0f0a
037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>IAAAAA+Calibri-Bold AddT42Char 
3 4422 381 <00020048ffe9040403d700130027006fb10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1aed2b3fed2b012fedd4ed30311bb90019ffe8b40b
0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1aed
2b3fed2b30315901140e0223222e0235343e0233321e0205342e0223220e
0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fefd15
32533f3854361b1631543e3954361a01e972bc884a427eb87672bd874a41
7eb881426f522e294f6f47426f522d294e6f>IAAAAA+Calibri-Bold AddT42Char 
3 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>IAAAAA+Calibri-Bold AddT42Char 
IAAAAA+Calibri-Bold /CharStrings get begin
/V 115 def
/c 272 def
/m 373 def
/o 381 def
end
IAAAAA+Calibri-Bold /Encoding get
dup 86 /V put
dup 99 /c put
dup 109 /m put
dup 111 /o put
pop
end
%ADOEndSubsetFont
/MKLSCM+Calibri-Bold /IAAAAA+Calibri-Bold findfont ct_VMDictPut
/MKLSCM+Calibri-Bold*1 
[86{/.notdef}rp /V 12{/.notdef}rp /c 9{/.notdef}rp /m /.notdef /o 
144{/.notdef}rp]
MKLSCM+Calibri-Bold nf
MKLSCM+Calibri-Bold*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
811.26 203.072 mo
(Vcom)
[10.6759 8.1604 10.6559 0 ]xsh
0 .961578 .907591 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCM+Calibri-Bold gcheck setglobal} if
3 902 121 <00010021fffa04440514002f0078b10102435558bc002202940018002402
50400a2e172f2e182e182e000cb80264b2160b0ab802954011000b402323
0b2952230b111d521155055500183f3f3f1239393f01192f332f1a1810dd
ed10dded1239392f2f12393910ed10ed30311b400b2952230b111d521155
055500183f3f3f1239393f303159251616060623222e022703030e032322
2626363701012626363633321e021713133e03333216160607010427120b
183f382f361f0e05f3f2060e1f372d3439140c130136fee0120d173e392f
37200d06e3dd060d1d332d323a160b11fee063232a16060409100c01d3fe
2d0c10090406162a2302350213242b15050409100cfe5401ac0c10090405
162a24fdf000>MKLSCM+Calibri-Bold AddT42Char 
MKLSCM+Calibri-Bold /CharStrings get begin
/X 121 def
end
MKLSCM+Calibri-Bold /Encoding get
dup 88 /X put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCM+Calibri-Bold*1 
[86{/.notdef}rp /V /.notdef /X 10{/.notdef}rp /c 9{/.notdef}rp /m 
/.notdef /o 144{/.notdef}rp]
MKLSCM+Calibri-Bold nf
MKLSCM+Calibri-Bold*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
811.26 238.651 mo
(VX)
[11.7641 0 ]xsh
gsave
29.4467 428.394 mo
877.418 428.394 li
877.418 21.4485 li
29.4466 21.4485 li
cp
eclp
0 .302953 .905394 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCM+Calibri-Bold gcheck setglobal} if
3 2958 258 <00020047ffe9037603d7003300400127b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1aed2b3fed2b2b12392f5f
5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed323930311b
400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e41
2ab80118401be02201037d228d2202402250226022030f221f22020c0422
22041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe8400910014d
3de4400c4d0400182f3f1aed2b3fed2b2b12392f5f5e5d5d5d5f5ded1112
392f2b5d71ed5d7130315925140606232226263535060623222e0235343e
02333335342e0223220e0223222e0235343e0433321e02150723220e0215
1416333236370376142b2a2d2911378d56477757303d79b4775711274130
3f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35592e
1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a2617
1f241d231e132955865cda122433213840363400>MKLSCM+Calibri-Bold AddT42Char 
3 4650 393 <0002007efe95040003d7002a003d0094b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1aed2b3f3f3fed
2b121739012fd4ed10ed323930311bb60a363521040530b8ffe8b40b0f01
4c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d00183f
1aed2b3f3f3fed2b12173930315901140e0223222e022711140e0223222e
023511343e0233321e0215153e0333321e0205342e0223220e0207111616
33323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e2919
0a274b4e532f628a5728fefa11294332193133361e35603431452c1501ed
77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a6928
3d29144d86b277396952310f223628feda4349325166>MKLSCM+Calibri-Bold AddT42Char 
3 4972 396 <0001007efffa02bb03d70033006eb10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1aed2b5f5e5d012fc4ed3930311bb9000affe8
b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1aed
2b30315901140e0223222e0223220e020711140e0223222e023511343e02
33321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c0c1d
302525301d0c0a1a291f202a170a233e38381c0d1e20180b050402034b24
2e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a0f0a
6f3241260f0307090a0c152a>MKLSCM+Calibri-Bold AddT42Char 
MKLSCM+Calibri-Bold /CharStrings get begin
/a 258 def
/p 393 def
/r 396 def
end
MKLSCM+Calibri-Bold /Encoding get
dup 97 /a put
dup 112 /p put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCM+Calibri-Bold*1 
[86{/.notdef}rp /V /.notdef /X 8{/.notdef}rp /a /.notdef /c 
9{/.notdef}rp /m /.notdef /o /p /.notdef /r 141{/.notdef}rp]
MKLSCM+Calibri-Bold nf
MKLSCM+Calibri-Bold*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
811.26 274.25 mo
(Vramp)
[11.1711 6.59558 9.72516 16.103 0 ]xsh
grestore
138.169 409.032 mo
147.832 212.725 li
144.531 212.566 li
134.878 408.87 li
cp
.61709 .780514 0 0 cmyk
f
89.0071 409.652 mo
136.478 409.076 li
136.438 405.783 li
88.9671 406.358 li
cp
f
575.809 348.395 mo
572.558 356.868 li
578.47 356.868 li
cp
575.409 345.769 mo
577.88 345.769 li
582.041 358.336 li
582.041 359.03 li
570.347 359.03 li
570.347 358.316 li
cp
.997223 .918425 .647791 .507591 cmyk
ef
%ADOBeginSubsetFont: KAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f328821eb1d000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c7966f51c36ed0000d328000059ac68656164fa71cec900001a800000
00366868656112c4205a00001ab800000024686d7478cd512d7900001adc
000055c06c6f63613295182a0000709c00003b7e6d617870280111e70000
ac1c000000206e616d65030148160000ac3c000015c370726570664ecf85
0000c2000000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00006ff420024ff02000000000000004d53202000c00000
20830639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006fd71b65fc1955f0f3cf5001b080000000000b9e6
983d00000000d630eee4f434ec4a16f118ef000000090002000000000000
00010000063bfe390161175af434fda416f1000100000000000000000000
000000000d22054400be0000000001c3000001c3000004fc000600000000
0000000000000000049a00790000000000000000057e0079000000000000
000000000000044b0079068600750000000000000000048b007900000000
04f8007903f8007000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000387
006904700069000000000000000003f4003f000000000239005300000000
00000000000000000000000000000000043f00690000000000000000034f
00530000000002b500250000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000239005300000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000045dfffe0000000003ef006904aa006a0417006800000000044d
006904e3006802610068000000000000000003b7006805bb006500000000
048300690433006800000000046a006803a4005e04390039000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002610068000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002ab005d034e005d000000000000000002f70041
0000000001c2004e0000000000000000000000000000000000000000032c
005d00000000000000000284004e00000000021c002e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
024700c7000000000000fe850000fe850000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000024900c0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000032500910000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000002bf
002b03ae003103b000330000000000000000000000000000000000000000
0000000000000000043600b10436006f0436008100000000000000000000
00000000000000000000000000000000000002e5002c03e0002903e3003f
00000000000000000000000000000000000000000000000000000000046e
00b2046e0081046e00900000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000342007e03420063034200730000000000000000000000000000
000000000000000000000000000003b00015000000000000000000000000
035b005d000000000000000003f6005d000000000000000000000000031a
005d04af005d00000000000000000357005d000000000399005d02fa0062
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000001c2004e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000004a100b704a10088
04a1009d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000005970014
000000000000000000000000051f008a00000000000000000613008a0000
0000000000000000000004c0008a0731008800000000000000000515008a
000000000583008a047c008a000000000000000000000000000000000000
000000000000000000000000000000000000040200820501008200000000
0000000004780057000000000298006b0000000000000000000000000000
00000000000004ca0082000000000000000003c6006b000000000321003a
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000298006b0000000000000000000000000000000004c200b804c2
009004c200a8000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000060d
002200000000000000000000000005810099000000000000000006800099
0000000000000000000000000517009907af00990000000000000000057b
00990000000005e7009904e200a100000000000000000000000000000000
000000000000000000000000000000000000000004610099056c00990000
00000000000004dd006b0000000002e20080000000000000000000000000
000000000000000005340099000000000000000004210080000000000376
004b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002e200800000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000>
<00000076007600760076011001100110011001bb01bb01bb025102510251
025102b9035b035b035b03d003d00476052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d05c2
065a065a065a0783078307f407f407f407f407f407f408540854085408df
08df09570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980a0e0a0e0a750acb0b540b540bc9
0c3c0c790c790c790cc90d440d440d890df30df30e7f0ef50f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610fba10391039103911271127116f116f116f116f116f116f11c3
11c311c312241224127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d12b212b212c612e512e512e512e512e5
12e512e512e512e512e512e512e512e512e5131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b13451345
134513451345134513451345134513451345134513451345134513451345
13451345134513451345134513451345134513451345134513451345138c
13fc1491149114911491149114911491149114db154b15dc15dc15dc15dc
15dc15dc15dc15dc1626169017131713171317131713171317131713176e
17f8189a189a189a189a189a189a189a189a18a818b618c418c418c418c4
18c418c418c418c418c418c418c418c418c418d718ea18fd18fd18fd18fd
18fd18fd18fd18fd18fd18fd18fd18fd18fd197c1a0d1ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11acf1add1aeb1aeb1aeb1aeb1aeb
1aeb1aeb1aeb1b521b521b521b521bc91bc91bc91c4f1c4f1c4f1c4f1c9b
1d241d241d241d871d871e111e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1ead1ead1ead
1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead
1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead
1ead1ead1ead1ead1ead1ef91f521fb11fb11fb11fb11fb11fb11fb11fb1
1fb11fb11fb11fb11fb11fb1200320032003200320752075207520e420e4
20e420e4212921ab21ab21ab22032203227e22f022f022f022f022f022f0
22f022f022f022f0234123c523c523c5247b247b24c324c324c324c324c3
24c3250e250e250e2571257125c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225fb25fb25fb25fb25fb263b2692
26f926f926f926f926f926f926f926f926f926f926f926f926f926f9274b
274b274b274b27b627b627b6282e282e282e282e287128e428e428e42940
294029bb2a212a212a212a212a212a212a212a212a212a212a662ad52ad5
2ad52b7e2b7e2bc02bc02bc02bc02bc02bc02c052c052c052c5b2c5b2ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd60000000100001dbe005f
0004002e000200020010002f0086000009a41128000200010000002f023a
000000000000000d03880000000000000000000e006c0388000000030000
0000006403f400000003000000010018046e0000000300000002000e0486
0000000300000003002e045800000003000000040018046e000000030000
0005001804940000000300000006001604ac0000000300000007007604c2
0000000300000008002a0402000000030000000900460538000000030000
000a070a057e000000030000000b00560c88000000030000000c00280cde
000000030000000d03880000000000030000000e006c0388000100000000
000000320d060001000000000001000c0d43000100000000000200070d4f
000100000000000300170d380001000000000004000c0d43000100000000
0005000c0d560001000000000006000b0d620001000000000007003b0d6d
000100000000000800150d0d000100000000000900230da8000100000000
000a03850dcb000100000000000b002b1150000100000000000c0014117b
000100000000000d01c4118f000100000000000e00361353000300010409
0000006403f400030001040900010018046e0003000104090002000e0486
0003000104090003002e045800030001040900040018046e000300010409
0005001804940003000104090006001604ac0003000104090007007604c2
0003000104090008002a0402000300010409000900460538000300010409
000a070a057e000300010409000b00560c88000300010409000c00280cde
000300010409000d03880000000300010409000e006c0388004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e00740073002f0064006500660061
0075006c0074002e006100730070007800a9002000320030003100370020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020007200690067
006800740073002000720065007300650072007600650064002e004d0069
00630072006f0073006f00660074003a002000430061006d006200720069
00610020004d0061007400680052006500670075006c0061007200560065
007200730069006f006e00200036002e0039003900430061006d00620072
00690061004d00610074006800430061006d006200720069006100200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002e004d006f006e006f007400790070006500200049
006d006100670069006e006700200061006e00640020005400690072006f
002000540079007000650077006f0072006b007300430061006d00620072
0069006100200068006100730020006200650065006e0020006400650073
00690067006e0065006400200066006f00720020006f006e002d00730063
007200650065006e002000720065006100640069006e006700200061006e
006400200074006f0020006c006f006f006b00200067006f006f00640020
007700680065006e0020007000720069006e007400650064002000610074
00200073006d0061006c006c002000730069007a00650073002e00200049
00740020006800610073002000760065007200790020006500760065006e
002000730070006100630069006e006700200061006e0064002000700072
006f0070006f007200740069006f006e0073002e00200044006900610067
006f006e0061006c00200061006e00640020007600650072007400690063
0061006c00200068006100690072006c0069006e0065007300200061006e
006400200073006500720069006600730020006100720065002000720065
006c00610074006900760065006c00790020007300740072006f006e0067
002c0020007700680069006c006500200068006f00720069007a006f006e
00740061006c002000730065007200690066007300200061007200650020
0073006d0061006c006c00200061006e006400200069006e00740065006e
006400200074006f00200065006d00700068006100730069007a00650020
007300740072006f006b006500200065006e00640069006e006700730020
0072006100740068006500720020007400680061006e0020007300740061
006e00640020006f007500740020007400680065006d00730065006c0076
00650073002e002000540068006900730020007000720069006e00630069
0070006c00650020006900730020006d006f007300740020006e006f0074
00690063006500610062006c006500200069006e00200074006800650020
006900740061006c00690063007300200077006800650072006500200074
006800650020006c006f0077006500720063006100730065002000630068
006100720061006300740065007200730020006100720065002000730075
0062006400750065006400200069006e0020007300740079006c00650020
0074006f0020006200650020006100740020007400680065006900720020
006200650073007400200061007300200065006c0065006d0065006e0074
00730020006f006600200077006f00720064002d0069006d006100670065
0073002e0020005700680065006e002000430061006d0062007200690061
0020006900730020007500730065006400200066006f0072002000630061
007000740069006f006e0073002000610074002000730069007a00650073
0020006f00760065007200200032003000200070006f0069006e0074002c
0020007400680065002000200069006e007400650072002d006300680061
007200610063007400650072002000730070006100630069006e00670020
00730068006f0075006c006400200062006500200073006c006900670068
0074006c00790020007200650064007500630065006400200066006f0072
0020006200650073007400200072006500730075006c00740073002e0020
005400680065002000640065007300690067006e002000690073006e0027
00740020006a00750073007400200069006e00740065006e006400650064
00200066006f007200200062007500730069006e00650073007300200064
006f00630075006d0065006e00740073003a002000540068006500200072
006500670075006c00610072002000770065006900670068007400200068
006100730020006200650065006e00200065007800740065006e00640065
006400200077006900740068002000610020006c00610072006700650020
0073006500740020006f00660020006d00610074006800200061006e0064
00200073006300690065006e00630065002000730079006d0062006f006c
0073002e002000540068006500200047007200650065006b00200061006e
006400200043007900720069006c006c0069006300200068006100730020
006200650065006e002000640065007300690067006e0065006400200075
006e00640065007200200063006c006f0073006500200073007500700065
00720076006900730069006f006e0020006f006600200061006e00200069
006e007400650072006e006100740069006f006e0061006c002000740065
0061006d0020006f006600200065007800700065007200740073002c0020
00770068006f002000610069006d0065006400200074006f002000730065
00740020006100200068006900730074006f0072006900630061006c0020
006e006500770020007300740061006e006400610072006400200069006e
0020006d0075006c00740069002d00730063007200690070007400200074
007900700065002000640065007300690067006e002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f006300740066006f006e007400730068007400740070003a002f
002f007700770077002e0066006f006e00740073002e0063006f006da920
32303137204d6963726f736f667420436f72706f726174696f6e2e20416c
6c207269676874732072657365727665642e4d6963726f736f66743a2043
616d62726961204d617468526567756c617256657273696f6e20362e3939
43616d627269614d61746843616d6272696120697320612074726164656d
61726b206f6620746865204d6963726f736f66742067726f7570206f6620
636f6d70616e6965732e4d6f6e6f7479706520496d6167696e6720616e64
205469726f2054797065776f726b7343616d627269612068617320626565
6e2064657369676e656420666f72206f6e2d73637265656e207265616469
6e6720616e6420746f206c6f6f6b20676f6f64207768656e207072696e74
656420617420736d616c6c2073697a65732e204974206861732076657279
206576656e2073706163696e6720616e642070726f706f7274696f6e732e
20446961676f6e616c20616e6420766572746963616c20686169726c696e
657320616e6420736572696673206172652072656c61746976656c792073
74726f6e672c207768696c6520686f72697a6f6e74616c20736572696673
2061726520736d616c6c20616e6420696e74656e6420746f20656d706861
73697a65207374726f6b6520656e64696e67732072617468657220746861
6e207374616e64206f7574207468656d73656c7665732e20546869732070
72696e6369706c65206973206d6f7374206e6f7469636561626c6520696e
20746865206974616c69637320776865726520746865206c6f7765726361
7365206368617261637465727320617265207375626475656420696e2073
74796c6520746f206265206174207468656972206265737420617320656c
656d656e7473206f6620776f72642d696d616765732e205768656e204361
6d62726961206973207573656420666f722063617074696f6e7320617420
73697a6573206f76657220323020706f696e742c207468652020696e7465
722d6368617261637465722073706163696e672073686f756c6420626520
736c696768746c79207265647563656420666f7220626573742072657375
6c74732e205468652064657369676e2069736e2774206a75737420696e74
656e64656420666f7220627573696e65737320646f63756d656e74733a20
54686520726567756c61722077656967687420686173206265656e206578
74656e64656420776974682061206c6172676520736574206f66206d6174
6820616e6420736369656e63652073796d626f6c732e2054686520477265
656b20616e6420437972696c6c696320686173206265656e206465736967
6e656420756e64657220636c6f7365207375706572766973696f6e206f66
20616e20696e7465726e6174696f6e616c207465616d206f662065787065
7274732c2077686f2061696d656420746f20736574206120686973746f72
6963616c206e6577207374616e6461726420696e206d756c74692d736372
69707420747970652064657369676e2e687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f7777772e666f6e74732e636f6d4d6963726f736f66742073
7570706c69656420666f6e742e20596f75206d6179207573652074686973
20666f6e7420746f206372656174652c20646973706c61792c20616e6420
7072696e7420636f6e74656e74206173207065726d697474656420627920
746865206c6963656e7365207465726d73206f72207465726d73206f6620
7573652c206f6620746865204d6963726f736f66742070726f647563742c
20736572766963652c206f7220636f6e74656e7420696e20776869636820
7468697320666f6e742077617320696e636c756465642e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e20416e79206f7468
6572207573652069732070726f686962697465642e687474703a2f2f7777
772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f6e
74732f64656661756c742e6173707800b9002001feb40918014a20b801fa
b40918014a20b801f9b40918014a20b801f8b40918014a20b801f7b40918
014a20b801f6b40918014a20b801f0b40918014a20b801efb40918014a20
b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b801eb
b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b40918
014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a20
b801e0b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1
b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918
014a20b801ccb40918014a20b801a0b40918014a20b8018fb40918014a20
b8018eb40918014a20b8018ab40918014a20b80188b40918014a20b80187
b40918014a20b80186b40918014a20b8015bb40918014a20b8015ab40918
014a20b80159b40918014a20b80158b40918014a20b80154b40918014a20
b80150b40918014a20b8014cb40918014a20b8014bb40918014a20b8014a
b40918014a20b80136b40918014a20b80130b40918014a20b8012fb40918
014a20b8012db40918014a20b8012cb40918014a20b80109b40918014a20
b80107b40918014a20b8010540ff0918014a20f40918014a20f20918014a
20f10918014a20f00918014a20ef0918014a20ed0918014a20ec0918014a
20ea0918014a20e50918014a20e40918014a20e30918014a20e10918014a
20de0918014a20da0918014a20d80918014a20d30918014a20cd0918014a
20cc0918014a20ca0918014a20c90918014a20c80918014a20c60918014a
20c40918014a20c20918014a20c00918014a20bf0918014a20bd0918014a
20b30918014a20b10918014a20af0918014a20a50918014a20a40918014a
20a00918014a208e0918014a208d0918014a208c0918014a208b0918014a
208a0918014a20890918014a20850918014a20840918014a208309180140
3e4a20800918014a207f0918014a207e0918014a207d0918014a20620918
014a20510918014a20500918014a20480918014a20420918014a200e0918
014a0f41630441001f0441002f0441003f0441004f0441005f0441006f04
41007f0441008f0441009f044100af044100bf044100cf0441000d005f03
ea0001008003f4009003f400a003f400b003f400c003f400d003f400e003
f400f003f40008002f0433003f0433004f0433005f0433006f0433007f04
33008f0433009f043300af043300bf0433000a001f0434002f0434003f04
34004f0434005f0434006f0434007f0434000700cf042300df042300ef04
230003000f0423001f0423003f0423005f0423009f0423402305f0e201b0
fdc0fd02c0fdd0fde0fdf0fd04d0fde0fdf0fd03c0ffd0ffe0fff0ff0470
410a0425000100c0042500d0042500e0042500f00425400c04e0bef0be02
e0bef0be020f41110421003f04210002001002580001000f025800e00258
0002000f040a0001000f0408b4010f26010f411b04070001000f04060001
007f02170001000f029c001f029c002f029c003f029c004f029c005f029c
000600df029c00ef029c00ff029c405303dfe016171cd4d516171c7b7c16
1b7b7c19d1d216171c767716171c6d7016171c6c6f16171c6b6e161b6b6e
7f721a747514151c676a14151c666914151c6568141b656885711a197316
7a431921794319211941310292009902920002001c0292002c0292000202
99029a029b000c028d028e028f000c028a028b028c000c001b0299008b02
990002000f0299009f029900bb029900db0299000402a5028b02a7000d02
9f029a02a1000d029c028e029e000dffe8028eb2142339b9ffe8029ab214
2339411a0282027d0008002b0281027c0005002b027e027a0004002b027d
027a0004002b027a02570005002b027702670005002b02670257b2052b20
b80270b21b2039bd027202570004002b026e0257b2042b20b80257b33133
3909414102710019027100aa025700b8025700040069027100da025700e8
02570003028402790006002b028002790004002b027f02790008002b027b
02790008002b027902560006002b027802660000002b027602660008002b
027502660008002b027302660008002b026602560006002b027402560000
002b027302560000002b026f0256b2072b29415002560001008602560001
025d025e025f000c025102520253000c024e024f0250000c000b024e000b
0251000a025d003b024e00590251007602510075025d009b024e00b5025d
00d9024e000a0269024f026b000d0263025e0265000d026002520262000d
0269003c0263003c0260003c025d003c0251003c024e003c0244023c0005
002b024302110002002b0240023c0005002b023e02110004002b023d0211
b2042b464115023c00010046023c00c6023c0002023b02110007002b0239
02110006002b023702110004002b02210211b2072b20b80233b213163941
16022f02110004002b022e02110004002b022d02110005002b022c021100
04002b022b02110004002b022a0211b2052b474142021100010005021100
a502110002003b0233004b02330064021100740211000402420210000700
2b024102100005002b023f02100002002b023a02100007002b0238021000
07002b023602100007002b023502100007002b022002100007002b023402
100005002b023102100005002b023002100007002b022902100007002b02
280210b2072b8a416e02100001001a021000b90232000202170218021900
0c020b020c020d000c02080209020a000c000b0208000b020b000a021700
3b02080059020b0076020b00750217009b020800b5021700d90208000a02
2302090225000d021d0218021f000d021a020c021c000d0223003c021d00
3c021a003c0217003c020b003c0208003c0153014d0002002b014e014d00
02002b0156015c0004002b0155015c0004002b0157015c0002002b01da01
d4000a002b01d801d4000a002b01e501e00005002b01e101e00005002b01
e001eb0005002b01ef01eb0002002b01ec01ebb2052b40b801ebb2090a39
b9ffc00104b2313139b9ffc00104b21b2039b8ffc0b4c71f203940b80103
b22c2c39ba010301000100b21f2223b901030100b3c01e1e23ba01030100
0100b21d1d23b901030100b3c01c1c23ba010301000100b21b1b23b90103
0100b3c0141a23b901030100b3800b1323b901030100b340090a23b90102
0101b340508b23b901010100b340508b23410a01020100004f001f010101
00004f001fffc00100b2505539b9ffc00100b323233940b80100b71d1e39
40e81b1b39b8ffc0b4e724253956b80108401301ddd8052b3bd64bd60240
b00b0d39c1c0052bb8ffc040379f131339409c2f30399c9a012b9b9a052b
9a91042ba999042b9992032b40c52c31399291032b889198910209631863
c7630320630d0f39b8fff0b4471f2539cbb8010a401c019895012b379e01
9695022b1897262a3917970110953f4039d99501bc0136012c0003002b01
30b2cd042bb8012fb2cc042bb8012db2cd032bb8012cb2cd042bbc014c01
4a0003002b014ab27f052bb9015b0154b2042b0f41190154001f01540002
018601880002002b018701880004002b018901880004002b0188018f0003
002b018e018f0004002b018fb385052b3f410c01a0000101ce01cc000300
2b01d201cc0006002b01d101ccb2062b40b80107b2323239b80107b2af03
2bb8ffc0b3de1e2039b8ffc04011dc181a39c9ca032bcac8042b40c82122
39b8ffc0b3c8151739b8ffc0b3c6242539b8ffc0b3c6161a39b8ffc04023
bf2d31395051032b40511b1b39e5cc042be4e3032b40e32a2a39cdcc052b
40cc424439b8ffc0b3cc272739b8ffc0b7cc171a39c2ea012bb80109b2da
032bb8ffc04033ea252539dfea0140c41b1d39b3b1052bb1c0052b40c03d
3d39c0af042bd3af052baf7d052b20da121639c5bd01208e01108e01b8ff
c0b38b363839b8ffc0b38b272b39b8ffc040328b171a398c8d052b8d8a04
2b898a052b8a7f052bf4ef032bf2ef052bf180022bf0a0042bef85052b40
ec32343940ec1b1d39b8ffc0b3a0515239b8ffc0b3a0454739b8ffc0b3a0
383c39b8ffc0400ba02c3139dfa001a080022bb8ffc0b394313139b8ffc0
40d480181a39817f012b7e7d052b7d7f052bed7f052bd87f017f85251f88
85012b8785012b8485052b8385052b298539854985036685014685013685
012685011b37151836151535151234150f33150c3215093115063015032f
15002e15f9fa0f20f930f90226270e28270f2a2b0e2c2b0f22230e24230f
1e1f0e201f0f00051005023c3d0e0b3c743c993c030f10110c090a0b0c06
07080c0304050c0001020c0603641f702a010f2a010b0f4b0f020b003b00
44037403ab00db0f060b000b030b0f3b003b0959035b0976039b009b0999
0fd9000cb9010b010c402a0f1b011d0d18071a0d1510170d1204140d2ff9
6ff99ff9a0f9cff9d0f9063ff940f9aff9b0f9e0f90500b8010bb22ff92f
ba010b003f010b403004fb3cf93cf73cf53c2c3c2a3c283c263c243c223c
203c1e3c1b3c183c153c123c0f3c093c063c033c003c035050335401b012
4b004b5442b013014b004b5342b0332b4bb8032052b0322b4bb009505b58
b101018e59b0332bb00288b8010054b00488b8020054b012435a5b58b801
19b101018e851bb900010100b04b60858d592b2b1d42b0644b5358b20380
801d4259b0324b5358b20390901d4259004bb03251b01b23422b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b2b73747573742b
2b2b2b2b2b732b732b2b2b2b2b2bb1282645b02a4561b02c4560442b2b73
2b2b2b2b2b2b2b2b2b2b2b0173737373742b2b2b2b2b742b2b2b2b2b2b2b
742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7475732b2b2b2b2b2b2b2b
732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b2b2b2b732b2b2b012b2b2b2b2b00742b742b2b742b732b2b74742b2b2b
2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b
0173742b2b2b2b2b2b2b2b2b2b2b2b2b007374752b2b2b2b2b2b2b2b2b2b
2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b0173742b2b2b2b2b
2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73742b
2b2b0173742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
b101322b4bb0505242b002435c4bb064524bb01e505b60b01a23424bb0c8
524bb036505bb00e23420073747373737373737374737374737573737475
7373747373737373b100024354b102024354b1060243545b5b58416301fe
006401fa006401f9006401f8006401f7006401f6006401f0006401ef0064
01ee006401ed006401ec006401eb006401e6006401e5006401e4006401e3
006401e2006401e1006401e0006401d3006401d2006401d1006401cf0064
01ce006401cd006401cc006401a00064018f0064018e0064018a00640188
00640187006401860064015b0064015a0064015900640158006401540064
01500064014c0064014b0064014a00640136006401300064012f0064012d
0064012c006401090064010700640105406964f464f264f164f064ef64ed
64ec64ea64e564e464e364e164de64da64d864d364cd64cc64ca64c964c8
64c664c464c264c064bf64bd64b364b164af64a564a464a0648e648d648c
648b648a64896485648464836480647f647e647d64626451645064486442
640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00>
[16037 6921 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 4542 150 <00010025fff002c204b3001c0097b0852b58403117100314201340262f48
13400c0f481310971716020a0f06010c030607400a00a7441b0aee070f13
1409091e07050b851a2fe1393211392fd6cd003fed322b001a1810cd5f5e
5d11393ffdd62b2b1a19cd2b31301b4023141340262f4813400c0f481317
10976c1716020a0f06010c030607401b070aee6c070f00183f2b321a10cd
5f5e5d11393f2bd62b2b19cd303159133e0337331521152111141e023332
363717060623222635112325323e23140b8e0143febd102c382c2846222d
477f44817e94038a08283f5f5bf765fe436173411c211f36453e99a3022b
>KAAAAA+CambriaMath AddT42Char 
2 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>KAAAAA+CambriaMath AddT42Char 
KAAAAA+CambriaMath /CharStrings get begin
/g150 150 def
end
KAAAAA+CambriaMath /Encoding get
dup 116 /g150 put
pop
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath /KAAAAA+CambriaMath findfont ct_VMDictPut
/MKLSCN+CambriaMath*1 
[116{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
582.771 359.114 mo
(t)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
582.771 359.114 mo
(t) false chp
.56571 lw
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
1 /0 /CSD get_res sepcs
.506 sep
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 1718 19 <00020079000004380555001e002b006bb0852b5840251c20032091401c1c
130705080708a644071312a64413290329911303177e24242d1f007f0c2f
e13211392fe1003fed2b2b00182f2b110033111239182f1aed2b31301b40
111c20916c1c1c13070508071329916c130300183f2b2f11331112392f2b
30315925141e02171521353e023511342e02273521321615140e02232227
353332363635342e0223220701a90d1b2e31fe493e2a0d0a17262e01f0ea
e54884b4636f3d7471934e2e5170426332fd3b4629170b31311027484a03
61453f23150d31b3b768a66a2e04533b89715673461d0400>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g19 19 def
end
MKLSCN+CambriaMath /Encoding get
dup 80 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[80{/.notdef}rp /g19 35{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
201.621 145.979 mo
(P)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
201.621 145.979 mo
(P) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 886 11 <000100790000050405550038008ab0852b5840302b0f030f91402b23172b
91303006091503181718a644081712253134032232232322a6442303007f
2c0d0d3a0f2a7f1db8fff0b30f014d1d2f2be13212392f33e1003f2b1100
33111733183f332b110017332b00182f1aed2b31301b40152b0f916c2b06
09150318081712253134032232230300183f331117333f331117332f2b30
315925141e03171521353e0235112111141e02171521353e023511342e02
273521150e0315112111342626273521150e02150490060e142527fe5d37
2c11fdd40915292efe5b3e2a0d0a17262e01a52c27170b022c11283b01a3
382c10fa3a3a2316120a31310e22465301a3fe5d433e24180c3131102748
4a0361453f23150d31310b16214245fe9e01625740221031310e23465200
>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g11 11 def
end
MKLSCN+CambriaMath /Encoding get
dup 72 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[72{/.notdef}rp /g11 7{/.notdef}rp /g19 35{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
212.792 145.979 mo
(H)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
212.792 145.979 mo
(H) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 236 4 <00020006000004e90565001f002200beb0852b58404408092122050b0a20
220e2219182220212203050e051a1f1f240e1713080b2214200a030a9140
0f204f200211032020181201141e03111211a64400160e061b0512221804
003f332f17332b11001733111239182f5f5e5d1aed2b1112003939300118
2f333312392f3333111217391133331087c0c0c087c0c0c0311b4022080b
2214200a916c0f204f200211032020181201141e031100160e061b051222
180400183f332f17331117331112392f5f5e5d2b11123939305921353e02
353426272721070606151416171521353636370133011e02171501210303
1c323118100f25fe2e221a103d3ffe5538532701a19e01541825342dfcb3
01a2be310a182b24224f3181624a4c1f3c380931310970680453fba54e52
2e0b31021c028500>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g4 4 def
end
MKLSCN+CambriaMath /Encoding get
dup 65 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[65{/.notdef}rp /g4 6{/.notdef}rp /g11 7{/.notdef}rp /g19 35{/.notdef}rp /g150 
139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
226.24 145.979 mo
(A)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
226.24 145.979 mo
(A) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 2284 22 <00010070fff003950565003000e1b0852b58400f2f100e15482f2d2f0001
00000b0416b8fff0403c0e154816130018101820188018040e0318181c0b
2424041c2d04030491402d13131c031c91130418a44f170117172820ed0f
0f3028ed07073200a4302fe112392fe112392fe111392f5de1003fed2b00
183f1aed2b1112003911331239182f5f5e5d12392b1112392f5d12392b31
301b400f2f100e15482f2d2f000100000b0416b8fff040230e1548161300
18101820188018040e0318181c0b24241c2d04916c2d13131c916c130400
183f2b3f2b1139113312392f5f5e5d12392b1112392f5d12392b30315913
1e0233323635342626272e02353436363332161711232e02232206061514
1616171e0215140e0223222711d414446c55757d34767975884369cb834c
916d6317465e4b41673c336c6a808d4f4275a3619dcd01375866317a754b
665a3c3a6f824d70a55a101cfef258622730614347625434406e8d5e6991
5b2935011200>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g22 22 def
end
MKLSCN+CambriaMath /Encoding get
dup 83 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[65{/.notdef}rp /g4 6{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 
32{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
238.124 145.979 mo
(S)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
238.124 145.979 mo
(S) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 544 8 <000100790000042a0555002e00ceb0852b58b9000fffc0404b090c480f0a
1f1f17180202090a0a17031240090c48121791400a2e220a9128302223a6
44221803189140222e2da6442e090309912e0311a40f12121801a4020218
2120a41f1f300a187f272fe13212392fe13212392fe112392f33e1003fed
2b2b00182f1aed2b2b2b00182f1afdc62b2b11120039182f1112392f10c6
2b31301bb9000fffc04023090c480f0a1f1f17180202090a1240090c4812
0a17916c0a2218916c222e09916c2e0300183f2b2f2b2f2bc62b1112392f
1112392f10c62b3031590111232e0423211133323636373311232e022323
1121323e0337330321353e023511342e0227350420620f2022293827fec4
d62c32210f5e5e0e222f2fd60137313d2c2217146313fc623e2a0d0a1726
2e0555fed2314a321e0bfdf4193c40fe803c3d1afdbf1129424744fea131
1027484a0361453f23150d31>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g8 8 def
end
MKLSCN+CambriaMath /Encoding get
dup 69 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[65{/.notdef}rp /g4 3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 
2{/.notdef}rp /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
247.731 145.979 mo
(E)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
247.731 145.979 mo
(E) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if

2 0 3 <> MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g3 3 def
end
MKLSCN+CambriaMath /Encoding get
dup 32 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 32{/.notdef}rp /g4 3{/.notdef}rp /g8 2{/.notdef}rp /g11 
7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
259.021 145.979 mo
( )sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
259.021 145.979 mo
( ) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 11814 883 <000100b2000003ce0565001a005fb0852b58401e12161515170806090809
994408170417000e161609060009008a0e0e1c1b1112392fe1c610c61133
2f111239003f2f2b110033111239182f333931301b400b12161515170806
0908170400183f2f11331112392f333930315901141e03171521353e0335
11342623220607270133061502b70d213e5e4dfd1d6f5f32171c1b207657
2c01d4370601053a3b25150b0249490511223e46032b2825423a4d011760
aa00>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g883 883 def
end
MKLSCN+CambriaMath /Encoding get
dup 49 /g883 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 15{/.notdef}rp /g4 3{/.notdef}rp /g8 
2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp /g150 
139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
262.863 145.979 mo
(1)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
262.863 145.979 mo
(1) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
282.338 144.921 mo
(P)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
282.338 144.921 mo
(P) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
293.509 144.921 mo
(H)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
293.509 144.921 mo
(H) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
306.958 144.921 mo
(A)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
306.958 144.921 mo
(A) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
318.842 144.921 mo
(S)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
318.842 144.921 mo
(S) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
328.448 144.921 mo
(E)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
328.448 144.921 mo
(E) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
339.738 144.921 mo
( )sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
339.738 144.921 mo
( ) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 11996 884 <00010081000003c9056500280099b0852b584033201d121209181816081d
16031a169b401d040905401013480528082803289f081919120905070620
8c12122a19280909188e192fe1332f331112392ff1d632cd1112392f002f
ed2b001810c62b333f1aed322b11120039182f113911123931301b401b20
1d1212091818081a1d169b6c1d040905401013480508289f6c0800182f2b
c62b333f2b3211392f113911123930315925323e02373303213536363736
373e02353426262322072335363633321615140e0307060702be313c2415
105511fcc92b9286743338371830634bbb417979d354babe152d4c5c71be
59a00c1c2d2ffedc3069dc95804248695d2f4b7342d0c03933a39b355957
646778c99600>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g884 884 def
end
MKLSCN+CambriaMath /Encoding get
dup 50 /g884 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 14{/.notdef}rp /g4 3{/.notdef}rp 
/g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp 
/g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
343.581 144.921 mo
(2)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
343.581 144.921 mo
(2) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
523.111 151.29 mo
(P)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
523.111 151.29 mo
(P) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
534.282 151.29 mo
(H)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
534.282 151.29 mo
(H) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
547.731 151.29 mo
(A)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
547.731 151.29 mo
(A) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
559.615 151.29 mo
(S)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
559.615 151.29 mo
(S) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
569.221 151.29 mo
(E)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
569.221 151.29 mo
(E) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
580.511 151.29 mo
( )sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
580.511 151.29 mo
( ) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 12272 885 <00010090fff003ca0565003000bbb0852b5840440d0c2526262503259a40
260416269a28300f1a0111031a001a001e2d161e03191e9a401613042d03
012d9b04040c0826262a308e00001a088c2a2a1a128c2121321b8e1a2fe1
12392fe112392fe112392fe112392f1239003fed322b00183f1aed322b11
12003939182f2f5f5e5d2b00182f1aed2b111200393931301b401f0d0c26
259a6c260f1a0111031a001a002d19161e9a6c161301042d9b6c04040018
3f2b323f2b321139392f2f5f5e5d2f2b3939303159133536363332161615
14060607151e031514060623222627353316163332363534262323353e02
353426232206079f74ca5e71aa5a447b623d71583565d09556c753782373
638285b0aa5a87b95a76715e761c043abe373646835b5581602e090b3554
754b74b4682720d4685e8e8b929a5808588a566f78666900>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g885 885 def
end
MKLSCN+CambriaMath /Encoding get
dup 51 /g885 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 
32{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
584.353 151.29 mo
(3)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
584.353 151.29 mo
(3) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
79.3538 272.992 mo
79.3538 385.718 li
76.0527 385.718 li
76.0526 272.992 li
cp
72.7515 274.64 mo
77.7032 264.756 li
82.6549 274.64 li
cp
82.6549 384.071 mo
77.7032 393.954 li
72.7515 384.071 li
cp
.997223 .918425 .647791 .507591 cmyk
f
93.1885 407.291 mo
98.1402 407.292 li
98.1402 408.527 li
93.1885 408.526 li
cp
101.855 407.293 mo
106.806 407.294 li
106.805 408.529 li
101.854 408.528 li
cp
110.519 407.295 mo
115.471 407.296 li
115.471 408.531 li
110.519 408.53 li
cp
119.185 407.296 mo
124.137 407.298 li
124.136 408.533 li
119.184 408.532 li
cp
127.85 407.298 mo
132.807 407.3 li
132.797 408.535 li
127.85 408.534 li
cp
136.518 407.3 mo
141.47 407.301 li
141.47 408.537 li
136.518 408.536 li
cp
145.181 407.302 mo
150.133 407.303 li
150.133 408.539 li
145.181 408.538 li
cp
153.844 407.304 mo
158.796 407.305 li
158.796 408.541 li
153.844 408.54 li
cp
162.517 407.306 mo
167.469 407.307 li
167.459 408.543 li
162.507 408.542 li
cp
171.18 407.308 mo
176.132 407.309 li
176.132 408.545 li
171.18 408.544 li
cp
179.843 407.31 mo
184.795 407.311 li
184.795 408.547 li
179.843 408.546 li
cp
188.506 407.312 mo
193.458 407.313 li
193.458 408.549 li
188.506 408.548 li
cp
197.179 407.314 mo
202.131 407.315 li
202.121 408.551 li
197.169 408.549 li
cp
205.842 407.316 mo
210.794 407.317 li
210.794 408.552 li
205.842 408.551 li
cp
214.505 407.318 mo
219.457 407.319 li
219.457 408.554 li
214.505 408.553 li
cp
223.168 407.32 mo
228.12 407.321 li
228.12 408.556 li
223.168 408.555 li
cp
231.841 407.322 mo
236.793 407.323 li
236.783 408.558 li
231.831 408.557 li
cp
240.504 407.324 mo
245.456 407.325 li
245.456 408.56 li
240.504 408.559 li
cp
249.167 407.326 mo
254.119 407.327 li
254.119 408.562 li
249.167 408.561 li
cp
257.83 407.328 mo
262.782 407.329 li
262.782 408.564 li
257.83 408.563 li
cp
266.503 407.329 mo
271.455 407.331 li
271.445 408.566 li
266.493 408.565 li
cp
275.166 407.331 mo
280.118 407.333 li
280.118 408.568 li
275.166 408.567 li
cp
283.829 407.333 mo
288.781 407.334 li
288.781 408.57 li
283.829 408.569 li
cp
292.492 407.335 mo
297.444 407.336 li
297.444 408.572 li
292.492 408.571 li
cp
301.165 407.337 mo
306.117 407.338 li
306.107 408.574 li
301.155 408.573 li
cp
309.828 407.339 mo
314.78 407.34 li
314.78 408.576 li
309.828 408.575 li
cp
318.491 407.341 mo
323.443 407.342 li
323.443 408.578 li
318.491 408.577 li
cp
327.154 407.343 mo
332.106 407.344 li
332.106 408.58 li
327.154 408.579 li
cp
335.827 407.345 mo
339.238 407.346 li
339.238 408.581 li
335.817 408.581 li
cp
f
37.0623 243.143 mo
42.4101 243.143 li
42.4101 243.782 li
42.075 243.822 41.8269 243.912 41.6658 244.062 cv
41.5048 244.212 41.4237 244.421 41.4237 244.691 cv
41.4237 244.9 41.4438 245.11 41.4818 245.31 cv
41.5208 245.519 41.6018 245.839 41.7239 246.278 cv
43.6385 253.216 li
46.0273 246.308 li
46.1244 246.038 46.2004 245.789 46.2544 245.549 cv
46.3094 245.31 46.3374 245.06 46.3374 244.791 cv
46.3374 244.481 46.2544 244.241 46.0904 244.072 cv
45.9263 243.902 45.6732 243.812 45.3311 243.782 cv
45.3311 243.143 li
49.4995 243.143 li
49.4995 243.782 li
49.2544 243.822 49.0464 243.902 48.8753 244.022 cv
48.7052 244.142 48.5502 244.311 48.4111 244.531 cv
48.2731 244.751 48.11 245.11 47.923 245.619 cv
43.8706 256.391 li
41.6368 256.391 li
38.4452 245.579 li
38.3034 245.09 38.1841 244.751 38.0874 244.551 cv
37.9907 244.351 37.865 244.182 37.7103 244.062 cv
37.5555 243.932 37.3395 243.842 37.0623 243.782 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
58.7277 254.045 mo
58.3666 254.045 58.0795 254.234 57.8664 254.594 cv
57.6533 254.963 57.5253 255.482 57.4833 256.171 cv
59.8251 256.171 li
59.8071 255.462 59.713 254.923 59.544 254.574 cv
59.3749 254.224 59.1028 254.045 58.7277 254.045 cv
cp
58.8407 253.316 mo
59.2669 253.316 59.641 253.366 59.9621 253.466 cv
60.2842 253.566 60.5593 253.695 60.7894 253.875 cv
61.0185 254.055 61.2085 254.264 61.3586 254.514 cv
61.5367 254.803 61.6717 255.143 61.7627 255.532 cv
61.8548 255.912 61.9028 256.381 61.9078 256.93 cv
57.4482 256.93 li
57.4523 257.778 57.6043 258.407 57.9014 258.807 cv
58.1995 259.206 58.6527 259.406 59.2629 259.406 cv
59.619 259.406 59.9401 259.336 60.2262 259.206 cv
60.5123 259.066 60.8214 258.837 61.1545 258.497 cv
61.7247 259.116 li
61.2466 259.625 60.7724 259.975 60.3032 260.184 cv
59.8351 260.404 59.2959 260.504 58.6857 260.504 cv
57.5933 260.504 56.772 260.204 56.2208 259.605 cv
55.6696 259.016 55.3945 258.128 55.3945 256.95 cv
55.3945 256.191 55.5356 255.542 55.8197 254.993 cv
56.1038 254.444 56.5059 254.025 57.0261 253.745 cv
57.5463 253.456 58.1515 253.316 58.8407 253.316 cv
cp
53.4609 253.316 mo
53.747 253.316 54.0471 253.346 54.3612 253.406 cv
54.3612 255.343 li
53.0888 255.343 li
53.0087 255.073 52.9047 254.863 52.7756 254.724 cv
52.6466 254.574 52.4745 254.504 52.2585 254.504 cv
52.1554 254.504 52.0414 254.534 51.9174 254.594 cv
51.7933 254.664 51.6783 254.754 51.5732 254.863 cv
51.4672 254.983 51.3922 255.093 51.3482 255.213 cv
51.3031 255.333 51.2741 255.452 51.2601 255.582 cv
51.2461 255.702 51.2391 255.882 51.2391 256.121 cv
51.2391 258.367 li
51.2391 258.807 51.2551 259.116 51.2881 259.296 cv
51.3211 259.475 51.3862 259.615 51.4852 259.715 cv
51.5832 259.815 51.7493 259.885 51.9844 259.925 cv
51.9844 260.394 li
48.5162 260.394 li
48.5162 259.925 li
48.7413 259.865 48.8973 259.785 48.9843 259.695 cv
49.0714 259.595 49.1294 259.455 49.1604 259.286 cv
49.1904 259.126 49.2064 258.817 49.2064 258.367 cv
49.2064 255.482 li
49.2064 255.143 49.2004 254.883 49.1884 254.714 cv
49.1764 254.554 49.1484 254.414 49.1044 254.314 cv
49.0594 254.214 48.9913 254.135 48.9003 254.075 cv
48.8083 254.005 48.6502 253.955 48.4252 253.905 cv
48.4252 253.426 li
50.3528 253.376 li
51.2391 253.376 li
51.1401 254.434 li
51.2321 254.454 li
51.5742 254.055 51.9254 253.765 52.2865 253.586 cv
52.6476 253.406 53.0397 253.316 53.4609 253.316 cv
cp
67.1496 250.311 mo
67.5527 250.311 67.9118 250.341 68.2259 250.411 cv
68.2259 251.839 li
67.2696 251.839 li
67.1896 251.589 67.1016 251.399 67.0055 251.269 cv
66.9095 251.15 66.7845 251.09 66.6294 251.09 cv
66.4273 251.09 66.2733 251.16 66.1652 251.289 cv
66.0572 251.429 65.9832 251.619 65.9432 251.858 cv
65.9031 252.108 65.8841 252.447 65.8841 252.897 cv
65.8841 253.426 li
67.2416 253.426 li
67.2416 254.304 li
65.8841 254.304 li
65.8841 258.627 li
65.8841 258.986 65.9022 259.226 65.9402 259.376 cv
65.9772 259.515 66.0442 259.635 66.1402 259.715 cv
66.2363 259.805 66.4063 259.875 66.6504 259.925 cv
66.6504 260.394 li
63.1472 260.394 li
63.1472 259.925 li
63.3683 259.865 63.5213 259.795 63.6084 259.715 cv
63.6954 259.635 63.7574 259.525 63.7944 259.376 cv
63.8324 259.236 63.8515 258.986 63.8515 258.627 cv
63.8514 254.304 li
62.9931 254.304 li
62.9931 253.825 li
63.2412 253.785 63.4133 253.735 63.5103 253.685 cv
63.6064 253.635 63.6844 253.546 63.7454 253.426 cv
63.8064 253.316 63.8484 253.126 63.8725 252.877 cv
63.9475 252.028 64.2606 251.399 64.8108 250.96 cv
65.362 250.531 66.1412 250.311 67.1496 250.311 cv
cp
ef
191.507 212.865 mo
196.459 212.875 li
196.449 214.103 li
191.497 214.103 li
cp
200.17 212.875 mo
205.122 212.885 li
205.122 214.123 li
200.17 214.113 li
cp
208.833 212.895 mo
213.785 212.895 li
213.785 214.133 li
208.833 214.123 li
cp
217.496 212.905 mo
222.448 212.915 li
222.448 214.153 li
217.496 214.143 li
cp
226.169 212.915 mo
231.121 212.925 li
231.111 214.163 li
226.159 214.153 li
cp
234.832 212.935 mo
239.784 212.945 li
239.784 214.173 li
234.832 214.173 li
cp
243.495 212.945 mo
248.447 212.955 li
248.447 214.193 li
243.495 214.183 li
cp
252.158 212.965 mo
257.11 212.965 li
257.11 214.203 li
252.158 214.193 li
cp
260.831 212.975 mo
265.783 212.985 li
265.773 214.223 li
260.821 214.213 li
cp
269.494 212.985 mo
274.446 212.995 li
274.446 214.233 li
269.494 214.223 li
cp
278.157 213.005 mo
283.109 213.015 li
283.109 214.243 li
278.157 214.243 li
cp
286.82 213.015 mo
291.772 213.025 li
291.772 214.263 li
286.82 214.253 li
cp
295.493 213.035 mo
300.445 213.035 li
300.435 214.273 li
295.483 214.263 li
cp
304.156 213.045 mo
309.108 213.055 li
309.108 214.293 li
304.156 214.283 li
cp
312.819 213.055 mo
317.771 213.065 li
317.771 214.303 li
312.819 214.293 li
cp
321.482 213.075 mo
326.434 213.085 li
326.434 214.313 li
321.482 214.313 li
cp
330.155 213.085 mo
335.107 213.095 li
335.097 214.333 li
330.145 214.323 li
cp
338.818 213.105 mo
343.77 213.115 li
343.77 214.343 li
338.818 214.333 li
cp
347.481 213.115 mo
352.432 213.125 li
352.432 214.363 li
347.481 214.353 li
cp
356.144 213.135 mo
361.095 213.135 li
361.095 214.372 li
356.144 214.363 li
cp
364.817 213.145 mo
369.768 213.155 li
369.758 214.382 li
364.807 214.382 li
cp
373.48 213.155 mo
378.431 213.165 li
378.431 214.402 li
373.48 214.392 li
cp
382.143 213.175 mo
387.094 213.185 li
387.094 214.412 li
382.143 214.402 li
cp
390.806 213.185 mo
395.757 213.194 li
395.757 214.432 li
390.806 214.422 li
cp
399.479 213.204 mo
404.43 213.204 li
404.42 214.442 li
399.469 214.432 li
cp
408.142 213.214 mo
413.093 213.224 li
413.093 214.462 li
408.142 214.452 li
cp
416.805 213.224 mo
421.756 213.234 li
421.756 214.472 li
416.805 214.462 li
cp
425.468 213.244 mo
430.419 213.254 li
430.419 214.482 li
425.468 214.482 li
cp
434.141 213.254 mo
439.092 213.264 li
439.082 214.502 li
434.131 214.492 li
cp
442.804 213.274 mo
447.755 213.274 li
447.755 214.512 li
442.804 214.502 li
cp
451.466 213.284 mo
456.418 213.294 li
456.418 214.532 li
451.466 214.522 li
cp
460.129 213.294 mo
465.081 213.304 li
465.081 214.542 li
460.129 214.532 li
cp
468.802 213.314 mo
473.754 213.324 li
473.744 214.552 li
468.792 214.552 li
cp
477.465 213.324 mo
482.417 213.334 li
482.417 214.572 li
477.465 214.562 li
cp
486.128 213.344 mo
491.08 213.344 li
491.08 214.582 li
486.128 214.572 li
cp
494.791 213.354 mo
499.743 213.364 li
499.743 214.602 li
494.791 214.592 li
cp
503.464 213.364 mo
508.416 213.374 li
508.406 214.612 li
503.454 214.602 li
cp
512.127 213.384 mo
517.079 213.394 li
517.079 214.622 li
512.127 214.622 li
cp
520.79 213.394 mo
525.742 213.404 li
525.742 214.642 li
520.79 214.632 li
cp
529.453 213.414 mo
534.405 213.414 li
534.405 214.652 li
529.453 214.642 li
cp
538.126 213.424 mo
543.078 213.434 li
543.068 214.672 li
538.116 214.662 li
cp
546.789 213.434 mo
551.741 213.444 li
551.741 214.682 li
546.789 214.672 li
cp
555.452 213.454 mo
560.404 213.464 li
560.404 214.692 li
555.452 214.692 li
cp
564.115 213.464 mo
569.067 213.474 li
569.067 214.712 li
564.115 214.702 li
cp
572.788 213.484 mo
577.74 213.484 li
577.73 214.722 li
572.778 214.712 li
cp
581.451 213.494 mo
586.403 213.504 li
586.403 214.742 li
581.451 214.732 li
cp
590.114 213.514 mo
595.066 213.514 li
595.066 214.752 li
590.114 214.742 li
cp
598.777 213.524 mo
603.729 213.534 li
603.729 214.762 li
598.777 214.762 li
cp
607.45 213.534 mo
612.402 213.544 li
612.392 214.782 li
607.44 214.772 li
cp
616.113 213.554 mo
621.065 213.564 li
621.065 214.792 li
616.113 214.782 li
cp
624.776 213.564 mo
627.807 213.574 li
627.807 214.802 li
624.776 214.802 li
cp
.997223 .918425 .647791 .507591 cmyk
f
92.5883 212.146 mo
97.54 212.146 li
97.54 213.384 li
92.5883 213.384 li
cp
101.253 212.146 mo
106.205 212.146 li
106.205 213.384 li
101.253 213.384 li
cp
109.919 212.146 mo
114.871 212.146 li
114.871 213.384 li
109.919 213.384 li
cp
118.584 212.146 mo
123.536 212.146 li
123.536 213.384 li
118.584 213.384 li
cp
127.25 212.146 mo
132.197 212.146 li
132.197 213.384 li
127.25 213.384 li
cp
135.918 212.146 mo
140.87 212.146 li
140.87 213.384 li
135.918 213.384 li
cp
144.581 212.146 mo
149.533 212.146 li
149.533 213.384 li
144.581 213.384 li
cp
f
543.438 335.248 mo
612.502 335.46 li
612.492 338.753 li
543.428 338.542 li
cp
545.069 341.842 mo
535.175 336.869 li
545.099 331.959 li
cp
610.861 332.159 mo
620.755 337.132 li
610.831 342.042 li
cp
f
88.867 59.1576 mo
195.549 59.1576 li
195.549 23.2489 li
193.898 24.8961 li
301.565 24.8961 li
301.565 21.6017 li
192.247 21.6017 li
192.247 57.5104 li
193.898 55.8632 li
88.867 55.8632 li
cp
f
295.693 21.6017 mo
356.234 21.6017 li
356.234 24.8961 li
295.693 24.8961 li
cp
f
195.219 21.6017 mo
359.945 21.6017 li
359.945 57.5104 li
358.294 55.8632 li
607.2 55.8632 li
607.2 59.1576 li
356.644 59.1576 li
356.644 23.2489 li
358.294 24.8961 li
195.219 24.8961 li
cp
f
607.21 59.1476 mo
790.503 59.0378 li
790.503 55.7434 li
607.2 55.8532 li
cp
f
90.5476 106.587 mo
196.019 106.587 li
196.019 72.6046 li
194.368 74.2518 li
278.377 74.2518 li
278.377 70.9574 li
192.718 70.9574 li
192.718 104.939 li
194.368 103.292 li
90.5476 103.292 li
cp
f
197.619 70.9574 mo
278.507 70.9574 li
278.507 105.039 li
276.857 103.392 li
608.28 103.392 li
608.28 106.686 li
275.206 106.686 li
275.206 72.6046 li
276.857 74.2518 li
197.619 74.2518 li
cp
f
605.289 106.756 mo
790.513 106.477 li
790.503 103.182 li
605.279 103.462 li
cp
f
275.796 21.4819 mo
303.226 21.4819 li
303.226 59.0378 li
275.796 59.0378 li
cp
279.097 57.3906 mo
277.447 55.7434 li
301.575 55.7434 li
299.924 57.3906 li
299.924 23.1291 li
301.575 24.7763 li
277.447 24.7763 li
279.097 23.1291 li
cp
f
300.335 22.1707 mo
276.106 56.003 li
278.797 57.9197 li
303.016 24.0875 li
cp
f
278.817 22.2007 mo
301.415 55.5338 li
298.684 57.3706 li
276.086 24.0475 li
cp
f
59.5449 37.265 mo
64.6227 37.265 li
64.6227 37.9039 li
64.2806 37.9937 64.0465 38.0935 63.9214 38.2133 cv
63.7954 38.3232 63.7064 38.4829 63.6554 38.6725 cv
63.6033 38.8722 63.5783 39.2016 63.5783 39.6808 cv
63.5783 49.2944 li
65.454 49.2944 li
65.8601 49.2944 66.1902 49.2146 66.4453 49.0648 cv
66.7004 48.9151 66.9195 48.6555 67.1035 48.3061 cv
67.2866 47.9467 67.4687 47.3577 67.6497 46.5391 cv
68.9742 46.5391 li
68.7621 50.4424 li
59.5449 50.4424 li
59.5449 49.8036 li
59.8931 49.7137 60.1301 49.6139 60.2562 49.4941 cv
60.3812 49.3743 60.4673 49.2245 60.5123 49.0349 cv
60.5573 48.8352 60.5793 48.4958 60.5793 48.0066 cv
60.5793 39.7008 li
60.5793 39.2116 60.5593 38.8722 60.5173 38.6825 cv
60.4753 38.4929 60.3892 38.3331 60.2602 38.2233 cv
60.1321 38.1035 59.8931 38.0037 59.5449 37.9039 cv
cp
47.7809 37.265 mo
57.3752 37.265 li
57.3752 40.3297 li
56.0497 40.3297 li
55.8367 39.7208 55.6566 39.3115 55.5086 39.0918 cv
55.3595 38.8822 55.1824 38.7125 54.9764 38.5827 cv
54.7703 38.4529 54.4182 38.393 53.922 38.393 cv
51.8143 38.393 li
51.8143 43.0251 li
53.0907 43.0251 li
53.3738 43.0251 53.5969 42.9852 53.758 42.9053 cv
53.919 42.8255 54.0531 42.6957 54.1591 42.506 cv
54.2651 42.3163 54.3672 42.0268 54.4642 41.6375 cv
55.5566 41.6375 li
55.5566 45.5608 li
54.4642 45.5608 li
54.3732 45.1815 54.2731 44.9019 54.1641 44.7022 cv
54.0541 44.5026 53.924 44.3628 53.772 44.283 cv
53.6209 44.2031 53.3938 44.1532 53.0907 44.1532 cv
51.8143 44.1532 li
51.8143 49.3144 li
53.912 49.3144 li
54.1381 49.3144 54.3282 49.2944 54.4832 49.2645 cv
54.6383 49.2345 54.7763 49.1846 54.8993 49.1147 cv
55.0214 49.0448 55.1394 48.955 55.2515 48.8252 cv
55.3645 48.7054 55.4645 48.5757 55.5516 48.4359 cv
55.6386 48.2861 55.7306 48.1064 55.8277 47.8768 cv
55.9237 47.6372 56.0307 47.3178 56.1468 46.9185 cv
57.4712 46.9185 li
57.2882 50.4424 li
47.7809 50.4424 li
47.7809 49.8036 li
48.129 49.7137 48.3661 49.6139 48.4921 49.4941 cv
48.6172 49.3743 48.7032 49.2245 48.7482 49.0349 cv
48.7933 48.8452 48.8153 48.5058 48.8153 48.0166 cv
48.8153 39.7008 li
48.8153 39.2116 48.7952 38.8722 48.7532 38.6825 cv
48.7112 38.4929 48.6252 38.3331 48.4961 38.2233 cv
48.3681 38.1035 48.129 38.0037 47.7809 37.9039 cv
cp
42.308 37.1152 mo
42.8822 37.1152 43.4304 37.1451 43.9526 37.205 cv
44.4748 37.265 45.071 37.3748 45.7412 37.5245 cv
45.7412 40.3297 li
44.4167 40.3297 li
44.2427 39.601 43.9846 39.0719 43.6435 38.7325 cv
43.3014 38.403 42.8082 38.2433 42.163 38.2433 cv
41.5828 38.2433 41.1176 38.393 40.7655 38.6925 cv
40.4144 38.992 40.2383 39.4113 40.2383 39.9304 cv
40.2383 40.2998 40.3113 40.6292 40.4564 40.8987 cv
40.6014 41.1683 40.8445 41.4378 41.1866 41.6974 cv
41.5278 41.9569 42.0249 42.2564 42.6762 42.5959 cv
43.4684 43.0052 44.0926 43.4045 44.5468 43.8038 cv
45.0019 44.2031 45.3371 44.6324 45.5531 45.1016 cv
45.7692 45.5608 45.8773 46.1099 45.8773 46.7288 cv
45.8773 47.5175 45.6932 48.2063 45.3261 48.7853 cv
44.9579 49.3643 44.4228 49.8135 43.7205 50.123 cv
43.0173 50.4424 42.205 50.5922 41.2837 50.5922 cv
40.6255 50.5922 39.9402 50.5523 39.2281 50.4824 cv
38.5156 50.4125 37.8467 50.3027 37.2213 50.1629 cv
37.2213 47.188 li
38.5462 47.188 li
38.7074 47.9567 38.9766 48.5258 39.3538 48.9051 cv
39.7311 49.2745 40.2843 49.4641 41.0126 49.4641 cv
41.6508 49.4641 42.149 49.3044 42.5071 48.9749 cv
42.8642 48.6455 43.0433 48.1763 43.0433 47.5774 cv
43.0433 46.9784 42.8712 46.4892 42.5261 46.0899 cv
42.181 45.7006 41.5828 45.2813 40.7315 44.862 cv
40.0222 44.5126 39.431 44.1532 38.9573 43.7838 cv
38.4833 43.4145 38.1094 42.9852 37.8354 42.496 cv
37.5614 42.0069 37.4243 41.4478 37.4243 40.8189 cv
37.4243 40.0302 37.621 39.3514 38.0144 38.8023 cv
38.4076 38.2433 38.9766 37.824 39.7211 37.5445 cv
40.4664 37.255 41.3287 37.1152 42.308 37.1152 cv
cp
ef
52.9747 92.2111 mo
51.04 97.6418 li
54.5222 97.6418 li
cp
61.1965 89.6854 mo
66.0032 89.6854 li
68.6821 97.6119 li
71.5831 89.6854 li
76.1196 89.6854 li
76.1196 90.3243 li
75.7775 90.4142 75.5454 90.524 75.4234 90.6338 cv
75.3004 90.7436 75.2153 90.9034 75.1663 91.093 cv
75.1183 91.2827 75.0943 91.6121 75.0943 92.1013 cv
75.0943 100.447 li
75.0943 100.836 75.1133 101.146 75.1523 101.375 cv
75.1903 101.605 75.2693 101.775 75.3894 101.895 cv
75.5084 102.014 75.7515 102.124 76.1196 102.224 cv
76.1196 102.863 li
71.1579 102.863 li
71.1579 102.224 li
71.442 102.144 71.6381 102.074 71.7481 102.014 cv
71.8572 101.964 71.9432 101.885 72.0042 101.795 cv
72.0652 101.695 72.1103 101.555 72.1393 101.365 cv
72.1683 101.176 72.1833 100.866 72.1833 100.427 cv
72.1833 95.6952 li
72.1833 95.1761 72.1923 94.5571 72.2123 93.8583 cv
72.2313 93.1495 72.2503 92.6404 72.2703 92.3509 cv
72.0672 92.3509 li
71.9512 92.7303 71.7061 93.429 71.332 94.4373 cv
68.7401 101.405 li
67.0375 101.405 li
64.3106 93.5688 li
64.1495 93.1295 64.0075 92.6903 63.8854 92.251 cv
63.7114 92.251 li
63.7754 93.3092 63.8074 94.5671 63.8074 96.0146 cv
63.8074 100.457 li
63.8074 100.936 63.8304 101.266 63.8754 101.445 cv
63.9205 101.635 64.0105 101.795 64.1465 101.915 cv
64.2816 102.034 64.5167 102.134 64.8518 102.224 cv
64.8518 102.863 li
61.1965 102.863 li
61.1965 102.224 li
61.5446 102.134 61.7817 102.024 61.9078 101.915 cv
62.0328 101.795 62.1188 101.645 62.1638 101.455 cv
62.2089 101.276 62.2309 100.936 62.2309 100.447 cv
62.2309 92.1013 li
62.2309 91.6121 62.2099 91.2727 62.1688 91.093 cv
62.1268 90.9133 62.0448 90.7636 61.9218 90.6538 cv
61.7997 90.534 61.5576 90.4242 61.1965 90.3243 cv
cp
52.5485 89.6155 mo
55.1314 89.6155 li
58.3225 100.427 li
58.4646 100.906 58.5836 101.256 58.6807 101.455 cv
58.7767 101.655 58.9027 101.825 59.0578 101.944 cv
59.2118 102.074 59.4279 102.164 59.706 102.224 cv
59.706 102.863 li
54.3672 102.863 li
54.3672 102.224 li
54.7023 102.184 54.9504 102.094 55.1114 101.944 cv
55.2725 101.795 55.3535 101.585 55.3535 101.316 cv
55.3535 101.116 55.3305 100.896 55.2855 100.647 cv
55.2405 100.407 55.1664 100.098 55.0634 99.7183 cv
54.8023 98.7799 li
50.6729 98.7799 li
50.3538 99.6884 li
50.2628 99.9479 50.1887 100.197 50.1307 100.437 cv
50.0727 100.687 50.0437 100.936 50.0437 101.206 cv
50.0437 101.835 50.3788 102.174 51.05 102.224 cv
51.05 102.863 li
46.9206 102.863 li
46.9206 102.224 li
47.1587 102.194 47.3678 102.114 47.5488 101.974 cv
47.7289 101.825 47.8939 101.635 48.042 101.395 cv
48.1901 101.146 48.3481 100.796 48.5162 100.337 cv
cp
42.308 89.5257 mo
42.8822 89.5257 43.4304 89.5556 43.9526 89.6255 cv
44.4748 89.6854 45.071 89.7953 45.7412 89.945 cv
45.7412 92.7402 li
44.4168 92.7402 li
44.2427 92.0214 43.9846 91.4923 43.6425 91.1529 cv
43.3014 90.8235 42.8082 90.6638 42.163 90.6638 cv
41.5828 90.6638 41.1176 90.8135 40.7655 91.113 cv
40.4144 91.4125 40.2383 91.8318 40.2383 92.3509 cv
40.2383 92.7202 40.3113 93.0397 40.4564 93.3192 cv
40.6014 93.5888 40.8445 93.8583 41.1866 94.1179 cv
41.5278 94.3774 42.0249 94.6769 42.6762 95.0163 cv
43.4684 95.4256 44.0926 95.8249 44.5468 96.2243 cv
45.002 96.6236 45.3371 97.0529 45.5531 97.5121 cv
45.7692 97.9813 45.8773 98.5204 45.8773 99.1393 cv
45.8773 99.9379 45.6932 100.617 45.3261 101.206 cv
44.9579 101.785 44.4228 102.234 43.7205 102.543 cv
43.0173 102.853 42.205 103.013 41.2827 103.013 cv
40.6255 103.013 39.9402 102.973 39.228 102.903 cv
38.5155 102.823 37.8466 102.723 37.2212 102.583 cv
37.2212 99.6085 li
38.5461 99.6085 li
38.7074 100.367 38.9766 100.946 39.3537 101.316 cv
39.7311 101.695 40.2833 101.885 41.0126 101.885 cv
41.6508 101.885 42.149 101.715 42.5061 101.395 cv
42.8642 101.066 43.0433 100.597 43.0433 99.9878 cv
43.0433 99.3988 42.8712 98.9097 42.5261 98.5103 cv
42.181 98.111 41.5828 97.7017 40.7315 97.2825 cv
40.0222 96.933 39.431 96.5737 38.9572 96.2043 cv
38.4833 95.8349 38.1094 95.4057 37.8354 94.9165 cv
37.5613 94.4273 37.4244 93.8683 37.4244 93.2393 cv
37.4244 92.4407 37.6209 91.7719 38.0143 91.2228 cv
38.4076 90.6638 38.9766 90.2445 39.7211 89.955 cv
40.4664 89.6755 41.3287 89.5257 42.308 89.5257 cv
cp
ef
256.51 36.7458 mo
261.881 36.7458 li
261.881 37.3848 li
261.581 37.4147 261.371 37.4846 261.241 37.5844 cv
261.121 37.6942 261.051 37.854 261.051 38.0736 cv
261.051 38.2533 261.111 38.4529 261.211 38.6825 cv
261.321 38.9122 261.541 39.3015 261.871 39.8506 cv
262.762 41.348 li
263.932 39.6309 li
264.192 39.2516 264.362 38.9621 264.452 38.7524 cv
264.542 38.5528 264.582 38.3331 264.582 38.1035 cv
264.582 37.8939 264.512 37.7342 264.372 37.6044 cv
264.232 37.4846 264.032 37.4047 263.782 37.3848 cv
263.782 36.7458 li
267.773 36.7458 li
267.773 37.3947 li
267.593 37.4447 267.413 37.5245 267.243 37.6343 cv
267.073 37.7441 266.883 37.9338 266.663 38.1934 cv
266.443 38.4529 266.093 38.9321 265.613 39.6209 cv
263.522 42.5959 li
266.343 47.2579 li
266.653 47.757 266.903 48.1563 267.103 48.4359 cv
267.293 48.7154 267.463 48.9151 267.613 49.0448 cv
267.763 49.1646 267.923 49.2445 268.094 49.2844 cv
268.094 49.9134 li
262.722 49.9134 li
262.722 49.2844 li
263.002 49.2445 263.212 49.1846 263.342 49.0748 cv
263.482 48.9749 263.552 48.8152 263.552 48.5856 cv
263.552 48.4758 263.532 48.356 263.482 48.2163 cv
263.442 48.0865 263.382 47.9467 263.312 47.807 cv
263.242 47.6672 263.102 47.4276 262.902 47.0882 cv
261.561 44.8819 li
259.981 47.208 li
259.861 47.3877 259.751 47.5674 259.671 47.7171 cv
259.591 47.8669 259.531 48.0166 259.501 48.1464 cv
259.461 48.2662 259.451 48.4259 259.451 48.5956 cv
259.451 48.7653 259.521 48.925 259.661 49.0448 cv
259.791 49.1746 259.991 49.2545 260.251 49.2844 cv
260.251 49.9134 li
256.249 49.9134 li
256.249 49.2844 li
256.54 49.1946 256.82 49.0249 257.08 48.7753 cv
257.34 48.5357 257.74 48.0266 258.28 47.2479 cv
260.801 43.6341 li
258.37 39.591 li
258.1 39.1517 257.87 38.7924 257.68 38.5028 cv
257.49 38.2133 257.33 37.9937 257.21 37.834 cv
257.08 37.6842 256.96 37.5844 256.86 37.5146 cv
256.76 37.4546 256.64 37.4047 256.51 37.3848 cv
cp
243.865 36.7458 mo
255.249 36.7458 li
255.249 40.1301 li
253.919 40.1301 li
253.789 39.6409 253.669 39.2715 253.569 39.002 cv
253.469 38.7424 253.348 38.5328 253.198 38.3631 cv
253.048 38.1934 252.878 38.0636 252.678 37.9837 cv
252.478 37.9138 252.178 37.8739 251.758 37.8739 cv
251.058 37.8739 li
251.058 47.4975 li
251.058 47.9966 251.088 48.346 251.138 48.5457 cv
251.188 48.7354 251.288 48.8951 251.438 49.0149 cv
251.588 49.1347 251.858 49.2245 252.228 49.2844 cv
252.228 49.9134 li
246.886 49.9134 li
246.886 49.2844 li
247.156 49.2345 247.376 49.1746 247.536 49.1047 cv
247.697 49.0249 247.807 48.925 247.887 48.7853 cv
247.967 48.6555 248.017 48.4858 248.037 48.2762 cv
248.047 48.0665 248.057 47.807 248.057 47.4975 cv
248.057 37.8739 li
247.276 37.8739 li
246.886 37.8739 246.576 37.9238 246.336 38.0237 cv
246.106 38.1335 245.906 38.3232 245.726 38.6126 cv
245.556 38.8922 245.376 39.4013 245.186 40.1301 cv
243.865 40.1301 li
cp
ef
196.299 161.004 mo
359.685 161.004 li
359.685 122.08 li
358.034 123.727 li
791.783 123.727 li
791.783 120.433 li
356.384 120.433 li
356.384 159.356 li
358.034 157.709 li
196.299 157.709 li
cp
f
752.21 120.313 mo
791.703 120.313 li
791.703 158.648 li
790.053 157 li
797.525 157 li
797.525 160.295 li
788.402 160.295 li
788.402 121.96 li
790.053 123.608 li
752.21 123.608 li
cp
f
48.9523 137.823 mo
52.8687 137.823 li
56.2928 143.763 li
56.5059 144.132 56.783 144.642 57.1241 145.28 cv
57.4662 145.919 57.7693 146.518 58.0334 147.087 cv
58.1885 147.087 li
58.1175 145.55 58.0825 143.863 58.0825 142.046 cv
58.0825 140.249 li
58.0825 139.83 58.0654 139.52 58.0334 139.341 cv
58.0014 139.151 57.9494 139.011 57.8784 138.921 cv
57.8084 138.822 57.7193 138.742 57.6133 138.682 cv
57.5063 138.622 57.3182 138.552 57.0471 138.462 cv
57.0471 137.823 li
60.7034 137.823 li
60.7034 138.462 li
60.4453 138.552 60.2632 138.622 60.1562 138.682 cv
60.0501 138.732 59.9601 138.812 59.8861 138.911 cv
59.811 139.001 59.755 139.151 59.716 139.351 cv
59.678 139.54 59.658 139.85 59.658 140.249 cv
59.658 151.001 li
57.2022 151.001 li
52.8497 143.494 li
52.2635 142.475 51.8313 141.677 51.5542 141.098 cv
51.4672 141.098 li
51.5312 142.485 51.5632 143.943 51.5632 145.48 cv
51.5632 148.585 li
51.5632 149.074 51.5872 149.413 51.6362 149.603 cv
51.6843 149.793 51.7713 149.952 51.8973 150.062 cv
52.0234 150.172 52.2595 150.272 52.6076 150.362 cv
52.6076 151.001 li
48.9523 151.001 li
48.9523 150.362 li
49.2944 150.272 49.5275 150.172 49.6536 150.052 cv
49.7796 149.933 49.8666 149.783 49.9146 149.593 cv
49.9627 149.403 49.9867 149.074 49.9867 148.585 cv
49.9867 140.239 li
49.9867 139.76 49.9657 139.421 49.9247 139.241 cv
49.8826 139.061 49.7956 138.901 49.6636 138.782 cv
49.5305 138.662 49.2944 138.552 48.9523 138.462 cv
cp
37.2173 137.823 mo
46.8116 137.823 li
46.8116 140.898 li
45.4861 140.898 li
45.2731 140.289 45.093 139.87 44.9449 139.66 cv
44.7959 139.44 44.6188 139.271 44.4128 139.141 cv
44.2067 139.021 43.8546 138.961 43.3584 138.961 cv
41.2497 138.961 li
41.2497 143.593 li
42.5271 143.593 li
42.8102 143.593 43.0333 143.553 43.1943 143.474 cv
43.3554 143.394 43.4894 143.254 43.5955 143.064 cv
43.7015 142.885 43.8036 142.595 43.9006 142.196 cv
44.993 142.196 li
44.993 146.119 li
43.9006 146.119 li
43.8096 145.75 43.7095 145.46 43.6005 145.261 cv
43.4904 145.071 43.3604 144.931 43.2083 144.841 cv
43.0573 144.761 42.8302 144.721 42.5271 144.721 cv
41.2497 144.721 li
41.2497 149.873 li
43.3484 149.873 li
43.5745 149.873 43.7645 149.863 43.9196 149.833 cv
44.0746 149.803 44.2127 149.753 44.3357 149.683 cv
44.4578 149.613 44.5758 149.513 44.6879 149.393 cv
44.8009 149.264 44.9009 149.134 44.988 148.994 cv
45.075 148.854 45.167 148.665 45.2641 148.435 cv
45.3601 148.205 45.4671 147.886 45.5832 147.477 cv
46.9076 147.477 li
46.7246 151.001 li
37.2173 151.001 li
37.2173 150.362 li
37.5654 150.272 37.8024 150.172 37.928 150.052 cv
38.0538 149.943 38.1392 149.783 38.1843 149.593 cv
38.2295 149.403 38.252 149.064 38.252 148.575 cv
38.252 140.259 li
38.252 139.77 38.2311 139.43 38.1892 139.241 cv
38.1473 139.051 38.0619 138.901 37.9329 138.782 cv
37.804 138.672 37.5654 138.562 37.2173 138.462 cv
cp
ef
197.669 160.335 mo
195.279 160.335 li
195.279 129.627 li
196.929 131.274 li
90.5476 131.274 li
90.5476 127.98 li
198.58 127.98 li
198.58 158.688 li
196.929 157.04 li
197.669 157.04 li
cp
f
752.21 106.467 mo
793.024 106.467 li
793.024 73.2036 li
791.373 74.8508 li
797.525 74.8508 li
797.525 71.5564 li
789.723 71.5564 li
789.723 104.82 li
791.373 103.172 li
752.21 103.172 li
cp
f
753.77 58.4288 mo
794.584 58.4288 li
794.584 25.1656 li
792.934 26.8128 li
799.086 26.8128 li
799.086 23.5184 li
791.283 23.5184 li
791.283 56.7816 li
792.934 55.1345 li
753.77 55.1345 li
cp
f
358.475 273.831 mo
402.92 273.831 li
402.92 270.537 li
358.475 270.537 li
cp
0 .961578 .907591 0 cmyk
f
400.879 237.773 mo
443.604 237.174 li
443.554 233.879 li
400.829 234.478 li
cp
f
442.864 253.945 mo
486.529 253.945 li
486.529 250.651 li
442.864 250.651 li
cp
f
483.928 263.908 mo
532.554 263.768 li
532.544 260.474 li
483.918 260.613 li
cp
f
532.674 263.918 mo
789.383 242.794 li
789.112 239.51 li
532.404 260.643 li
cp
f
505.205 215.95 mo
421.256 215.85 li
421.266 212.556 li
505.205 212.655 li
cp
.61709 .780514 0 0 cmyk
f
514.088 408.076 mo
503.524 214.293 li
506.816 214.113 li
517.389 407.896 li
cp
f
359.045 337.07 mo
360.685 273.541 li
357.384 273.452 li
355.754 336.986 li
cp
0 .961578 .907591 0 cmyk
f
403.34 272.583 mo
404.44 236.175 li
401.139 236.075 li
400.049 272.493 li
cp
f
441.943 254.364 mo
441.223 234.149 li
444.514 234.029 li
445.244 254.244 li
cp
f
486.529 263.598 mo
487.249 252.398 li
483.958 252.188 li
483.237 263.389 li
cp
f
381.973 283.295 mo
381.973 329.605 li
378.672 329.605 li
378.672 283.295 li
cp
375.37 284.942 mo
380.322 275.059 li
385.274 284.942 li
cp
385.274 327.958 mo
380.322 337.841 li
375.37 327.958 li
cp
.997223 .918425 .647791 .507591 cmyk
f
506.816 271.435 mo
506.816 329.667 li
503.514 329.667 li
503.514 271.435 li
cp
500.213 273.082 mo
505.165 263.199 li
510.117 273.082 li
cp
510.117 328.018 mo
505.165 337.902 li
500.213 328.018 li
cp
f
381.492 243.163 mo
381.492 265.306 li
378.191 265.306 li
378.191 243.163 li
cp
374.89 244.811 mo
379.842 234.927 li
384.794 244.811 li
cp
384.794 263.658 mo
379.842 273.541 li
374.89 263.658 li
cp
f
379.842 235.506 mo
384.794 235.506 li
384.794 236.744 li
379.842 236.744 li
cp
388.515 235.506 mo
393.467 235.506 li
393.467 236.744 li
388.515 236.744 li
cp
397.178 235.506 mo
401.219 235.506 li
401.219 236.744 li
397.178 236.744 li
cp
f
464.681 242.445 mo
464.681 245.998 li
461.38 245.998 li
461.38 242.445 li
cp
458.079 244.092 mo
463.03 234.209 li
467.982 244.092 li
cp
467.982 244.351 mo
463.03 254.234 li
458.079 244.351 li
cp
f
443.584 234.308 mo
448.535 234.308 li
448.535 235.546 li
443.584 235.546 li
cp
452.257 234.308 mo
457.208 234.308 li
457.208 235.546 li
452.257 235.546 li
cp
460.92 234.308 mo
464.961 234.308 li
464.961 235.546 li
460.92 235.546 li
cp
f
346.781 346.045 mo
347.381 398.08 li
344.08 398.118 li
343.479 346.083 li
cp
340.198 347.767 mo
345.03 337.828 li
350.102 347.654 li
cp
350.662 396.395 mo
345.82 406.334 li
340.759 396.508 li
cp
f
337.327 289.085 mo
338.288 289.085 li
338.258 289.564 338.238 290.233 338.238 291.081 cv
338.238 297.341 li
338.238 297.63 338.258 297.85 338.288 297.99 cv
338.318 298.139 338.378 298.259 338.458 298.349 cv
338.548 298.449 338.668 298.519 338.818 298.569 cv
338.978 298.619 339.168 298.659 339.408 298.688 cv
339.638 298.718 339.948 298.738 340.338 298.748 cv
340.338 299.427 li
333.856 299.427 li
333.856 298.748 li
334.416 298.718 334.806 298.688 335.047 298.649 cv
335.287 298.599 335.467 298.539 335.597 298.459 cv
335.717 298.369 335.807 298.249 335.867 298.099 cv
335.927 297.94 335.957 297.69 335.957 297.341 cv
335.957 291.93 li
335.957 291.72 335.917 291.571 335.837 291.481 cv
335.757 291.391 335.657 291.351 335.517 291.351 cv
335.397 291.351 335.217 291.411 334.987 291.521 cv
334.756 291.641 334.386 291.87 333.866 292.23 cv
333.406 291.431 li
cp
ef
336.737 311.007 mo
337.477 311.007 338.078 311.107 338.538 311.307 cv
339.008 311.507 339.338 311.766 339.548 312.106 cv
339.758 312.445 339.858 312.834 339.858 313.284 cv
339.858 313.683 339.788 314.052 339.638 314.392 cv
339.488 314.731 339.238 315.11 338.878 315.55 cv
338.508 315.979 337.898 316.608 337.037 317.417 cv
336.777 317.666 336.457 317.986 336.087 318.395 cv
335.727 318.804 335.437 319.154 335.217 319.443 cv
335.217 319.513 li
337.878 319.513 li
338.208 319.513 338.448 319.493 338.608 319.443 cv
338.768 319.393 338.898 319.313 338.988 319.193 cv
339.078 319.084 339.158 318.904 339.218 318.674 cv
340.078 318.674 li
339.908 321.35 li
333.036 321.35 li
333.036 320.861 li
333.416 319.972 334.206 318.834 335.397 317.446 cv
335.937 316.808 336.347 316.288 336.627 315.879 cv
336.917 315.47 337.127 315.08 337.267 314.721 cv
337.407 314.352 337.477 313.972 337.477 313.583 cv
337.477 313.034 337.357 312.605 337.107 312.295 cv
336.867 311.986 336.527 311.826 336.107 311.826 cv
335.287 311.826 334.766 312.415 334.536 313.583 cv
333.186 313.583 li
333.186 311.816 li
333.996 311.487 334.656 311.277 335.157 311.167 cv
335.657 311.067 336.187 311.007 336.737 311.007 cv
cp
ef
332.176 307.094 mo
341.419 307.094 li
341.419 306.136 li
332.176 306.136 li
cp
ef
344.18 300.825 mo
348.321 300.825 li
348.321 301.324 li
348.061 301.354 347.871 301.424 347.751 301.544 cv
347.621 301.653 347.561 301.813 347.561 302.023 cv
347.561 302.193 347.571 302.352 347.601 302.512 cv
347.631 302.662 347.701 302.921 347.791 303.261 cv
349.281 308.641 li
351.132 303.281 li
351.202 303.071 351.262 302.881 351.302 302.692 cv
351.352 302.512 351.372 302.312 351.372 302.113 cv
351.372 301.863 351.302 301.673 351.182 301.544 cv
351.052 301.414 350.852 301.344 350.592 301.324 cv
350.592 300.825 li
353.823 300.825 li
353.823 301.324 li
353.633 301.354 353.473 301.414 353.343 301.504 cv
353.203 301.594 353.083 301.733 352.983 301.903 cv
352.873 302.073 352.743 302.352 352.603 302.742 cv
349.461 311.097 li
347.721 311.097 li
345.25 302.712 li
345.14 302.342 345.05 302.073 344.97 301.913 cv
344.9 301.763 344.8 301.633 344.68 301.534 cv
344.56 301.434 344.39 301.364 344.18 301.324 cv
cp
ef
356.964 308.681 mo
357.194 308.681 357.424 308.701 357.664 308.751 cv
357.664 310.249 li
356.684 310.249 li
356.614 310.039 356.534 309.879 356.434 309.77 cv
356.334 309.65 356.204 309.6 356.034 309.6 cv
355.954 309.6 355.864 309.62 355.774 309.67 cv
355.674 309.72 355.584 309.79 355.504 309.879 cv
355.424 309.969 355.364 310.059 355.333 310.149 cv
355.293 310.239 355.273 310.339 355.263 310.428 cv
355.253 310.528 355.243 310.668 355.243 310.858 cv
355.243 312.595 li
355.243 312.934 355.263 313.174 355.283 313.314 cv
355.313 313.453 355.364 313.563 355.434 313.633 cv
355.514 313.713 355.644 313.773 355.824 313.803 cv
355.824 314.162 li
353.133 314.162 li
353.133 313.803 li
353.313 313.753 353.433 313.693 353.503 313.623 cv
353.563 313.543 353.613 313.443 353.633 313.314 cv
353.663 313.174 353.673 312.944 353.673 312.595 cv
353.673 310.359 li
353.673 310.089 353.663 309.889 353.653 309.76 cv
353.643 309.64 353.623 309.53 353.593 309.45 cv
353.553 309.38 353.503 309.31 353.433 309.26 cv
353.363 309.211 353.243 309.171 353.063 309.141 cv
353.063 308.761 li
354.563 308.721 li
355.243 308.721 li
355.173 309.54 li
355.243 309.56 li
355.504 309.25 355.774 309.021 356.054 308.881 cv
356.334 308.751 356.644 308.681 356.964 308.681 cv
cp
ef
361.025 309.24 mo
360.745 309.24 360.525 309.39 360.365 309.67 cv
360.195 309.949 360.095 310.359 360.065 310.898 cv
361.876 310.898 li
361.866 310.339 361.796 309.929 361.666 309.65 cv
361.536 309.38 361.316 309.24 361.025 309.24 cv
cp
361.116 308.681 mo
361.446 308.681 361.736 308.721 361.986 308.791 cv
362.236 308.871 362.446 308.971 362.626 309.111 cv
362.806 309.25 362.956 309.41 363.066 309.6 cv
363.206 309.829 363.306 310.099 363.386 310.388 cv
363.456 310.688 363.486 311.057 363.496 311.477 cv
360.035 311.477 li
360.045 312.135 360.155 312.625 360.385 312.934 cv
360.615 313.244 360.975 313.393 361.446 313.393 cv
361.716 313.393 361.966 313.343 362.186 313.244 cv
362.416 313.134 362.656 312.954 362.906 312.695 cv
363.356 313.174 li
362.976 313.563 362.616 313.843 362.246 314.002 cv
361.886 314.172 361.466 314.252 360.995 314.252 cv
360.145 314.252 359.515 314.022 359.085 313.553 cv
358.655 313.094 358.445 312.405 358.445 311.497 cv
358.445 310.908 358.555 310.398 358.775 309.979 cv
358.995 309.55 359.305 309.23 359.715 309.011 cv
360.115 308.791 360.585 308.681 361.116 308.681 cv
cp
367.628 306.355 mo
367.948 306.355 368.218 306.375 368.468 306.425 cv
368.468 307.533 li
367.728 307.533 li
367.658 307.334 367.598 307.194 367.518 307.094 cv
367.448 307.004 367.348 306.954 367.228 306.954 cv
367.068 306.954 366.947 307.004 366.867 307.114 cv
366.787 307.214 366.727 307.364 366.697 307.553 cv
366.667 307.743 366.647 308.013 366.647 308.352 cv
366.647 308.761 li
367.698 308.761 li
367.698 309.45 li
366.647 309.45 li
366.647 312.794 li
366.647 313.074 366.667 313.264 366.697 313.373 cv
366.727 313.483 366.777 313.573 366.847 313.643 cv
366.927 313.703 367.058 313.763 367.248 313.803 cv
367.248 314.162 li
364.527 314.162 li
364.527 313.803 li
364.697 313.753 364.817 313.693 364.887 313.633 cv
364.957 313.573 365.007 313.483 365.027 313.373 cv
365.057 313.264 365.077 313.074 365.077 312.794 cv
365.077 309.45 li
364.407 309.45 li
364.407 309.071 li
364.607 309.041 364.737 309.011 364.807 308.961 cv
364.887 308.921 364.947 308.861 364.997 308.761 cv
365.037 308.671 365.077 308.532 365.087 308.332 cv
365.147 307.683 365.387 307.194 365.817 306.855 cv
366.247 306.515 366.847 306.355 367.628 306.355 cv
cp
ef
335.367 229.097 mo
336.327 229.097 li
336.297 229.577 336.287 230.235 336.287 231.084 cv
336.287 237.343 li
336.287 237.633 336.297 237.852 336.337 238.002 cv
336.367 238.152 336.427 238.272 336.507 238.362 cv
336.587 238.451 336.707 238.531 336.857 238.581 cv
337.017 238.631 337.207 238.671 337.447 238.701 cv
337.677 238.731 337.988 238.741 338.378 238.751 cv
338.378 239.44 li
331.905 239.44 li
331.905 238.751 li
332.456 238.731 332.856 238.701 333.096 238.651 cv
333.326 238.611 333.506 238.551 333.636 238.461 cv
333.756 238.381 333.856 238.262 333.906 238.102 cv
333.966 237.952 333.996 237.693 333.996 237.343 cv
333.996 231.932 li
333.996 231.733 333.956 231.583 333.876 231.493 cv
333.806 231.403 333.696 231.353 333.556 231.353 cv
333.436 231.353 333.256 231.413 333.036 231.533 cv
332.806 231.643 332.426 231.883 331.905 232.232 cv
331.455 231.443 li
cp
ef
334.676 253.466 mo
332.116 257.319 li
332.116 257.449 li
334.676 257.449 li
334.676 255.732 li
334.676 255.013 334.706 254.264 334.756 253.466 cv
cp
335.207 251.09 mo
336.897 251.09 li
336.897 257.449 li
337.127 257.449 li
337.377 257.449 337.547 257.439 337.647 257.399 cv
337.747 257.369 337.837 257.309 337.908 257.219 cv
337.978 257.129 338.048 256.97 338.118 256.74 cv
338.898 256.74 li
338.808 258.397 li
336.897 258.397 li
336.897 259.505 li
336.897 259.885 336.917 260.144 336.967 260.304 cv
337.007 260.454 337.077 260.564 337.177 260.643 cv
337.267 260.713 337.447 260.793 337.707 260.863 cv
337.707 261.362 li
333.876 261.362 li
333.876 260.863 li
334.136 260.793 334.326 260.713 334.416 260.633 cv
334.516 260.544 334.586 260.424 334.626 260.284 cv
334.656 260.134 334.676 259.875 334.676 259.505 cv
334.676 258.397 li
330.655 258.397 li
330.655 257.589 li
cp
ef
330.225 247.107 mo
339.468 247.107 li
339.468 246.148 li
330.225 246.148 li
cp
ef
342.219 240.837 mo
346.37 240.837 li
346.37 241.326 li
346.11 241.356 345.91 241.436 345.79 241.546 cv
345.66 241.666 345.6 241.826 345.6 242.035 cv
345.6 242.195 345.62 242.365 345.65 242.514 cv
345.68 242.674 345.74 242.924 345.83 243.273 cv
347.321 248.644 li
349.171 243.293 li
349.251 243.083 349.311 242.884 349.351 242.704 cv
349.391 242.514 349.411 242.325 349.411 242.115 cv
349.411 241.876 349.351 241.686 349.221 241.556 cv
349.091 241.426 348.901 241.346 348.631 241.326 cv
348.631 240.837 li
351.862 240.837 li
351.862 241.326 li
351.672 241.356 351.512 241.426 351.382 241.516 cv
351.252 241.606 351.132 241.736 351.022 241.915 cv
350.912 242.085 350.792 242.365 350.642 242.754 cv
347.501 251.11 li
345.77 251.11 li
343.289 242.724 li
343.179 242.345 343.089 242.085 343.009 241.925 cv
342.939 241.766 342.839 241.646 342.719 241.546 cv
342.599 241.446 342.429 241.376 342.219 241.326 cv
cp
ef
355.013 248.684 mo
355.233 248.684 355.464 248.714 355.714 248.764 cv
355.714 250.261 li
354.723 250.261 li
354.663 250.052 354.583 249.892 354.483 249.772 cv
354.383 249.662 354.243 249.612 354.083 249.612 cv
354.003 249.612 353.913 249.632 353.813 249.682 cv
353.723 249.732 353.633 249.802 353.553 249.892 cv
353.463 249.982 353.413 250.072 353.373 250.161 cv
353.343 250.251 353.313 250.341 353.303 250.441 cv
353.293 250.531 353.293 250.68 353.293 250.86 cv
353.293 252.597 li
353.293 252.947 353.303 253.186 353.323 253.326 cv
353.353 253.466 353.403 253.566 353.483 253.645 cv
353.553 253.725 353.683 253.785 353.863 253.815 cv
353.863 254.174 li
351.182 254.174 li
351.182 253.815 li
351.352 253.765 351.472 253.705 351.542 253.625 cv
351.612 253.556 351.652 253.446 351.682 253.316 cv
351.702 253.186 351.712 252.947 351.712 252.607 cv
351.712 250.371 li
351.712 250.101 351.712 249.902 351.702 249.772 cv
351.692 249.642 351.672 249.542 351.632 249.463 cv
351.602 249.383 351.552 249.323 351.472 249.273 cv
351.402 249.223 351.282 249.183 351.112 249.143 cv
351.112 248.774 li
352.603 248.734 li
353.293 248.734 li
353.213 249.552 li
353.283 249.572 li
353.553 249.253 353.823 249.033 354.103 248.894 cv
354.383 248.754 354.683 248.684 355.013 248.684 cv
cp
ef
359.075 249.253 mo
358.795 249.253 358.575 249.393 358.405 249.682 cv
358.244 249.962 358.144 250.371 358.104 250.9 cv
359.925 250.9 li
359.905 250.351 359.835 249.932 359.705 249.662 cv
359.575 249.393 359.365 249.253 359.075 249.253 cv
cp
359.165 248.684 mo
359.495 248.684 359.785 248.724 360.025 248.804 cv
360.275 248.884 360.495 248.983 360.665 249.123 cv
360.845 249.253 360.995 249.423 361.116 249.612 cv
361.246 249.842 361.356 250.101 361.426 250.401 cv
361.496 250.7 361.536 251.06 361.536 251.489 cv
358.084 251.489 li
358.084 252.148 358.204 252.627 358.435 252.937 cv
358.665 253.246 359.015 253.406 359.485 253.406 cv
359.765 253.406 360.015 253.356 360.235 253.246 cv
360.455 253.146 360.695 252.967 360.955 252.707 cv
361.396 253.186 li
361.025 253.576 360.655 253.855 360.295 254.015 cv
359.935 254.174 359.515 254.254 359.045 254.254 cv
358.194 254.254 357.554 254.025 357.134 253.566 cv
356.704 253.106 356.484 252.418 356.484 251.509 cv
356.484 250.92 356.594 250.411 356.814 249.982 cv
357.034 249.562 357.354 249.233 357.754 249.013 cv
358.154 248.794 358.625 248.684 359.165 248.684 cv
cp
365.677 246.358 mo
365.987 246.358 366.267 246.388 366.507 246.438 cv
366.507 247.546 li
365.767 247.546 li
365.707 247.346 365.637 247.196 365.567 247.107 cv
365.487 247.007 365.387 246.967 365.267 246.967 cv
365.117 246.967 364.997 247.017 364.907 247.117 cv
364.827 247.226 364.767 247.366 364.737 247.556 cv
364.707 247.745 364.697 248.015 364.697 248.364 cv
364.697 248.774 li
365.747 248.774 li
365.747 249.453 li
364.697 249.453 li
364.697 252.807 li
364.697 253.076 364.707 253.266 364.737 253.386 cv
364.767 253.496 364.817 253.586 364.897 253.645 cv
364.967 253.715 365.097 253.765 365.287 253.815 cv
365.287 254.174 li
362.576 254.174 li
362.576 253.815 li
362.746 253.765 362.866 253.705 362.926 253.645 cv
362.996 253.586 363.046 253.496 363.076 253.386 cv
363.106 253.276 363.116 253.086 363.116 252.807 cv
363.116 249.453 li
362.456 249.453 li
362.456 249.083 li
362.646 249.053 362.776 249.013 362.856 248.973 cv
362.926 248.933 362.986 248.864 363.036 248.774 cv
363.086 248.684 363.116 248.544 363.136 248.344 cv
363.196 247.696 363.436 247.196 363.866 246.867 cv
364.287 246.528 364.897 246.358 365.677 246.358 cv
cp
ef
473.044 218.635 mo
474.004 218.635 li
473.974 219.114 473.954 219.773 473.954 220.622 cv
473.954 226.881 li
473.954 227.171 473.974 227.39 474.004 227.54 cv
474.044 227.68 474.094 227.8 474.184 227.899 cv
474.264 227.989 474.384 228.059 474.534 228.109 cv
474.694 228.169 474.885 228.209 475.125 228.229 cv
475.355 228.259 475.665 228.279 476.055 228.289 cv
476.055 228.968 li
469.573 228.968 li
469.573 228.289 li
470.133 228.269 470.533 228.229 470.763 228.189 cv
471.003 228.149 471.183 228.079 471.313 227.999 cv
471.433 227.909 471.523 227.79 471.583 227.64 cv
471.643 227.48 471.673 227.231 471.673 226.881 cv
471.673 221.47 li
471.673 221.261 471.633 221.121 471.553 221.031 cv
471.473 220.941 471.373 220.891 471.233 220.891 cv
471.113 220.891 470.933 220.951 470.703 221.061 cv
470.483 221.181 470.103 221.41 469.583 221.77 cv
469.123 220.971 li
cp
ef
472.494 246.008 mo
471.984 246.008 471.593 246.178 471.333 246.528 cv
471.073 246.867 470.943 247.376 470.943 248.025 cv
470.943 248.744 471.073 249.273 471.333 249.632 cv
471.603 249.992 471.994 250.171 472.514 250.171 cv
473.014 250.171 473.394 250.002 473.654 249.642 cv
473.914 249.293 474.044 248.794 474.044 248.155 cv
474.044 247.486 473.904 246.957 473.624 246.577 cv
473.344 246.198 472.974 246.008 472.494 246.008 cv
cp
472.534 241.396 mo
472.034 241.396 471.663 241.546 471.413 241.846 cv
471.163 242.145 471.033 242.584 471.033 243.163 cv
471.033 243.822 471.163 244.321 471.423 244.671 cv
471.673 245.01 472.054 245.19 472.544 245.19 cv
473.034 245.19 473.394 245.02 473.644 244.701 cv
473.884 244.371 474.004 243.902 474.004 243.303 cv
474.004 242.684 473.874 242.205 473.624 241.885 cv
473.374 241.556 473.004 241.396 472.534 241.396 cv
cp
472.574 240.558 mo
473.784 240.558 474.704 240.777 475.325 241.217 cv
475.945 241.666 476.255 242.295 476.255 243.103 cv
476.255 243.642 476.115 244.122 475.835 244.521 cv
475.545 244.93 475.125 245.25 474.554 245.499 cv
474.564 245.589 li
475.145 245.819 475.585 246.138 475.885 246.568 cv
476.185 246.987 476.325 247.496 476.325 248.085 cv
476.325 248.674 476.175 249.193 475.855 249.632 cv
475.545 250.072 475.085 250.411 474.494 250.661 cv
473.904 250.9 473.204 251.02 472.414 251.02 cv
471.653 251.02 471.003 250.91 470.433 250.69 cv
469.873 250.461 469.433 250.141 469.123 249.712 cv
468.812 249.283 468.662 248.784 468.662 248.205 cv
468.662 247.646 468.802 247.156 469.093 246.737 cv
469.383 246.328 469.843 245.979 470.453 245.709 cv
470.443 245.619 li
469.333 245.14 468.782 244.341 468.782 243.223 cv
468.782 242.714 468.943 242.255 469.263 241.856 cv
469.573 241.446 470.023 241.127 470.613 240.897 cv
471.193 240.668 471.854 240.558 472.574 240.558 cv
cp
ef
467.892 236.634 mo
477.135 236.634 li
477.135 235.676 li
467.892 235.676 li
cp
ef
479.896 230.375 mo
484.038 230.375 li
484.038 230.864 li
483.778 230.894 483.588 230.964 483.467 231.084 cv
483.337 231.194 483.277 231.363 483.277 231.573 cv
483.277 231.733 483.287 231.893 483.317 232.052 cv
483.347 232.212 483.417 232.462 483.508 232.801 cv
484.998 238.182 li
486.849 232.831 li
486.919 232.621 486.979 232.422 487.029 232.232 cv
487.069 232.052 487.089 231.853 487.089 231.653 cv
487.089 231.403 487.029 231.224 486.899 231.094 cv
486.769 230.964 486.569 230.884 486.308 230.864 cv
486.308 230.375 li
489.54 230.375 li
489.54 230.864 li
489.349 230.894 489.189 230.954 489.059 231.044 cv
488.929 231.144 488.809 231.274 488.699 231.443 cv
488.589 231.613 488.459 231.903 488.319 232.292 cv
485.178 240.648 li
483.438 240.648 li
480.967 232.262 li
480.857 231.883 480.767 231.613 480.687 231.463 cv
480.617 231.304 480.516 231.174 480.396 231.074 cv
480.276 230.984 480.106 230.914 479.896 230.864 cv
cp
ef
492.691 238.222 mo
492.911 238.222 493.141 238.242 493.381 238.292 cv
493.381 239.799 li
492.401 239.799 li
492.331 239.579 492.251 239.42 492.15 239.31 cv
492.05 239.2 491.92 239.14 491.75 239.14 cv
491.67 239.14 491.59 239.17 491.49 239.22 cv
491.39 239.26 491.3 239.33 491.22 239.42 cv
491.14 239.51 491.08 239.599 491.05 239.689 cv
491.01 239.789 490.99 239.879 490.98 239.979 cv
490.97 240.069 490.96 240.208 490.96 240.398 cv
490.96 242.135 li
490.96 242.474 490.98 242.724 491 242.854 cv
491.03 242.994 491.08 243.103 491.15 243.183 cv
491.23 243.263 491.36 243.313 491.54 243.343 cv
491.54 243.702 li
488.849 243.702 li
488.849 243.343 li
489.029 243.303 489.149 243.233 489.219 243.163 cv
489.28 243.083 489.329 242.984 489.349 242.854 cv
489.38 242.724 489.39 242.484 489.39 242.135 cv
489.39 239.899 li
489.39 239.639 489.38 239.44 489.37 239.31 cv
489.37 239.18 489.34 239.08 489.31 239 cv
489.269 238.921 489.219 238.861 489.149 238.811 cv
489.079 238.761 488.959 238.711 488.779 238.681 cv
488.779 238.312 li
490.28 238.262 li
490.96 238.262 li
490.89 239.09 li
490.96 239.1 li
491.22 238.791 491.5 238.571 491.78 238.431 cv
492.06 238.292 492.361 238.222 492.691 238.222 cv
cp
ef
496.742 238.791 mo
496.462 238.791 496.242 238.931 496.082 239.21 cv
495.912 239.5 495.812 239.899 495.782 240.438 cv
497.592 240.438 li
497.582 239.879 497.512 239.47 497.382 239.2 cv
497.252 238.921 497.042 238.791 496.742 238.791 cv
cp
496.832 238.222 mo
497.162 238.222 497.452 238.262 497.702 238.332 cv
497.952 238.411 498.163 238.521 498.343 238.651 cv
498.523 238.791 498.673 238.951 498.783 239.15 cv
498.923 239.38 499.033 239.639 499.103 239.939 cv
499.173 240.228 499.203 240.598 499.213 241.027 cv
495.752 241.027 li
495.762 241.676 495.872 242.165 496.102 242.474 cv
496.342 242.784 496.692 242.944 497.162 242.944 cv
497.432 242.944 497.682 242.884 497.912 242.784 cv
498.133 242.684 498.373 242.494 498.623 242.235 cv
499.073 242.714 li
498.703 243.103 498.333 243.383 497.972 243.553 cv
497.602 243.712 497.182 243.792 496.712 243.792 cv
495.872 243.792 495.232 243.563 494.801 243.103 cv
494.381 242.634 494.161 241.955 494.161 241.037 cv
494.161 240.448 494.271 239.949 494.491 239.52 cv
494.711 239.09 495.021 238.771 495.432 238.551 cv
495.832 238.332 496.302 238.222 496.832 238.222 cv
cp
503.344 235.896 mo
503.664 235.896 503.935 235.916 504.185 235.966 cv
504.185 237.084 li
503.444 237.084 li
503.384 236.884 503.314 236.734 503.234 236.634 cv
503.164 236.545 503.064 236.495 502.944 236.495 cv
502.784 236.495 502.664 236.545 502.584 236.654 cv
502.504 236.754 502.444 236.904 502.414 237.094 cv
502.384 237.283 502.364 237.553 502.364 237.892 cv
502.364 238.312 li
503.424 238.312 li
503.424 238.99 li
502.364 238.99 li
502.364 242.345 li
502.364 242.614 502.384 242.804 502.414 242.914 cv
502.444 243.034 502.494 243.113 502.564 243.183 cv
502.644 243.253 502.774 243.303 502.964 243.343 cv
502.964 243.702 li
500.243 243.702 li
500.243 243.343 li
500.413 243.293 500.533 243.243 500.603 243.173 cv
500.673 243.113 500.723 243.034 500.743 242.924 cv
500.773 242.814 500.793 242.614 500.793 242.345 cv
500.793 238.99 li
500.123 238.99 li
500.123 238.611 li
500.323 238.581 500.453 238.551 500.523 238.511 cv
500.603 238.461 500.663 238.401 500.713 238.312 cv
500.753 238.222 500.793 238.072 500.803 237.882 cv
500.863 237.223 501.114 236.734 501.534 236.395 cv
501.964 236.065 502.564 235.896 503.344 235.896 cv
cp
ef
0 .961578 .907591 0 cmyk
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
413.493 181.918 mo
(S)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
413.493 181.918 mo
(S) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
423.1 181.918 mo
(A)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
423.1 181.918 mo
(A) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 1952 21 <00020079000004f80555002f003c009bb0852b5840351c1b003131000331
914000003b072409060706a6442126071413a644143b033b9114032a1f1f
1b26251b01187e37373e2531017f0d2fe1322f11392fe111391133123911
33003fed2b2b00182f33332b11003333111239182f1aed2b111200393931
301b401a1c1b0031916c00003b073100916c240906212607143b916c1403
00183f2b2f33331133332b1112392f2b39393031590111141e0217152135
3e023511342e0227352132161514060715161617171e0217152126262727
2e0323031133323e0235342626232201aa0b16262efe5a3e2a0d0a17262e
01efeae897973d57355a27383a30feeb2644215828332b31316e71576c5c
374184705a0251feac484121150d31311027484a0361453f23150d31aab3
89c03608195d62a4484c280831357a3fa74c481d0b02a8fdae19467d5b5f
7e42>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g21 21 def
end
MKLSCN+CambriaMath /Encoding get
dup 82 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 /.notdef /g21 
/g22 32{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
435.34 181.918 mo
(R)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
435.34 181.918 mo
(R) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
447.462 181.918 mo
( )sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
447.462 181.918 mo
( ) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 1186 15 <00010079000004100555001e0071b0852b58402700091009020c03090917
000b0ca6440b00030091400b19161716a64417030a09a4080820007f102f
e112392fe132003f2b110033182f1aed2b2b11120039182f5f5e5d31301b
401300091009020c030909170b00916c0b1916170300183f11332f2b1139
2f5f5e5d3031592521323e0437330321353e023511342e02273521150e03
1501a901062b3a29211e1b146514fc7d3e2a0d0a17262e01a52c25180c5c
0a15253c5b5bfe6e311027484a0361453f23150d31310c1320424800>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g15 15 def
end
MKLSCN+CambriaMath /Encoding get
dup 76 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
451.424 181.918 mo
(L)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
451.424 181.918 mo
(L) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 4072 145 <00020069fff003d603cd000d001c0065b0852b58401f0011031195400016
071a031a95071016100b014d16830a200c014d0a0a1e0eb8fff0b50b014d
0e8303b8ffe0b30c014d032f2be12b12392f2be12b003fed2b00183f1aed
2b31301b400c0011956c0016071a956c071000183f2b3f2b303159052226
353436363332161514060601141633323e02353426262322060214d0db73
c880d6dc6ecafe88837a435e3b1a417048798110f5f0a5e46ff9e9a6e471
01facedd416e914f93c25bd2>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g145 145 def
end
MKLSCN+CambriaMath /Encoding get
dup 111 /g145 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 27{/.notdef}rp /g145 4{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
461.981 181.918 mo
(o)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
461.981 181.918 mo
(o) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 3252 137 <0003003ffe4103e203cd0032004100530167b0852b58405742215227270a
082f0836030895c036010f361f362f36030936362f0f5201524000100115
0f10010f101f102f10ef10ff1005230310102f48010032000300ee40320f
194803489540191c2f3f033f952f10270a0c224c24b8ffc0402910014d24
241e2142424c45201013014c451e1e5402092831042a3b8405100f014d05
0515330000554cb8ffe0400b0f13014c4c15155533842a2fe112392fcd2b
12392f1112392f2be112173911392fcd2b1139113311392f2b1239cd3232
003fed2b00183f1aed2b00183f1aed2b110033111239182f5f5e5d715e5d
1acd5d12392f5e5d71ed2b11120039391112393931301b40494221522727
0a2f3608956cc036010f361f362f36030936362f0f52015240001001150f
10010f101f102f10ef10ff1005230310102f48013200ee6c320f1948956c
191c2f3f956c2f1000183f2b3f2b3f2b321112392f5f5e5d715e5d1acd5d
12392f5e5d712b1139391112393930315901270716161514062322270615
14161633333216161514060623222e023534363726263534363726263534
3e023332172101141633323e023534262623220613060615141633323636
35342e0223232203e2b9091f24c9b9533c4c1d4344f06a86396ccc8865a7
7741544d2f364051484b39658a5048470162fd4a666033482d153256385f
641933338f935a81440e27483a95510357070b1f6b3ea3b1153a38252610
426f4a5e935218395d463f6727134a32395f3d2a905c567f532911fed07d
88274459315876377efced2655365a55305a3c1c352a1900>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g137 137 def
end
MKLSCN+CambriaMath /Encoding get
dup 103 /g137 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 19{/.notdef}rp /g137 7{/.notdef}rp /g145 4{/.notdef}rp 
/g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
472.419 181.918 mo
(g)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
472.419 181.918 mo
(g) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 3846 139 <00020053000001e9054400030019008cb0852b58402a17041904a7441915
11aa10100fa744100f02637003010f03df03020f035f03df030303018302
1385020ab8ffe0b30f014d0ab8ffc0b310014d0a2f2b2bc4e110e1002f5d
715ded3f2b001810e53f2b11003331301b401e1704191511aa100f030263
6c7003010f03df03020f035f03df030309030300182f5f5e5d715d2b3fe5
3f113330315901152335033e033511342e02273537331114161617152101
7fb8662721170d0418312de93d102d33fe780544c2c2faed0c1220424601
b4404e2f17083509fd355643230d3100>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g139 139 def
end
MKLSCN+CambriaMath /Encoding get
dup 105 /g139 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 19{/.notdef}rp /g137 /.notdef /g139 5{/.notdef}rp 
/g145 4{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
482.144 181.918 mo
(i)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
482.144 181.918 mo
(i) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MKLSCN+CambriaMath gcheck setglobal} if
2 2650 133 <00010069fff0035203cd002100c6b0852b5840442001300102b00101011f
8013472000121012201203091f12010f120119031240262948120f180f03
0f974018161f06030695401f1010100a1220131323020101230a831b2fe1
11392fcd12392f1a19cd1239182f003f1aed2b00183f1aed2b001810d62b
5f5e5d725e5d1a19ed1a1810cd5d7131301b40312001300102b00101011f
801213476c00121012201203091f12010f12011903124026294812180f97
6c18161f06956c1f1000183f2b3f2bc62b5f5e5d725e5d2b1a10cd5d7130
31590115232e022322060615141e0233323637170e032322263534363633
3216034a7f11324231466c3f183a604745774039334e595733bdc870ca84
528b03a5d1414b1e5ab885558d6438364442383d2913fbed94e57c13>MKLSCN+CambriaMath AddT42Char 
MKLSCN+CambriaMath /CharStrings get begin
/g133 133 def
end
MKLSCN+CambriaMath /Encoding get
dup 99 /g133 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MKLSCN+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 15{/.notdef}rp /g133 3{/.notdef}rp /g137 /.notdef 
/g139 5{/.notdef}rp /g145 4{/.notdef}rp /g150 139{/.notdef}rp]
MKLSCN+CambriaMath nf
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
487.551 181.918 mo
(c)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
487.551 181.918 mo
(c) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
621.215 181.529 mo
(S)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
621.215 181.529 mo
(S) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
630.94 181.529 mo
(S)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
630.94 181.529 mo
(S) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
640.665 181.529 mo
( )sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
640.665 181.529 mo
( ) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
644.745 181.529 mo
(L)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
644.745 181.529 mo
(L) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
655.302 181.529 mo
(o)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
655.302 181.529 mo
(o) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
665.741 181.529 mo
(g)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
665.741 181.529 mo
(g) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
675.466 181.529 mo
(i)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
675.466 181.529 mo
(i) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
680.873 181.529 mo
(c)sh
MKLSCN+CambriaMath*1 [19.8068 3.16129e-7 -2.6362e-6 -19.7662 0 0 ]msf
680.873 181.529 mo
(c) false chp
gsave
[1.00034 1.59661e-8 -1.33141e-7 -.998295 29.3616 428.427 ]ct
@
grestore newpath
521.861 241.346 mo
526.812 241.316 li
526.802 240.089 li
521.851 240.109 li
cp
530.524 241.306 mo
535.475 241.287 li
535.465 240.049 li
530.514 240.069 li
cp
539.187 241.267 mo
544.138 241.247 li
544.138 240.009 li
539.187 240.029 li
cp
547.85 241.237 mo
552.801 241.207 li
552.801 239.979 li
547.85 239.999 li
cp
556.523 241.197 mo
561.474 241.177 li
561.464 239.939 li
556.513 239.959 li
cp
565.186 241.157 mo
570.137 241.137 li
570.127 239.899 li
565.175 239.919 li
cp
573.848 241.127 mo
578.8 241.097 li
578.8 239.869 li
573.848 239.889 li
cp
582.511 241.087 mo
587.463 241.067 li
587.463 239.829 li
582.511 239.849 li
cp
591.184 241.047 mo
596.136 241.027 li
596.126 239.789 li
591.174 239.809 li
cp
599.847 241.017 mo
604.799 240.987 li
604.789 239.759 li
599.837 239.779 li
cp
608.51 240.977 mo
613.462 240.957 li
613.462 239.719 li
608.51 239.739 li
cp
617.173 240.937 mo
622.125 240.917 li
622.125 239.679 li
617.173 239.699 li
cp
625.846 240.907 mo
630.798 240.877 li
630.788 239.649 li
625.836 239.669 li
cp
634.509 240.867 mo
639.461 240.847 li
639.451 239.609 li
634.499 239.629 li
cp
643.172 240.827 mo
648.124 240.807 li
648.124 239.569 li
643.172 239.599 li
cp
651.835 240.797 mo
656.787 240.777 li
656.787 239.54 li
651.835 239.559 li
cp
660.508 240.757 mo
665.46 240.737 li
665.45 239.5 li
660.498 239.52 li
cp
669.171 240.717 mo
674.123 240.698 li
674.113 239.46 li
669.161 239.49 li
cp
677.834 240.688 mo
682.786 240.668 li
682.786 239.43 li
677.834 239.45 li
cp
686.497 240.648 mo
691.449 240.628 li
691.449 239.39 li
686.497 239.41 li
cp
695.17 240.608 mo
700.122 240.588 li
700.112 239.35 li
695.16 239.38 li
cp
703.833 240.578 mo
708.785 240.558 li
708.775 239.32 li
703.823 239.34 li
cp
712.496 240.538 mo
717.448 240.518 li
717.448 239.28 li
712.496 239.3 li
cp
721.159 240.498 mo
726.111 240.478 li
726.111 239.24 li
721.159 239.27 li
cp
729.832 240.468 mo
734.784 240.448 li
734.774 239.21 li
729.822 239.23 li
cp
738.495 240.428 mo
743.447 240.408 li
743.437 239.17 li
738.485 239.19 li
cp
747.158 240.388 mo
752.11 240.368 li
752.1 239.13 li
747.148 239.16 li
cp
755.821 240.358 mo
760.773 240.338 li
760.773 239.1 li
755.821 239.12 li
cp
764.494 240.318 mo
769.436 240.298 li
769.436 239.06 li
764.484 239.08 li
cp
773.157 240.278 mo
778.109 240.258 li
778.099 239.03 li
773.147 239.05 li
cp
781.82 240.248 mo
786.772 240.228 li
786.762 238.99 li
781.81 239.01 li
cp
.997223 .918425 .647791 .507591 cmyk
f
525.662 249.872 mo
525.662 256.62 li
522.361 256.62 li
522.361 249.872 li
cp
519.06 251.519 mo
524.011 241.636 li
528.963 251.519 li
cp
528.963 254.973 mo
524.011 264.856 li
519.06 254.973 li
cp
f
524.942 266.743 mo
525.902 266.743 li
525.872 267.222 525.852 267.891 525.852 268.74 cv
525.852 274.999 li
525.852 275.288 525.872 275.508 525.902 275.648 cv
525.942 275.798 525.992 275.917 526.082 276.007 cv
526.162 276.107 526.282 276.177 526.432 276.227 cv
526.592 276.277 526.782 276.317 527.022 276.347 cv
527.253 276.377 527.563 276.397 527.953 276.407 cv
527.953 277.085 li
521.471 277.085 li
521.471 276.407 li
522.031 276.377 522.431 276.347 522.661 276.307 cv
522.901 276.257 523.081 276.197 523.211 276.117 cv
523.331 276.027 523.421 275.907 523.481 275.758 cv
523.541 275.598 523.571 275.348 523.571 274.999 cv
523.571 269.588 li
523.571 269.379 523.531 269.229 523.451 269.139 cv
523.371 269.049 523.271 269.009 523.131 269.009 cv
523.011 269.009 522.831 269.069 522.601 269.179 cv
522.381 269.299 522.001 269.528 521.481 269.888 cv
521.02 269.089 li
cp
ef
520.75 288.666 mo
521.491 288.666 522.091 288.765 522.551 288.965 cv
523.021 289.165 523.361 289.424 523.561 289.764 cv
523.771 290.103 523.871 290.492 523.871 290.942 cv
523.871 291.341 523.801 291.71 523.651 292.05 cv
523.511 292.389 523.251 292.769 522.891 293.208 cv
522.531 293.637 521.911 294.266 521.05 295.075 cv
520.79 295.324 520.47 295.644 520.11 296.053 cv
519.74 296.462 519.45 296.812 519.23 297.101 cv
519.23 297.171 li
521.891 297.171 li
522.221 297.171 522.461 297.151 522.621 297.101 cv
522.781 297.051 522.911 296.971 523.001 296.852 cv
523.091 296.742 523.171 296.562 523.231 296.332 cv
524.091 296.332 li
523.921 299.008 li
517.049 299.008 li
517.049 298.519 li
517.429 297.63 518.219 296.492 519.41 295.105 cv
519.95 294.466 520.36 293.947 520.65 293.537 cv
520.93 293.128 521.14 292.739 521.28 292.379 cv
521.421 292.01 521.491 291.631 521.491 291.241 cv
521.491 290.692 521.37 290.263 521.12 289.953 cv
520.88 289.644 520.54 289.484 520.12 289.484 cv
519.3 289.484 518.78 290.073 518.549 291.241 cv
517.199 291.241 li
517.199 289.474 li
518.009 289.145 518.67 288.935 519.17 288.825 cv
519.67 288.725 520.2 288.666 520.75 288.666 cv
cp
ef
528.673 288.725 mo
526.812 291.521 li
526.812 291.621 li
528.673 291.621 li
528.673 290.373 li
528.673 289.854 528.693 289.295 528.733 288.725 cv
cp
529.063 286.988 mo
530.284 286.988 li
530.284 291.621 li
530.454 291.621 li
530.634 291.621 530.764 291.601 530.834 291.581 cv
530.904 291.561 530.964 291.511 531.024 291.451 cv
531.074 291.381 531.124 291.271 531.174 291.101 cv
531.744 291.101 li
531.674 292.299 li
530.284 292.299 li
530.284 293.108 li
530.284 293.388 530.304 293.577 530.334 293.687 cv
530.374 293.797 530.424 293.877 530.484 293.937 cv
530.554 293.987 530.684 294.046 530.874 294.096 cv
530.874 294.456 li
528.093 294.456 li
528.093 294.096 li
528.283 294.046 528.413 293.987 528.483 293.927 cv
528.553 293.867 528.603 293.777 528.633 293.677 cv
528.663 293.567 528.673 293.378 528.673 293.108 cv
528.673 292.299 li
525.752 292.299 li
525.752 291.71 li
cp
ef
516.189 283.794 mo
524.472 283.794 li
532.754 283.794 li
532.754 284.752 li
524.472 284.752 li
516.189 284.752 li
cp
ef
535.515 278.483 mo
539.657 278.483 li
539.657 278.982 li
539.397 279.012 539.207 279.082 539.087 279.202 cv
538.957 279.312 538.896 279.471 538.896 279.681 cv
538.896 279.851 538.906 280.01 538.937 280.17 cv
538.967 280.32 539.037 280.579 539.127 280.919 cv
540.617 286.3 li
542.468 280.939 li
542.538 280.729 542.598 280.539 542.648 280.35 cv
542.688 280.17 542.708 279.97 542.708 279.771 cv
542.708 279.521 542.648 279.332 542.518 279.202 cv
542.388 279.072 542.188 279.002 541.928 278.982 cv
541.928 278.483 li
545.159 278.483 li
545.159 278.982 li
544.969 279.012 544.809 279.072 544.678 279.162 cv
544.548 279.252 544.428 279.391 544.318 279.561 cv
544.208 279.731 544.078 280.01 543.938 280.4 cv
540.797 288.755 li
539.057 288.755 li
536.586 280.37 li
536.476 280 536.386 279.731 536.306 279.571 cv
536.236 279.421 536.136 279.292 536.016 279.192 cv
535.895 279.092 535.725 279.022 535.515 278.982 cv
cp
ef
548.31 286.34 mo
548.53 286.34 548.76 286.36 549 286.409 cv
549 287.907 li
548.02 287.907 li
547.96 287.697 547.87 287.538 547.77 287.428 cv
547.669 287.308 547.539 287.258 547.369 287.258 cv
547.289 287.258 547.209 287.278 547.109 287.328 cv
547.009 287.378 546.919 287.448 546.839 287.538 cv
546.759 287.627 546.699 287.717 546.669 287.807 cv
546.629 287.897 546.609 287.997 546.599 288.087 cv
546.589 288.186 546.579 288.326 546.579 288.516 cv
546.579 290.253 li
546.579 290.592 546.599 290.832 546.619 290.972 cv
546.649 291.111 546.699 291.221 546.769 291.291 cv
546.849 291.371 546.979 291.431 547.159 291.461 cv
547.159 291.82 li
544.468 291.82 li
544.468 291.461 li
544.648 291.411 544.768 291.351 544.839 291.281 cv
544.898 291.201 544.949 291.101 544.969 290.972 cv
544.999 290.832 545.009 290.602 545.009 290.253 cv
545.009 288.017 li
545.009 287.747 544.999 287.548 544.999 287.418 cv
544.989 287.298 544.959 287.188 544.929 287.108 cv
544.898 287.038 544.839 286.969 544.768 286.919 cv
544.698 286.869 544.578 286.829 544.398 286.799 cv
544.398 286.419 li
545.899 286.38 li
546.579 286.38 li
546.509 287.198 li
546.579 287.218 li
546.839 286.909 547.119 286.679 547.399 286.539 cv
547.68 286.409 547.98 286.34 548.31 286.34 cv
cp
ef
552.371 286.899 mo
552.091 286.899 551.861 287.048 551.701 287.328 cv
551.531 287.607 551.431 288.017 551.401 288.556 cv
553.221 288.556 li
553.201 287.997 553.131 287.587 553.001 287.308 cv
552.871 287.038 552.661 286.899 552.371 286.899 cv
cp
552.451 286.34 mo
552.781 286.34 553.071 286.38 553.321 286.449 cv
553.572 286.529 553.782 286.629 553.962 286.769 cv
554.142 286.909 554.292 287.068 554.402 287.258 cv
554.542 287.488 554.652 287.757 554.722 288.047 cv
554.792 288.346 554.822 288.716 554.832 289.135 cv
551.371 289.135 li
551.381 289.794 551.491 290.283 551.721 290.592 cv
551.961 290.902 552.311 291.052 552.781 291.052 cv
553.061 291.052 553.301 291.002 553.531 290.902 cv
553.752 290.792 553.992 290.612 554.252 290.353 cv
554.692 290.832 li
554.322 291.221 553.952 291.501 553.591 291.66 cv
553.221 291.83 552.801 291.91 552.331 291.91 cv
551.491 291.91 550.851 291.68 550.42 291.211 cv
550 290.752 549.78 290.063 549.78 289.155 cv
549.78 288.566 549.89 288.057 550.11 287.637 cv
550.33 287.208 550.641 286.889 551.051 286.669 cv
551.451 286.449 551.921 286.34 552.451 286.34 cv
cp
558.963 284.014 mo
559.283 284.014 559.554 284.034 559.804 284.083 cv
559.804 285.192 li
559.063 285.192 li
559.003 284.992 558.933 284.852 558.853 284.752 cv
558.783 284.662 558.683 284.613 558.563 284.613 cv
558.413 284.613 558.293 284.662 558.203 284.772 cv
558.123 284.872 558.063 285.022 558.033 285.211 cv
558.003 285.401 557.983 285.671 557.983 286.01 cv
557.983 286.419 li
559.043 286.419 li
559.043 287.108 li
557.983 287.108 li
557.983 290.453 li
557.983 290.732 558.003 290.922 558.033 291.032 cv
558.063 291.141 558.113 291.231 558.183 291.301 cv
558.263 291.361 558.393 291.421 558.583 291.461 cv
558.583 291.82 li
555.862 291.82 li
555.862 291.461 li
556.032 291.411 556.152 291.351 556.222 291.291 cv
556.292 291.231 556.342 291.141 556.372 291.032 cv
556.392 290.922 556.412 290.732 556.412 290.453 cv
556.412 287.108 li
555.742 287.108 li
555.742 286.729 li
555.942 286.699 556.072 286.669 556.142 286.619 cv
556.222 286.579 556.282 286.519 556.332 286.419 cv
556.372 286.33 556.412 286.19 556.432 285.99 cv
556.483 285.341 556.733 284.852 557.153 284.513 cv
557.583 284.173 558.183 284.014 558.963 284.014 cv
cp
ef
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/MKLSCM+Calibri-Bold*1 uf
/MKLSCM+Calibri-Bold uf
/IAAAAA+Calibri-Bold uf
/MKLSCN+CambriaMath*1 uf
/MKLSCN+CambriaMath uf
/KAAAAA+CambriaMath uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
