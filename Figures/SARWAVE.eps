%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SARWAVE.pdf
%%Creator: Adobe Acrobat 22.1.0
%%For: lwzz0
%%CreationDate: 2022/5/31, 0:56:14
%%BoundingBox: -1 0 1113 575
%%HiResBoundingBox: 0 0 1112.4388 574.7733
%%CropBox: 0 0 1112.4388 574.7733
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1181 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.425dc87, 2021/10/27-16:20:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® Visio® LTSC"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Visio® LTSC"
   xmp:CreateDate="2022-05-30T13:40:03+08:00"
   xmp:ModifyDate="2022-05-31T00:56:04+08:00"
   xmp:MetadataDate="2022-05-31T00:56:04+08:00"
   xmpMM:DocumentID="uuid:6B01959B-EE3A-43FC-B433-36C665D68136"
   xmpMM:InstanceID="uuid:ebd60a30-96d7-4346-8fd3-37fafcb0feda">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>李 王臻</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -574.773 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-3.05176e-5 0 mo
-3.05176e-5 574.773 li
1112.44 574.773 li
1112.44 0 li
cp
clp
gsave
-.000976563 575.425 mo
1113 575.425 li
1113 -.575378 li
-.000976563 -.575378 li
cp
clp
gsave
-15.001 889.424 mo
1139.52 889.424 li
1139.52 -758.296 li
-15.001 -758.296 li
cp
eclp
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
-15.001 889.484 mo
1139.55 889.484 li
1139.55 -758.296 li
-15.001 -758.296 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
223.828 544.221 mo
440.124 544.221 li
440.124 151.718 li
223.828 151.718 li
cp
false sop
/1 
[/DeviceCMYK] /CSA add_res
.166293 .082826 0 0 cmyk
ef
223.828 544.221 mo
440.124 544.221 li
440.124 151.718 li
223.828 151.718 li
cp
.874327 .707973 .187198 0 cmyk
.55 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
674.271 543.266 mo
1014.03 543.266 li
1014.03 150.763 li
674.271 150.763 li
cp
.00628672 .137575 .155398 0 cmyk
ef
674.271 543.266 mo
1014.03 543.266 li
1014.03 150.763 li
674.271 150.763 li
cp
.874327 .707973 .187198 0 cmyk
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
440.456 543.903 mo
674.298 543.903 li
674.298 151.081 li
440.456 151.081 li
cp
.144869 0 .196231 0 cmyk
ef
440.456 543.903 mo
674.298 543.903 li
674.298 151.081 li
440.456 151.081 li
cp
.874327 .707973 .187198 0 cmyk
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
582.606 363.961 mo
581.197 363.961 580.479 365.014 580.479 367.115 cv
580.479 369.046 581.117 370.009 582.34 370.009 cv
582.579 370.009 582.819 369.988 583.031 369.94 cv
583.244 369.895 583.43 369.824 583.616 369.725 cv
583.802 369.63 583.988 369.513 584.148 369.378 cv
584.308 369.243 584.414 369.131 584.467 369.046 cv
584.52 368.959 584.573 368.834 584.6 368.667 cv
584.653 368.503 584.68 368.277 584.68 367.991 cv
584.68 366.691 584.494 365.693 584.148 365.001 cv
583.802 364.309 583.297 363.961 582.606 363.961 cv
cp
582.712 362.847 mo
584.308 362.847 585.504 363.33 586.355 364.295 cv
587.179 365.261 587.604 366.659 587.604 368.489 cv
587.604 370.97 586.993 372.922 585.743 374.347 cv
584.494 375.774 582.712 376.572 580.373 376.745 cv
579.868 376.158 li
579.868 375.442 li
580.586 375.429 581.224 375.315 581.729 375.103 cv
582.234 374.89 582.686 374.591 583.085 374.203 cv
583.457 373.816 583.776 373.32 584.015 372.72 cv
584.281 372.121 584.467 371.349 584.573 370.407 cv
584.467 370.367 li
583.962 370.72 583.457 370.975 582.952 371.134 cv
582.473 371.293 581.862 371.373 581.17 371.373 cv
580.027 371.373 579.15 371.02 578.512 370.314 cv
577.847 369.606 577.528 368.625 577.528 367.365 cv
577.528 366.481 577.741 365.693 578.166 365.001 cv
578.565 364.309 579.177 363.775 579.948 363.404 cv
580.719 363.033 581.649 362.847 582.712 362.847 cv
cp
.997223 .918425 .647791 .507591 cmyk
ef
589.04 398.561 mo
588.721 398.561 588.402 398.609 588.109 398.704 cv
587.843 398.8 587.577 398.93 587.365 399.092 cv
587.152 399.256 586.993 399.389 586.913 399.49 cv
586.833 399.593 586.78 399.742 586.753 399.933 cv
586.727 400.126 586.7 400.463 586.7 400.949 cv
586.7 402.161 586.86 403.073 587.205 403.684 cv
587.551 404.294 588.056 404.599 588.774 404.599 cv
589.465 404.599 589.997 404.341 590.369 403.827 cv
590.715 403.315 590.901 402.519 590.901 401.445 cv
590.901 400.498 590.741 399.779 590.422 399.291 cv
590.103 398.805 589.651 398.561 589.04 398.561 cv
cp
591.618 391.815 mo
592.177 392.502 li
592.177 393.12 li
590.715 393.152 589.518 393.6 588.614 394.468 cv
587.71 395.333 587.126 396.571 586.833 398.182 cv
586.913 398.221 li
587.445 397.863 587.95 397.603 588.481 397.436 cv
589.013 397.272 589.598 397.187 590.209 397.187 cv
590.98 397.187 591.618 397.354 592.177 397.691 cv
592.735 398.025 593.134 398.497 593.426 399.108 cv
593.692 399.718 593.852 400.429 593.852 401.238 cv
593.852 402.118 593.665 402.896 593.293 403.569 cv
592.921 404.243 592.336 404.769 591.565 405.145 cv
590.794 405.525 589.837 405.713 588.721 405.713 cv
587.684 405.713 586.807 405.509 586.062 405.097 cv
585.318 404.686 584.759 404.079 584.361 403.275 cv
583.962 402.474 583.776 401.498 583.776 400.352 cv
583.776 398.8 584.095 397.396 584.759 396.144 cv
585.398 394.89 586.328 393.882 587.551 393.12 cv
588.747 392.356 590.103 391.921 591.618 391.815 cv
cp
577.342 391.815 mo
578.618 391.815 li
578.565 392.452 578.539 393.335 578.539 394.463 cv
578.539 402.779 li
578.539 403.164 578.565 403.453 578.618 403.649 cv
578.645 403.845 578.725 404.005 578.831 404.127 cv
578.937 404.249 579.097 404.344 579.31 404.416 cv
579.522 404.485 579.788 404.538 580.081 404.575 cv
580.4 404.609 580.825 404.636 581.33 404.649 cv
581.33 405.554 li
572.716 405.554 li
572.716 404.649 li
573.461 404.615 573.992 404.57 574.312 404.514 cv
574.631 404.458 574.87 404.373 575.029 404.262 cv
575.189 404.148 575.322 403.989 575.402 403.784 cv
575.455 403.577 575.508 403.243 575.508 402.779 cv
575.508 395.587 li
575.508 395.314 575.455 395.118 575.348 394.998 cv
575.242 394.879 575.109 394.821 574.923 394.821 cv
574.763 394.821 574.524 394.898 574.232 395.049 cv
573.913 395.203 573.434 395.513 572.743 395.985 cv
572.132 394.929 li
cp
ef
570.483 385.18 mo
582.766 385.18 li
595.048 385.18 li
595.048 386.454 li
582.766 386.454 li
570.483 386.454 li
cp
ef
598.876 378.286 mo
604.379 378.286 li
604.379 378.944 li
604.034 378.984 603.794 379.079 603.608 379.233 cv
603.449 379.384 603.369 379.599 603.369 379.878 cv
603.369 380.098 603.396 380.31 603.422 380.52 cv
603.475 380.729 603.555 381.063 603.688 381.52 cv
605.655 388.664 li
608.128 381.549 li
608.207 381.27 608.287 381.01 608.34 380.764 cv
608.394 380.52 608.447 380.26 608.447 379.989 cv
608.447 379.663 608.34 379.413 608.181 379.241 cv
608.021 379.069 607.755 378.97 607.41 378.944 cv
607.41 378.286 li
611.69 378.286 li
611.69 378.944 li
611.451 378.984 611.238 379.063 611.052 379.188 cv
610.866 379.31 610.706 379.485 610.574 379.713 cv
610.441 379.944 610.255 380.315 610.068 380.833 cv
605.895 391.934 li
603.582 391.934 li
600.312 380.793 li
600.152 380.297 600.019 379.944 599.94 379.734 cv
599.833 379.525 599.7 379.355 599.541 379.228 cv
599.381 379.098 599.169 379.002 598.876 378.944 cv
cp
ef
620.995 389.401 mo
620.623 389.401 620.33 389.589 620.091 389.969 cv
619.878 390.351 619.745 390.897 619.692 391.613 cv
622.138 391.613 li
622.111 390.868 622.032 390.314 621.846 389.948 cv
621.66 389.581 621.394 389.401 620.995 389.401 cv
cp
621.101 388.64 mo
621.553 388.64 621.952 388.69 622.271 388.794 cv
622.617 388.897 622.909 389.038 623.148 389.221 cv
623.388 389.404 623.574 389.624 623.733 389.881 cv
623.919 390.189 624.052 390.542 624.159 390.942 cv
624.238 391.34 624.291 391.828 624.291 392.401 cv
619.666 392.401 li
619.666 393.285 619.825 393.932 620.144 394.348 cv
620.437 394.765 620.915 394.975 621.553 394.975 cv
621.925 394.975 622.244 394.906 622.563 394.765 cv
622.856 394.627 623.175 394.383 623.52 394.03 cv
624.105 394.675 li
623.627 395.2 623.122 395.574 622.643 395.792 cv
622.138 396.012 621.58 396.12 620.942 396.12 cv
619.825 396.12 618.948 395.81 618.39 395.189 cv
617.805 394.569 617.512 393.645 617.512 392.425 cv
617.512 391.635 617.672 390.956 617.964 390.383 cv
618.257 389.81 618.682 389.377 619.214 389.083 cv
619.772 388.788 620.383 388.64 621.101 388.64 cv
cp
615.625 388.64 mo
615.917 388.64 616.236 388.672 616.555 388.735 cv
616.555 390.751 li
615.226 390.751 li
615.146 390.47 615.04 390.253 614.907 390.101 cv
614.774 389.95 614.588 389.876 614.375 389.876 cv
614.269 389.876 614.136 389.908 614.003 389.974 cv
613.87 390.038 613.764 390.131 613.657 390.25 cv
613.551 390.369 613.471 390.491 613.418 390.616 cv
613.365 390.741 613.338 390.865 613.312 390.993 cv
613.312 391.12 613.312 391.308 613.312 391.563 cv
613.312 393.892 li
613.312 394.356 613.312 394.68 613.365 394.863 cv
613.392 395.049 613.445 395.195 613.551 395.298 cv
613.657 395.404 613.844 395.479 614.083 395.521 cv
614.083 396.004 li
610.467 396.004 li
610.467 395.521 li
610.706 395.457 610.866 395.375 610.946 395.274 cv
611.052 395.171 611.105 395.033 611.132 394.858 cv
611.158 394.683 611.185 394.362 611.185 393.9 cv
611.185 390.897 li
611.185 390.536 611.185 390.271 611.158 390.099 cv
611.158 389.924 611.132 389.786 611.079 389.682 cv
611.026 389.576 610.972 389.491 610.866 389.425 cv
610.76 389.359 610.6 389.303 610.361 389.253 cv
610.361 388.756 li
612.381 388.698 li
613.312 388.698 li
613.205 389.802 li
613.285 389.823 li
613.657 389.404 614.03 389.104 614.402 388.918 cv
614.774 388.733 615.173 388.64 615.625 388.64 cv
cp
629.927 385.512 mo
630.353 385.512 630.725 385.547 631.044 385.616 cv
631.044 387.106 li
630.06 387.106 li
629.981 386.838 629.874 386.64 629.795 386.515 cv
629.688 386.388 629.555 386.324 629.396 386.324 cv
629.183 386.324 629.024 386.393 628.917 386.533 cv
628.784 386.671 628.731 386.868 628.678 387.125 cv
628.625 387.38 628.625 387.738 628.625 388.202 cv
628.625 388.756 li
630.034 388.756 li
630.034 389.669 li
628.625 389.669 li
628.625 394.171 li
628.625 394.537 628.625 394.794 628.678 394.945 cv
628.705 395.097 628.784 395.216 628.891 395.303 cv
628.97 395.391 629.156 395.463 629.422 395.521 cv
629.422 396.004 li
625.78 396.004 li
625.78 395.521 li
625.993 395.455 626.152 395.378 626.259 395.296 cv
626.339 395.213 626.392 395.097 626.445 394.948 cv
626.471 394.799 626.498 394.539 626.498 394.171 cv
626.498 389.669 li
625.594 389.669 li
625.594 389.165 li
625.86 389.128 626.046 389.08 626.152 389.024 cv
626.232 388.969 626.339 388.878 626.392 388.756 cv
626.445 388.634 626.498 388.443 626.525 388.181 cv
626.604 387.303 626.923 386.64 627.508 386.189 cv
628.066 385.738 628.891 385.512 629.927 385.512 cv
cp
ef
87.0662 549.127 mo
87.0689 244.223 li
80.4891 244.223 li
80.4864 549.127 li
cp
93.6487 247.486 mo
83.7777 227.802 li
73.9093 247.486 li
cp
f
83.7777 544.758 mo
1080.89 544.758 li
1080.89 551.324 li
83.7777 551.324 li
cp
1077.59 538.192 mo
1097.32 548.041 li
1077.59 557.89 li
cp
f
86.7499 342.54 mo
226.149 323.976 li
224.987 315.299 li
85.5908 333.863 li
cp
0 .961578 .907591 0 cmyk
f
238.388 410.761 mo
329.729 411.711 li
329.649 420.465 li
238.298 419.515 li
cp
f
331.404 414.724 mo
334.461 419.579 li
334.408 419.486 li
335.95 421.815 li
335.897 421.741 li
337.465 423.969 li
337.359 423.829 li
338.928 425.877 li
338.768 425.683 li
340.363 427.553 li
340.151 427.333 li
341.746 428.964 li
341.427 428.673 li
343.075 430.047 li
342.623 429.718 li
344.271 430.774 li
343.766 430.498 li
345.441 431.294 li
344.936 431.092 li
346.611 431.649 li
346.132 431.519 li
347.834 431.877 li
347.488 431.819 li
349.216 432.036 li
348.87 432.007 li
350.572 432.087 li
350.359 432.081 li
353.815 432.063 li
353.868 440.817 li
350.279 440.836 li
348.286 440.743 li
346.212 440.48 li
344.085 440.034 li
341.905 439.313 li
339.725 438.278 li
337.625 436.92 li
335.631 435.233 li
333.77 433.341 li
331.989 431.262 li
330.314 429.044 li
328.692 426.707 li
327.071 424.298 li
323.96 419.396 li
cp
f
353.842 432.089 mo
440.722 432.116 li
440.695 440.87 li
353.815 440.843 li
cp
f
1007.7 324.188 mo
678.525 526.347 li
683.124 533.802 li
1012.3 331.642 li
cp
0 .302953 .905394 0 cmyk
f
228.041 318.861 mo
229.419 331.555 li
230.774 344.028 li
231.45 350.106 li
232.109 356.058 li
232.766 361.855 li
233.404 367.465 li
233.401 367.447 li
234.039 372.858 li
234.656 378.002 li
235.254 382.91 li
235.249 382.875 li
235.847 387.491 li
236.405 391.765 li
236.402 391.741 li
236.942 395.701 li
236.931 395.64 li
237.471 399.222 li
237.466 399.195 li
237.966 402.378 li
237.952 402.309 li
238.431 405.074 li
238.423 405.031 li
238.862 407.419 li
238.832 407.267 li
239.271 409.257 li
239.242 409.135 li
239.662 410.806 li
239.625 410.674 li
240.005 412.005 li
239.914 411.724 li
240.292 412.777 li
240.164 412.459 li
240.523 413.255 li
240.233 412.719 li
240.574 413.255 li
239.962 412.493 li
240.302 412.83 li
239.162 412.011 li
239.481 412.17 li
237.519 411.708 li
237.838 411.708 li
235.982 412.119 li
236.283 411.979 li
235.089 412.798 li
235.687 412.223 li
235.214 412.759 li
235.794 411.981 li
242.833 417.205 li
242.041 418.268 li
240.659 419.603 li
238.811 420.462 li
236.482 420.462 li
234.603 419.523 li
233.412 418.335 li
232.646 417.125 li
232.093 415.894 li
231.604 414.539 li
231.168 412.995 li
230.716 411.199 li
230.248 409.071 li
229.791 406.586 li
229.302 403.763 li
228.796 400.532 li
228.251 396.908 li
227.706 392.908 li
227.148 388.613 li
226.547 383.981 li
225.947 379.042 li
225.327 373.88 li
224.686 368.46 li
224.048 362.839 li
223.389 357.019 li
222.732 351.071 li
222.052 344.973 li
220.696 332.497 li
219.322 319.803 li
cp
0 .961578 .907591 0 cmyk
f
212.229 326.544 mo
81.6615 391.428 li
85.5748 399.264 li
216.139 334.38 li
cp
0 .302953 .905394 0 cmyk
f
237.394 525.679 mo
683.098 526.443 li
683.098 535.197 li
237.378 534.433 li
cp
f
218.162 331.364 mo
219.497 346.524 li
220.834 361.603 li
222.169 376.562 li
222.166 376.546 li
223.543 391.308 li
224.918 405.806 li
224.915 405.785 li
226.332 419.969 li
226.329 419.945 li
227.784 433.731 li
227.784 433.716 li
228.52 440.44 li
228.517 440.416 li
229.275 447.022 li
230.033 453.5 li
230.03 453.476 li
230.806 459.821 li
231.583 465.997 li
231.577 465.957 li
232.396 472.006 li
232.393 471.987 li
233.21 477.855 li
233.207 477.839 li
234.026 483.55 li
234.018 483.5 li
234.876 489.031 li
234.871 489.007 li
235.73 494.339 li
235.722 494.299 li
236.599 499.451 li
236.591 499.403 li
237.487 504.337 li
237.479 504.287 li
238.396 509.022 li
238.386 508.967 li
239.321 513.484 li
239.303 513.397 li
240.281 517.676 li
240.268 517.625 li
241.246 521.684 li
241.225 521.599 li
242.222 525.398 li
242.195 525.308 li
243.214 528.868 li
234.775 531.268 li
233.747 527.661 li
232.726 523.772 li
231.731 519.647 li
230.74 515.301 li
229.788 510.712 li
228.86 505.924 li
227.954 500.942 li
227.071 495.745 li
226.207 490.381 li
225.343 484.813 li
224.522 479.07 li
223.703 473.183 li
222.881 467.106 li
222.1 460.885 li
221.321 454.526 li
220.56 448.019 li
219.8 441.403 li
219.061 434.657 li
217.604 420.85 li
216.184 406.641 li
214.807 392.117 li
213.43 377.347 li
212.093 362.375 li
210.758 347.291 li
209.421 332.13 li
cp
f
215.445 267.514 mo
158.588 267.514 li
158.588 276.269 li
215.445 276.269 li
cp
.61709 .780514 0 0 cmyk
f
218.157 270.353 mo
233.061 528.472 li
224.304 528.976 li
209.4 270.857 li
cp
f
226.223 525.679 mo
510.773 525.801 li
510.747 534.555 li
226.218 534.433 li
cp
f
515.479 532.608 mo
529.808 274.995 li
521.035 274.518 li
506.732 532.122 li
cp
f
649.574 525.679 mo
785.556 525.955 li
785.53 534.709 li
649.547 534.433 li
cp
f
787.922 531.722 mo
804.83 270.91 li
796.057 270.326 li
779.176 531.157 li
cp
f
798.583 267.514 mo
1016.45 268.841 li
1016.39 277.595 li
798.503 276.269 li
cp
f
334.382 223.505 mo
334.355 236.636 li
337.652 236.636 li
337.652 223.505 li
cp
334.355 246.478 mo
334.355 259.609 li
337.652 259.609 li
337.652 246.478 li
cp
334.355 269.451 mo
334.355 282.582 li
337.652 282.582 li
337.652 269.451 li
cp
334.355 292.45 mo
334.355 305.571 li
337.625 305.571 li
337.652 292.45 li
cp
334.355 315.421 mo
334.355 328.552 li
337.625 328.552 li
337.625 315.421 li
cp
334.328 338.399 mo
334.328 351.53 li
337.625 351.53 li
337.625 338.399 li
cp
334.328 361.38 mo
334.328 374.511 li
337.625 374.511 li
337.625 361.38 li
cp
334.328 384.358 mo
334.328 397.489 li
337.625 397.489 li
337.625 384.358 li
cp
334.328 407.339 mo
334.328 420.47 li
337.598 420.47 li
337.625 407.339 li
cp
.899962 .828183 .680751 .520256 cmyk
f
18.9362 414.117 mo
26.086 414.117 li
26.086 414.968 li
25.6378 415.021 25.306 415.146 25.0904 415.342 cv
24.8751 415.541 24.7674 415.82 24.7674 416.181 cv
24.7674 416.465 24.7932 416.743 24.8448 417.014 cv
24.8966 417.284 25.0043 417.717 25.168 418.311 cv
27.7282 427.574 li
30.9213 418.348 li
31.0516 417.987 31.1526 417.648 31.2244 417.329 cv
31.2988 417.011 31.336 416.677 31.336 416.324 cv
31.336 415.902 31.2244 415.579 31.0064 415.356 cv
30.7857 415.133 30.4481 415.003 29.9908 414.968 cv
29.9908 414.117 li
35.563 414.117 li
35.563 414.968 li
35.236 415.021 34.9569 415.125 34.7283 415.284 cv
34.4996 415.443 34.2949 415.671 34.1088 415.968 cv
33.9227 416.266 33.7047 416.748 33.4548 417.42 cv
28.0384 431.819 li
25.0518 431.819 li
20.7852 417.369 li
20.5954 416.725 20.4362 416.266 20.3067 415.995 cv
20.1775 415.724 20.0095 415.504 19.8026 415.337 cv
19.5958 415.17 19.3068 415.045 18.9362 414.968 cv
cp
.997223 .918425 .647791 .507591 cmyk
ef
34.5847 424.197 mo
43.7725 424.197 li
43.7725 427.211 li
42.4698 427.211 li
42.2625 426.611 42.0844 426.206 41.9381 425.993 cv
41.7919 425.781 41.6191 425.614 41.4171 425.492 cv
41.2124 425.367 40.8694 425.306 40.3802 425.306 cv
38.5459 425.306 li
38.5459 430.132 li
39.7635 430.132 li
40.0612 430.132 40.2899 430.087 40.452 429.994 cv
40.6142 429.903 40.7471 429.75 40.8508 429.535 cv
40.9545 429.32 41.0422 429.017 41.1113 428.625 cv
42.1854 428.625 li
42.1854 432.758 li
41.1113 432.758 li
41.0369 432.36 40.9439 432.052 40.8375 431.835 cv
40.7285 431.617 40.5956 431.463 40.4387 431.373 cv
40.2792 431.286 40.0533 431.24 39.7635 431.24 cv
38.5459 431.24 li
38.5459 434.758 li
38.5459 435.251 38.5725 435.596 38.623 435.787 cv
38.6735 435.981 38.7719 436.135 38.9207 436.252 cv
39.0696 436.368 39.3301 436.456 39.697 436.514 cv
39.697 437.14 li
34.5847 437.14 li
34.5847 436.514 li
34.9197 436.432 35.1483 436.331 35.2733 436.214 cv
35.3956 436.098 35.4833 435.946 35.5285 435.761 cv
35.5763 435.572 35.6003 435.236 35.6003 434.75 cv
35.6003 426.585 li
35.6003 426.105 35.579 425.773 35.5391 425.585 cv
35.4992 425.399 35.4142 425.251 35.2866 425.136 cv
35.1616 425.022 34.925 424.916 34.5847 424.823 cv
cp
49.9961 424.046 mo
50.5597 424.046 51.0993 424.075 51.6124 424.136 cv
52.1255 424.195 52.7104 424.301 53.3697 424.452 cv
53.3697 427.203 li
52.067 427.203 li
51.8969 426.489 51.6417 425.969 51.3067 425.643 cv
50.9717 425.317 50.4879 425.155 49.8525 425.155 cv
49.2836 425.155 48.8263 425.304 48.4807 425.601 cv
48.1351 425.898 47.9623 426.301 47.9623 426.813 cv
47.9623 427.179 48.0341 427.497 48.175 427.765 cv
48.3185 428.036 48.5578 428.299 48.8928 428.553 cv
49.2304 428.811 49.7169 429.102 50.3576 429.431 cv
51.1366 429.835 51.748 430.232 52.1946 430.62 cv
52.6413 431.01 52.9709 431.434 53.1836 431.89 cv
53.3963 432.349 53.5026 432.883 53.5026 433.49 cv
53.5026 434.267 53.3218 434.941 52.9603 435.514 cv
52.5987 436.084 52.075 436.525 51.3838 436.83 cv
50.6926 437.138 49.895 437.291 48.9885 437.291 cv
48.3425 437.291 47.6699 437.254 46.9707 437.183 cv
46.2688 437.108 45.6122 437.002 44.9981 436.864 cv
44.9981 433.944 li
46.3007 433.944 li
46.4576 434.697 46.7234 435.257 47.093 435.625 cv
47.4625 435.997 48.0075 436.183 48.7226 436.183 cv
49.35 436.183 49.8392 436.021 50.1901 435.697 cv
50.5411 435.376 50.7192 434.917 50.7192 434.323 cv
50.7192 433.742 50.549 433.257 50.2087 432.867 cv
49.8711 432.479 49.2836 432.076 48.4462 431.66 cv
47.7496 431.317 47.1701 430.965 46.7022 430.601 cv
46.2369 430.238 45.8701 429.816 45.6016 429.336 cv
45.333 428.856 45.1975 428.307 45.1975 427.686 cv
45.1975 426.909 45.3915 426.248 45.777 425.704 cv
46.1625 425.16 46.7234 424.749 47.4545 424.468 cv
48.1856 424.187 49.0337 424.046 49.9961 424.046 cv
cp
ef
63.0387 262.262 mo
62.5043 262.262 62.1188 262.262 61.8875 262.288 cv
61.8875 276.799 li
62.0417 276.826 62.4352 276.826 63.0626 276.826 cv
64.3919 276.826 65.4234 276.56 66.1598 276.03 cv
66.8962 275.499 67.4571 274.703 67.8399 273.589 cv
68.2254 272.502 68.4168 271.149 68.4168 269.477 cv
68.4168 267.116 67.9543 265.313 67.0318 264.092 cv
66.1119 262.872 64.78 262.262 63.0387 262.262 cv
cp
43.8974 262.262 mo
43.3631 262.262 42.9776 262.262 42.7463 262.288 cv
42.7463 276.799 li
42.9005 276.826 43.294 276.826 43.9214 276.826 cv
45.2506 276.826 46.2821 276.56 47.0185 276.03 cv
47.7549 275.499 48.3159 274.703 48.6987 273.589 cv
49.0842 272.502 49.2756 271.149 49.2756 269.477 cv
49.2756 267.116 48.813 265.313 47.8905 264.092 cv
46.9707 262.872 45.6388 262.262 43.8974 262.262 cv
cp
56.4961 260.75 mo
63.2195 260.75 li
64.6577 260.75 65.862 260.856 66.827 261.095 cv
67.7921 261.307 68.6481 261.652 69.3978 262.156 cv
70.1502 262.633 70.7537 263.19 71.2162 263.854 cv
71.6762 264.543 72.0191 265.313 72.2424 266.188 cv
72.4684 267.063 72.58 268.071 72.58 269.186 cv
72.58 270.99 72.2982 272.528 71.74 273.801 cv
71.2402 274.969 70.5171 275.897 69.5733 276.587 cv
68.6295 277.303 67.5023 277.781 66.1917 278.046 cv
65.1921 278.258 63.916 278.364 62.3661 278.364 cv
56.4961 278.364 li
56.4961 277.515 li
56.9613 277.383 57.2777 277.25 57.4452 277.091 cv
57.6153 276.932 57.7296 276.746 57.7881 276.481 cv
57.8493 276.242 57.8785 275.764 57.8785 275.128 cv
57.8785 264.013 li
57.8785 263.35 57.8519 262.899 57.7961 262.633 cv
57.7403 262.395 57.626 262.182 57.4532 262.023 cv
57.2804 261.864 56.9613 261.731 56.4961 261.599 cv
cp
37.3549 260.75 mo
44.0782 260.75 li
45.5165 260.75 46.7208 260.856 47.6858 261.095 cv
48.6509 261.307 49.5069 261.652 50.2566 262.156 cv
51.0089 262.633 51.6124 263.19 52.075 263.854 cv
52.5349 264.543 52.8779 265.313 53.1012 266.188 cv
53.3272 267.063 53.4388 268.071 53.4388 269.186 cv
53.4388 270.99 53.157 272.528 52.5987 273.801 cv
52.0989 274.969 51.3758 275.897 50.4321 276.587 cv
49.4883 277.303 48.3611 277.781 47.0504 278.046 cv
46.0508 278.258 44.7748 278.364 43.2248 278.364 cv
37.3549 278.364 li
37.3549 277.515 li
37.8201 277.383 38.1365 277.25 38.304 277.091 cv
38.4741 276.932 38.5884 276.746 38.6469 276.481 cv
38.708 276.242 38.7373 275.764 38.7373 275.128 cv
38.7373 264.013 li
38.7373 263.35 38.7107 262.899 38.6549 262.633 cv
38.5991 262.395 38.4847 262.182 38.3119 262.023 cv
38.1391 261.864 37.8201 261.731 37.3549 261.599 cv
cp
19.0933 260.75 mo
26.2429 260.75 li
26.2429 261.599 li
25.7949 261.652 25.4629 261.784 25.2475 261.97 cv
25.0319 262.182 24.9242 262.448 24.9242 262.819 cv
24.9242 263.111 24.95 263.376 25.0019 263.641 cv
25.0534 263.907 25.1614 264.358 25.3251 264.941 cv
27.885 274.199 li
31.0781 264.994 li
31.2084 264.623 31.3094 264.278 31.3812 263.96 cv
31.4557 263.641 31.4929 263.296 31.4929 262.952 cv
31.4929 262.527 31.3812 262.209 31.1632 261.997 cv
30.9426 261.758 30.6049 261.625 30.1477 261.599 cv
30.1477 260.75 li
35.7199 260.75 li
35.7199 261.599 li
35.3929 261.652 35.1138 261.758 34.8851 261.917 cv
34.6565 262.076 34.4518 262.315 34.2657 262.607 cv
34.0796 262.899 33.8616 263.376 33.6117 264.066 cv
28.1953 278.444 li
25.2087 278.444 li
20.9421 264.013 li
20.7525 263.35 20.593 262.899 20.4638 262.633 cv
20.3343 262.368 20.1663 262.129 19.9595 261.97 cv
19.7526 261.811 19.4639 261.678 19.0933 261.599 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
444.444 438.859 mo
457.603 438.806 li
457.577 435.525 li
444.417 435.575 li
cp
467.466 438.766 mo
480.626 438.716 li
480.599 435.434 li
467.44 435.485 li
cp
490.489 438.676 mo
503.649 438.626 li
503.649 435.342 li
490.489 435.395 li
cp
513.512 438.586 mo
526.671 438.536 li
526.671 435.251 li
513.512 435.305 li
cp
536.561 438.496 mo
549.72 438.445 li
549.694 435.161 li
536.534 435.214 li
cp
559.583 438.406 mo
572.743 438.355 li
572.716 435.071 li
559.557 435.124 li
cp
582.606 438.315 mo
595.766 438.262 li
595.766 434.981 li
582.606 435.031 li
cp
605.629 438.225 mo
618.788 438.172 li
618.788 434.891 li
605.629 434.941 li
cp
628.678 438.135 mo
635.59 438.108 li
635.59 434.824 li
628.651 434.851 li
cp
.997223 .918425 .647791 .507591 cmyk
f
86.1756 332.706 mo
99.3352 332.656 li
99.3246 329.374 li
86.165 329.425 li
cp
109.206 332.619 mo
122.366 332.571 li
122.353 329.287 li
109.193 329.337 li
cp
132.234 332.531 mo
145.394 332.483 li
145.381 329.199 li
132.224 329.25 li
cp
155.265 332.446 mo
168.424 332.396 li
168.411 329.112 li
155.252 329.162 li
cp
178.293 332.359 mo
191.452 332.308 li
191.439 329.024 li
178.28 329.074 li
cp
201.323 332.271 mo
214.48 332.221 li
214.47 328.939 li
201.31 328.987 li
cp
224.351 332.184 mo
237.511 332.133 li
237.498 328.852 li
224.338 328.902 li
cp
247.379 332.096 mo
260.539 332.046 li
260.528 328.764 li
247.369 328.815 li
cp
270.418 332.008 mo
283.578 331.958 li
283.551 328.677 li
270.391 328.727 li
cp
293.441 331.921 mo
306.6 331.873 li
306.574 328.589 li
293.414 328.639 li
cp
316.463 331.836 mo
329.623 331.786 li
329.623 328.501 li
316.463 328.552 li
cp
339.486 331.748 mo
352.646 331.698 li
352.646 328.414 li
339.486 328.464 li
cp
362.535 331.661 mo
375.695 331.611 li
375.668 328.329 li
362.509 328.377 li
cp
385.558 331.573 mo
398.717 331.523 li
398.691 328.242 li
385.531 328.289 li
cp
408.58 331.486 mo
421.74 331.435 li
421.74 328.154 li
408.58 328.204 li
cp
431.603 331.398 mo
444.763 331.348 li
444.763 328.066 li
431.603 328.117 li
cp
454.652 331.311 mo
467.812 331.263 li
467.785 327.979 li
454.626 328.029 li
cp
477.675 331.223 mo
490.835 331.175 li
490.808 327.891 li
477.648 327.942 li
cp
500.698 331.138 mo
513.857 331.088 li
513.857 327.804 li
500.698 327.854 li
cp
523.72 331.051 mo
536.88 331 li
536.88 327.716 li
523.72 327.767 li
cp
546.769 330.963 mo
559.929 330.913 li
559.902 327.631 li
546.743 327.679 li
cp
569.792 330.876 mo
582.952 330.825 li
582.925 327.544 li
569.766 327.594 li
cp
592.815 330.788 mo
605.974 330.738 li
605.974 327.456 li
592.815 327.507 li
cp
615.837 330.701 mo
628.997 330.65 li
628.997 327.369 li
615.837 327.419 li
cp
638.887 330.613 mo
652.046 330.565 li
652.02 327.281 li
638.86 327.332 li
cp
661.909 330.528 mo
675.069 330.478 li
675.042 327.194 li
661.883 327.244 li
cp
684.932 330.441 mo
698.091 330.39 li
698.091 327.106 li
684.932 327.157 li
cp
707.955 330.353 mo
721.114 330.303 li
721.114 327.021 li
707.955 327.069 li
cp
731.004 330.266 mo
744.163 330.215 li
744.137 326.934 li
730.977 326.981 li
cp
754.026 330.178 mo
767.186 330.128 li
767.159 326.846 li
754 326.897 li
cp
777.049 330.09 mo
790.209 330.04 li
790.209 326.759 li
777.049 326.809 li
cp
800.072 330.003 mo
813.231 329.955 li
813.231 326.671 li
800.072 326.721 li
cp
823.121 329.915 mo
836.281 329.868 li
836.254 326.584 li
823.094 326.634 li
cp
846.144 329.831 mo
859.303 329.78 li
859.277 326.496 li
846.117 326.546 li
cp
869.166 329.743 mo
882.326 329.693 li
882.326 326.408 li
869.166 326.459 li
cp
892.189 329.655 mo
905.349 329.605 li
905.349 326.324 li
892.189 326.371 li
cp
915.212 329.568 mo
928.371 329.517 li
928.371 326.236 li
915.212 326.286 li
cp
938.261 329.48 mo
951.42 329.43 li
951.394 326.148 li
938.234 326.199 li
cp
961.283 329.393 mo
974.443 329.345 li
974.443 326.061 li
961.283 326.111 li
cp
984.306 329.305 mo
997.466 329.258 li
997.466 325.973 li
984.306 326.024 li
cp
f
262.23 476.181 mo
263.833 476.181 li
263.833 487.055 li
264.261 487.055 li
264.561 487.055 264.801 487.025 264.971 486.964 cv
265.143 486.906 265.324 486.808 265.508 486.675 cv
265.694 486.543 265.981 486.301 266.369 485.954 cv
266.757 485.604 267.05 485.296 267.246 485.023 cv
267.446 484.752 267.579 484.516 267.648 484.314 cv
267.717 484.113 267.751 483.916 267.751 483.728 cv
267.751 483.134 267.377 482.786 266.627 482.683 cv
266.627 481.855 li
273.103 481.855 li
273.103 482.683 li
272.757 482.733 272.359 482.89 271.96 483.147 cv
271.561 483.404 270.896 483.946 270.019 484.773 cv
268.14 486.514 li
271.481 491.442 li
271.96 492.172 272.332 492.676 272.571 492.952 cv
272.784 493.228 272.997 493.421 273.156 493.538 cv
273.342 493.655 273.555 493.742 273.821 493.803 cv
273.821 494.655 li
267.494 494.655 li
267.494 493.803 li
267.882 493.726 268.076 493.525 268.076 493.196 cv
268.076 492.973 267.999 492.708 267.85 492.403 cv
267.698 492.098 267.403 491.623 266.962 490.978 cv
265.968 489.482 li
265.744 489.145 265.564 488.904 265.425 488.752 cv
265.287 488.601 265.151 488.487 265.016 488.41 cv
264.883 488.333 264.697 488.294 264.455 488.294 cv
263.833 488.294 li
263.833 490.925 li
263.833 491.742 263.859 492.307 263.913 492.615 cv
263.963 492.925 264.069 493.172 264.229 493.358 cv
264.388 493.543 264.686 493.692 265.128 493.803 cv
265.128 494.655 li
258.792 494.655 li
258.792 493.803 li
259.231 493.692 259.534 493.546 259.696 493.366 cv
259.861 493.183 259.967 492.941 260.021 492.636 cv
260.071 492.331 260.098 491.761 260.098 490.925 cv
260.098 480.863 li
260.098 479.943 260.084 479.285 260.058 478.889 cv
260.034 478.494 259.978 478.194 259.898 477.993 cv
259.816 477.791 259.694 477.632 259.534 477.515 cv
259.375 477.399 259.077 477.298 258.635 477.213 cv
258.635 476.361 li
cp
ef
407.198 471.149 mo
409.883 471.854 411.957 473.682 413.419 476.632 cv
414.881 479.582 415.599 483.073 415.599 487.108 cv
415.599 491.14 414.881 494.634 413.419 497.583 cv
411.957 500.533 409.883 502.361 407.198 503.067 cv
406.879 502.008 li
408.953 501.226 410.548 499.52 411.611 496.894 cv
412.701 494.265 413.233 491.007 413.233 487.121 cv
413.233 483.224 412.701 479.961 411.611 477.327 cv
410.548 474.695 408.953 472.99 406.879 472.207 cv
cp
284.694 471.149 mo
285.013 472.207 li
282.94 472.99 281.344 474.695 280.281 477.327 cv
279.218 479.961 278.659 483.224 278.659 487.121 cv
278.659 491.007 279.218 494.265 280.281 496.894 cv
281.344 499.52 282.94 501.226 285.013 502.008 cv
284.694 503.067 li
282.009 502.361 279.935 500.533 278.473 497.583 cv
277.011 494.634 276.293 491.14 276.293 487.108 cv
276.293 483.073 277.011 479.582 278.473 476.632 cv
279.935 473.682 282.009 471.854 284.694 471.149 cv
cp
ef
286.156 477.043 mo
293.308 477.043 li
293.308 477.895 li
292.856 477.948 292.537 478.072 292.324 478.269 cv
292.111 478.468 292.005 478.746 292.005 479.11 cv
292.005 479.393 292.032 479.669 292.085 479.94 cv
292.138 480.211 292.244 480.643 292.404 481.237 cv
294.956 490.501 li
298.146 481.277 li
298.279 480.914 298.385 480.574 298.465 480.256 cv
298.518 479.937 298.572 479.603 298.572 479.25 cv
298.572 478.828 298.465 478.507 298.226 478.282 cv
298.013 478.059 297.668 477.929 297.216 477.895 cv
297.216 477.043 li
302.799 477.043 li
302.799 477.895 li
302.48 477.948 302.187 478.054 301.948 478.213 cv
301.735 478.372 301.522 478.598 301.336 478.895 cv
301.15 479.192 300.938 479.677 300.698 480.346 cv
295.275 494.745 li
292.271 494.745 li
288.017 480.295 li
287.831 479.651 287.672 479.192 287.539 478.921 cv
287.406 478.651 287.246 478.431 287.034 478.263 cv
286.821 478.096 286.528 477.974 286.156 477.895 cv
cp
ef
315.134 490.509 mo
315.586 490.509 316.038 490.527 316.49 490.564 cv
316.915 490.604 317.5 490.686 318.191 490.811 cv
318.191 493.021 li
316.942 493.021 li
316.809 492.618 316.649 492.305 316.463 492.082 cv
316.304 491.861 316.091 491.708 315.905 491.623 cv
315.692 491.538 315.426 491.495 315.134 491.495 cv
314.735 491.495 314.39 491.588 314.15 491.779 cv
313.911 491.968 313.778 492.236 313.778 492.575 cv
313.778 492.816 313.831 493.021 313.911 493.193 cv
313.991 493.363 314.15 493.527 314.39 493.689 cv
314.602 493.851 315.054 494.069 315.692 494.339 cv
316.649 494.732 317.314 495.156 317.713 495.615 cv
318.112 496.074 318.298 496.623 318.298 497.268 cv
318.298 498.217 317.979 498.944 317.287 499.454 cv
316.623 499.963 315.666 500.218 314.416 500.218 cv
313.379 500.218 312.21 500.069 310.934 499.772 cv
310.934 497.507 li
312.21 497.507 li
312.343 498.082 312.582 498.512 312.927 498.801 cv
313.246 499.088 313.698 499.231 314.23 499.231 cv
314.709 499.231 315.081 499.125 315.32 498.91 cv
315.559 498.695 315.692 498.382 315.692 497.971 cv
315.692 497.711 315.639 497.491 315.506 497.308 cv
315.4 497.125 315.214 496.949 314.974 496.78 cv
314.709 496.613 314.283 496.392 313.645 496.122 cv
312.768 495.737 312.13 495.31 311.731 494.846 cv
311.332 494.382 311.12 493.859 311.12 493.278 cv
311.12 492.708 311.279 492.214 311.625 491.798 cv
311.944 491.381 312.422 491.063 313.034 490.84 cv
313.645 490.62 314.336 490.509 315.134 490.509 cv
cp
308.408 490.509 mo
308.78 490.509 309.179 490.551 309.604 490.631 cv
309.604 493.249 li
307.903 493.249 li
307.797 492.883 307.637 492.602 307.477 492.405 cv
307.291 492.209 307.079 492.111 306.786 492.111 cv
306.627 492.111 306.494 492.153 306.308 492.238 cv
306.148 492.323 305.989 492.445 305.856 492.599 cv
305.696 492.755 305.617 492.912 305.537 493.074 cv
305.484 493.236 305.457 493.397 305.43 493.562 cv
305.404 493.726 305.404 493.973 305.404 494.302 cv
305.404 497.326 li
305.404 497.926 305.43 498.348 305.457 498.586 cv
305.51 498.828 305.59 499.016 305.723 499.151 cv
305.856 499.287 306.095 499.385 306.414 499.44 cv
306.414 500.066 li
301.709 500.066 li
301.709 499.44 li
302.028 499.358 302.24 499.249 302.347 499.117 cv
302.48 498.984 302.559 498.804 302.586 498.578 cv
302.639 498.35 302.639 497.936 302.639 497.334 cv
302.639 493.437 li
302.639 492.97 302.639 492.625 302.639 492.4 cv
302.612 492.174 302.586 491.997 302.506 491.859 cv
302.453 491.724 302.373 491.612 302.24 491.527 cv
302.107 491.442 301.895 491.368 301.602 491.304 cv
301.602 490.66 li
304.208 490.586 li
305.404 490.586 li
305.271 492.015 li
305.377 492.045 li
305.856 491.501 306.334 491.108 306.813 490.869 cv
307.291 490.628 307.823 490.509 308.408 490.509 cv
cp
321.089 488.291 mo
323.375 488.291 li
323.375 490.66 li
326.087 490.66 li
326.087 491.846 li
323.375 491.846 li
323.375 496.122 li
323.375 496.835 323.402 497.363 323.482 497.706 cv
323.535 498.048 323.641 498.297 323.801 498.459 cv
323.96 498.621 324.173 498.7 324.386 498.7 cv
324.705 498.7 324.97 498.647 325.21 498.538 cv
325.422 498.432 325.608 498.297 325.795 498.133 cv
326.406 498.928 li
325.848 499.403 325.343 499.735 324.891 499.929 cv
324.439 500.122 323.934 500.218 323.429 500.218 cv
322.498 500.218 321.78 499.963 321.328 499.454 cv
320.85 498.944 320.637 498.175 320.637 497.146 cv
320.637 491.846 li
319.441 491.846 li
319.441 491.19 li
319.813 491.129 320.105 491.034 320.291 490.906 cv
320.478 490.779 320.611 490.612 320.717 490.4 cv
320.823 490.188 320.903 489.912 320.956 489.569 cv
321.036 489.23 321.062 488.803 321.089 488.291 cv
cp
ef
334.913 487.959 mo
350.842 487.959 li
350.842 486.243 li
334.913 486.243 li
cp
ef
364.954 477.043 mo
372.106 477.043 li
372.106 477.895 li
371.654 477.948 371.335 478.072 371.122 478.269 cv
370.909 478.468 370.803 478.746 370.803 479.11 cv
370.803 479.393 370.83 479.669 370.883 479.94 cv
370.936 480.211 371.042 480.643 371.202 481.237 cv
373.754 490.501 li
376.944 481.277 li
377.077 480.914 377.183 480.574 377.263 480.256 cv
377.316 479.937 377.37 479.603 377.37 479.25 cv
377.37 478.828 377.263 478.507 377.024 478.282 cv
376.811 478.059 376.466 477.929 376.014 477.895 cv
376.014 477.043 li
381.597 477.043 li
381.597 477.895 li
381.278 477.948 380.985 478.054 380.746 478.213 cv
380.533 478.372 380.32 478.598 380.134 478.895 cv
379.948 479.192 379.736 479.677 379.496 480.346 cv
374.073 494.745 li
371.069 494.745 li
366.815 480.295 li
366.629 479.651 366.47 479.192 366.337 478.921 cv
366.204 478.651 366.044 478.431 365.832 478.263 cv
365.619 478.096 365.327 477.974 364.954 477.895 cv
cp
ef
398.372 500.674 mo
398.133 500.849 397.946 501.043 397.84 501.252 cv
397.734 501.459 397.654 501.701 397.654 501.971 cv
397.654 502.427 397.867 502.764 398.265 502.982 cv
398.664 503.199 399.276 503.308 400.126 503.308 cv
400.924 503.308 401.535 503.176 401.961 502.91 cv
402.36 502.645 402.572 502.271 402.572 501.791 cv
402.572 501.393 402.439 501.114 402.2 500.953 cv
401.934 500.791 401.562 500.711 401.083 500.711 cv
399.435 500.711 li
398.983 500.711 398.611 500.698 398.372 500.674 cv
cp
400.073 491.485 mo
399.621 491.485 399.276 491.668 399.036 492.031 cv
398.824 492.395 398.691 492.952 398.691 493.705 cv
398.691 494.501 398.824 495.093 399.036 495.483 cv
399.276 495.87 399.621 496.066 400.1 496.066 cv
400.525 496.066 400.871 495.886 401.11 495.525 cv
401.323 495.164 401.456 494.615 401.456 493.875 cv
401.456 493.098 401.323 492.503 401.11 492.098 cv
400.897 491.689 400.552 491.485 400.073 491.485 cv
cp
391.938 490.586 mo
393.135 490.586 li
393.135 497.326 li
393.135 497.934 393.135 498.348 393.188 498.573 cv
393.214 498.796 393.294 498.976 393.4 499.114 cv
393.533 499.249 393.746 499.358 394.092 499.44 cv
394.092 500.066 li
389.439 500.066 li
389.439 499.44 li
389.758 499.358 389.971 499.249 390.077 499.117 cv
390.21 498.984 390.29 498.804 390.316 498.578 cv
390.37 498.35 390.37 497.936 390.37 497.334 cv
390.37 492.925 li
390.37 492.485 390.343 492.169 390.29 491.984 cv
390.237 491.798 390.157 491.655 390.024 491.556 cv
389.891 491.458 389.652 491.373 389.333 491.304 cv
389.333 490.66 li
cp
400.1 490.509 mo
400.419 490.509 400.711 490.524 400.951 490.556 cv
401.216 490.588 401.456 490.623 401.695 490.66 cv
405.124 490.66 li
405.124 491.93 li
403.503 491.75 li
403.45 491.856 li
403.636 492.031 403.769 492.273 403.901 492.58 cv
404.008 492.888 404.061 493.254 404.061 493.684 cv
404.061 494.785 403.742 495.62 403.077 496.188 cv
402.386 496.756 401.402 497.042 400.126 497.042 cv
399.488 497.042 398.983 496.984 398.584 496.87 cv
398.265 497.156 398.106 497.461 398.106 497.79 cv
398.106 497.981 398.133 498.125 398.212 498.225 cv
398.292 498.329 398.425 498.406 398.638 498.459 cv
398.824 498.512 399.09 498.538 399.435 498.538 cv
401.801 498.538 li
402.838 498.538 403.636 498.745 404.167 499.157 cv
404.699 499.568 404.965 500.204 404.965 501.072 cv
404.965 501.748 404.752 502.329 404.38 502.815 cv
404.008 503.303 403.45 503.674 402.732 503.929 cv
402.014 504.186 401.163 504.314 400.18 504.314 cv
399.462 504.314 398.824 504.282 398.239 504.218 cv
397.654 504.157 397.149 504.04 396.75 503.873 cv
396.325 503.706 396.006 503.475 395.793 503.186 cv
395.554 502.894 395.447 502.526 395.447 502.077 cv
395.447 501.717 395.554 501.385 395.793 501.08 cv
396.032 500.777 396.351 500.517 396.75 500.303 cv
396.484 500.114 396.298 499.897 396.165 499.65 cv
396.059 499.403 396.006 499.098 396.006 498.737 cv
396.006 498.353 396.112 497.987 396.325 497.639 cv
396.537 497.292 396.936 496.912 397.468 496.501 cv
396.989 496.223 396.617 495.857 396.351 495.406 cv
396.112 494.955 395.979 494.424 395.979 493.817 cv
395.979 493.061 396.165 492.432 396.511 491.936 cv
396.883 491.44 397.362 491.076 397.973 490.851 cv
398.611 490.623 399.302 490.509 400.1 490.509 cv
cp
384.361 490.509 mo
384.813 490.509 385.265 490.527 385.717 490.564 cv
386.143 490.604 386.728 490.686 387.419 490.811 cv
387.419 493.021 li
386.169 493.021 li
386.036 492.618 385.877 492.305 385.691 492.082 cv
385.531 491.861 385.319 491.708 385.132 491.623 cv
384.92 491.538 384.654 491.495 384.361 491.495 cv
383.963 491.495 383.617 491.588 383.378 491.779 cv
383.139 491.968 383.006 492.236 383.006 492.575 cv
383.006 492.816 383.059 493.021 383.139 493.193 cv
383.218 493.363 383.378 493.527 383.617 493.689 cv
383.83 493.851 384.282 494.069 384.92 494.339 cv
385.877 494.732 386.541 495.156 386.94 495.615 cv
387.339 496.074 387.525 496.623 387.525 497.268 cv
387.525 498.217 387.206 498.944 386.515 499.454 cv
385.85 499.963 384.893 500.218 383.644 500.218 cv
382.607 500.218 381.437 500.069 380.161 499.772 cv
380.161 497.507 li
381.437 497.507 li
381.57 498.082 381.809 498.512 382.155 498.801 cv
382.474 499.088 382.926 499.231 383.458 499.231 cv
383.936 499.231 384.308 499.125 384.548 498.91 cv
384.787 498.695 384.92 498.382 384.92 497.971 cv
384.92 497.711 384.867 497.491 384.734 497.308 cv
384.627 497.125 384.441 496.949 384.202 496.78 cv
383.936 496.613 383.511 496.392 382.873 496.122 cv
381.995 495.737 381.357 495.31 380.959 494.846 cv
380.56 494.382 380.347 493.859 380.347 493.278 cv
380.347 492.708 380.507 492.214 380.852 491.798 cv
381.171 491.381 381.65 491.063 382.261 490.84 cv
382.873 490.62 383.564 490.509 384.361 490.509 cv
cp
390.449 486.877 mo
393.055 486.877 li
393.055 489.201 li
390.449 489.201 li
cp
ef
58.3012 527.305 mo
57.7669 527.305 57.384 527.316 57.1528 527.332 cv
57.1528 541.846 li
57.3069 541.872 57.6978 541.885 58.3278 541.885 cv
59.6544 541.885 60.6886 541.617 61.425 541.084 cv
62.1614 540.55 62.7223 539.739 63.1051 538.646 cv
63.488 537.555 63.682 536.181 63.682 534.531 cv
63.682 532.165 63.2195 530.372 62.297 529.146 cv
61.3745 527.921 60.0425 527.305 58.3012 527.305 cv
cp
51.7613 525.796 mo
58.4847 525.796 li
59.9229 525.796 61.1246 525.91 62.0896 526.133 cv
63.0573 526.355 63.9133 526.708 64.663 527.191 cv
65.4127 527.671 66.0189 528.247 66.4788 528.913 cv
66.9414 529.578 67.2843 530.353 67.5076 531.234 cv
67.7309 532.117 67.8453 533.112 67.8453 534.221 cv
67.8453 536.027 67.5635 537.571 67.0025 538.853 cv
66.5027 540.007 65.7823 540.935 64.8385 541.641 cv
63.8947 542.345 62.7675 542.831 61.4569 543.098 cv
60.4573 543.304 59.1812 543.407 57.6313 543.407 cv
51.7613 543.407 li
51.7613 542.556 li
52.2265 542.435 52.5429 542.297 52.7104 542.143 cv
52.8779 541.988 52.9922 541.784 53.0533 541.529 cv
53.1145 541.277 53.1437 540.824 53.1437 540.168 cv
53.1437 529.048 li
53.1437 528.395 53.1145 527.942 53.0587 527.687 cv
53.0028 527.432 52.8885 527.228 52.7157 527.074 cv
52.5456 526.92 52.2265 526.777 51.7613 526.647 cv
cp
33.2182 525.796 mo
38.4555 525.796 li
43.0308 533.73 li
43.3152 534.229 43.6874 534.905 44.142 535.757 cv
44.5993 536.608 45.006 537.412 45.3596 538.168 cv
45.5643 538.168 li
45.4713 536.112 45.4234 533.868 45.4234 531.435 cv
45.4234 529.035 li
45.4234 528.467 45.4022 528.061 45.3596 527.817 cv
45.3144 527.57 45.2453 527.385 45.1523 527.255 cv
45.0566 527.125 44.9396 527.021 44.796 526.939 cv
44.6551 526.857 44.4026 526.761 44.041 526.647 cv
44.041 525.796 li
48.9273 525.796 li
48.9273 526.647 li
48.5817 526.761 48.3398 526.854 48.1963 526.931 cv
48.0554 527.011 47.9331 527.114 47.8347 527.241 cv
47.7363 527.371 47.6592 527.568 47.6087 527.828 cv
47.5556 528.09 47.5316 528.494 47.5316 529.035 cv
47.5316 543.407 li
44.2457 543.407 li
38.4289 533.369 li
37.6446 532.011 37.0678 530.945 36.6956 530.17 cv
36.5786 530.17 li
36.6663 532.019 36.7089 533.971 36.7089 536.027 cv
36.7089 540.182 li
36.7089 540.826 36.7408 541.277 36.8072 541.537 cv
36.871 541.794 36.988 541.999 37.1555 542.149 cv
37.323 542.3 37.6393 542.435 38.1046 542.556 cv
38.1046 543.407 li
33.2182 543.407 li
33.2182 542.556 li
33.6755 542.435 33.9865 542.295 34.1567 542.136 cv
34.3242 541.977 34.4412 541.773 34.505 541.524 cv
34.5688 541.275 34.6007 540.826 34.6007 540.182 cv
34.6007 529.021 li
34.6007 528.377 34.5741 527.931 34.5182 527.687 cv
34.4624 527.443 34.3454 527.239 34.1673 527.074 cv
33.9919 526.91 33.6755 526.769 33.2182 526.647 cv
cp
24.0762 525.591 mo
25.9637 525.591 27.6963 525.82 29.2736 526.273 cv
29.2736 529.939 li
27.5022 529.939 li
27.3041 529.215 27.0779 528.658 26.8235 528.268 cv
26.5693 527.875 26.2418 527.584 25.8409 527.39 cv
25.44 527.196 24.925 527.101 24.2958 527.101 cv
23.4427 527.101 22.6884 527.361 22.0334 527.881 cv
21.3783 528.401 20.861 529.231 20.4819 530.372 cv
20.1025 531.51 19.913 532.953 19.913 534.698 cv
19.913 537.081 20.2168 538.911 20.8243 540.187 cv
21.432 541.466 22.2875 542.104 23.3908 542.104 cv
24.1493 542.104 24.7097 541.878 25.0715 541.426 cv
25.4336 540.975 25.6147 540.256 25.6147 539.266 cv
25.6147 538.776 li
25.6147 538.123 25.5931 537.656 25.5501 537.375 cv
25.507 537.096 25.44 536.887 25.3496 536.749 cv
25.2589 536.614 25.1406 536.5 24.9942 536.415 cv
24.8474 536.33 24.589 536.229 24.2184 536.118 cv
24.2184 535.266 li
30.8389 535.266 li
30.8389 536.118 li
30.4082 536.248 30.1131 536.393 29.9589 536.555 cv
29.8047 536.72 29.6984 536.937 29.6426 537.208 cv
29.5867 537.478 29.558 537.86 29.558 538.349 cv
29.558 543.213 li
27.6963 543.6 li
26.8171 542.672 li
25.7914 543.299 24.6148 543.613 23.2874 543.613 cv
20.7706 543.613 18.8937 542.88 17.6567 541.415 cv
16.4199 539.948 15.8016 537.725 15.8016 534.751 cv
15.8016 532.823 16.1355 531.175 16.8036 529.804 cv
17.4714 528.43 18.437 527.385 19.6995 526.668 cv
20.9623 525.95 22.4213 525.591 24.0762 525.591 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
.61709 .780514 0 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /IAAAAA+Calibri-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f329fef5b5e000000cc000000606376
74203fba58ec0000012c000006886670676da1ea42ac000007b400000913
676c7966fc27b0700000d6e400001e1668656164f85c7982000010c80000
0036686865610dbb0be90000110000000024686d747885bc0baf00001124
000047d86c6f6361f275e9f5000058fc000036566d617870289a17900000
8f54000000206e616d65df42d33000008f740000308b70726570f940ca73
0000c000000016e1676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e4002effc000247b00000009000000004d53202000200000
1d390600fe0001c4079e0226200001ff0000000003c0050e000000200014
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000005aa001500a0fff8ff42fea2fdbc03b6015401cc
0108010e00ff00f5006e014000a0055e006b0570fff60122fff10547ffec
04faffec0131fff4000a03a0036600b400e1044c007c40465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000063ae1370dc4145f0f3cf50019080000000000
bbeb7ccc00000000d7497752fbdafd350a1a085000010009000200000000
0000000100000600fe0001c40aa0fbdafa860a1a00010000000000000000
00000000000008c2040e0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000006fe008d00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000004bb00160000000000000000
000000000000000000000000046800210000000000000000000000000000
000000000000000000000000000000000000000000000447000a00000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000003cb005a0000000000000000
000000000000000000000000049100860000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000006480086000000000000000000000000000000000000
00000000000004da00550000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003fd00860000
000000000000042500860000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000435001b00000000000000000000
000000000000000000000404002600000000000000000000000000000000
000000000000000000000000000000000000000003f30047000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000359004800000000000000000000
0000000000000000000000000000000000000000000000000000044b004b
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0682007e0000000000000000000000000000000000000000000000000000
0000044d0048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000044b007e000000000000
000002d8007e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002bf0036000000000244003802f5
003a00000000000000000000000000000000000000000000000000000000
00000000046c005a0000000002f5003902f5005a000000000200005a0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000029b00e600000000000000000000
0000000000000000000000000000026900cf000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000038200790000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
049a00780000000000000000000000000000000000000000000000000000
000000000000031300180000000002c90018000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000049a
007800000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000>
<0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e016101610161016101610161
016101610161016101610161016101610161016101610161016101610161
016101610161016101610161016101610161016101610161016101610161
0161016101610161016101610161016101610161016101c301c301c301c3
01c301c3024d024d024d024d024d024d024d024d024d024d02b302b302b3
02b302b302b302b302b302b302b302b302b302b302b3031a031a031a031a
031a031a035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f035f035f035f035f035f035f035f035f035f035f035f035f035f035f
035f03d503d503d503d503d503d503d50423042304230423042304230423
04230423042304230423047d047d047d04fa04fa04fa04fa04fa04fa04fa
04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa04fa
04fa04fa04fa054a054a054a054a054a054a05c705c705c705c705c705c7
05c705c705c705c706b206b206b206b206b206b206b206b206b206b206b2
06b206b206b2074707470747074707470747074707470747074707e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e207e2
07e207e207e207e207e207e207e207e207e207e207e207e207e207e208a3
08a308a308a308a308a308a308a309150915091509150915091509150915
091509150915091509b609b609b60a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340a340a340a340a340a340a340a340a340a340a340a340a34
0a340a340a340aa30aa30b000b660b660b660b660b660b660b660b660b66
0be60be60c2f0c990c990cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec0cec
0cec0cec0cec0d3a0d3a0d3a0d3a0d3a0d3a0d3a0d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870d870d870d870d870d870d870d870d870d870d87
0d870d870d870d870d870dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd6
0dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dd60dde
0dde0dde0dde0dde0dde0dde0dde0dde0e320e320ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea90ea9
0ea90ea90ea90ea90ea90ea90f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b
0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0f0b0000000100001b2a0051
0005002c000100020010002f006000000cf816e1000100010000002d0222
0000000300000000021000000000000300000001000e0210000000030000
0002000804d60000000300000003002e04b00000000300000004001804c6
0000000300000005001804de0000000300000006001804f6000000030000
00070076050e0000000300000008002a0592000000030000000900200796
000000030000000a02a00210000000030000000b005607b6000000030000
000c002a080c000000030000000d0e060836000000030000000e004a07b6
00010000000000000108163c000100000000000100071744000100000000
0002000418a70001000000000003001718940001000000000004000c189f
0001000000000005000c18ab0001000000000006000c18b7000100000000
0007003b18c30001000000000008001516430001000000000009001018fe
000100000000000a01501744000100000000000b002b190e000100000000
000c00151939000100000000000d0703194e000100000000000e0025190e
0003000104090000021205840003000104090001000e0210000300010409
0002000804d60003000104090003002e04b00003000104090004001804c6
0003000104090005001804de0003000104090006001804f6000300010409
00070076050e0003000104090008002a0592000300010409000900200796
000300010409000a02a00210000300010409000b005607b6000300010409
000c002a080c000300010409000d0e182051000300010409000e004a07b6
00a9002000320030003100380020004d006900630072006f0073006f0066
007400200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e00430061006c006900620072
0069002000690073002000610020006d006f006400650072006e00200073
0061006e0073002000730065007200690066002000660061006d0069006c
00790020007700690074006800200073007500620074006c006500200072
006f0075006e00640069006e006700730020006f006e0020007300740065
006d007300200061006e006400200063006f0072006e006500720073002e
002000490074002000660065006100740075007200650073002000720065
0061006c0020006900740061006c006900630073002c00200073006d0061
006c006c00200063006100700073002c00200061006e00640020006d0075
006c007400690070006c00650020006e0075006d006500720061006c0020
0073006500740073002e0020004900740073002000700072006f0070006f
007200740069006f006e007300200061006c006c006f0077002000680069
0067006800200069006d007000610063007400200069006e002000740069
006700680074006c007900200073006500740020006c0069006e00650073
0020006f0066002000620069006700200061006e006400200073006d0061
006c006c0020007400650078007400200061006c0069006b0065002e0020
00430061006c0069006200720069002700730020006d0061006e00790020
00630075007200760065007300200061006e006400200074006800650020
006e00650077002000720061007300740065007200690073006500720020
007400650061006d00200075007000200069006e00200062006900670067
00650072002000730069007a0065007300200074006f0020007200650076
00650061006c002000610020007700610072006d00200061006e00640020
0073006f006600740020006300680061007200610063007400650072002e
004d006900630072006f0073006f00660074003a002000430061006c0069
00620072006900200042006f006c006400560065007200730069006f006e
00200036002e0032003300430061006c0069006200720069002d0042006f
006c006400430061006c0069006200720069002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000740068
00650020004d006900630072006f0073006f00660074002000670072006f
007500700020006f006600200063006f006d00700061006e006900650073
002e00a9002000320030003100380020004d006900630072006f0073006f
0066007400200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e000d000a0048006500620072006500770020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200063006f007000790072006900670068
0074002000a9002000320030003000330020002600200032003000300037
002c002000520061006c00700068002000480061006e0063006f0063006b
002000260020004a006f0068006e00200048007500640073006f006e002e
002000540068006900730020006c00610079006f007500740020006c006f
00670069006300200066006f00720020004200690062006c006900630061
006c00200048006500620072006500770020006900730020006f00700065
006e00200073006f007500720063006500200073006f0066007400770061
0072006500200075006e00640065007200200074006800650020004d0049
00540020004c006900630065006e00730065003b00200073006500650020
0065006d0062006500640064006500640020006c006900630065006e0073
00650020006400650073006300720069007000740069006f006e00200066
006f0072002000640065007400610069006c0073002e004c007500630028
006100730029002000640065002000470072006f006f0074006800740074
00700073003a002f002f0064006f00630073002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f00610062006f007500740068007400740070003a
002f002f006c00750063006100730066006f006e00740073002e0063006f
006d004d006900630072006f0073006f0066007400200073007500700070
006c00690065006400200066006f006e0074002e00200059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f0020006300720065006100740065002c00200064
006900730070006c00610079002c00200061006e00640020007000720069
006e007400200063006f006e00740065006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
0020006c006900630065006e007300650020007400650072006d00730020
006f00720020007400650072006d00730020006f00660020007500730065
002c0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000700072006f0064007500630074002c002000730065
00720076006900630065002c0020006f007200200063006f006e00740065
006e007400200069006e0020007700680069006300680020007400680069
007300200066006f006e0074002000770061007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e00200041006e00790020006f00740068006500720020
007500730065002000690073002000700072006f00680069006200690074
00650064002e000d000d00540068006500200066006f006c006c006f0077
0069006e00670020006c006900630065006e00730065002c002000620061
0073006500640020006f006e00200074006800650020004d004900540020
006c006900630065006e00730065002000280068007400740070003a002f
002f0065006e002e00770069006b006900700065006400690061002e006f
00720067002f00770069006b0069002f004d00490054005f004c00690063
0065006e007300650029002c0020006100700070006c0069006500730020
0074006f00200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
0072006500770020201c004c00610079006f007500740020004c006f0067
00690063201d0020006100730020006a006f0069006e0074006c00790020
0064006500760065006c006f007000650064002000620079002000520061
006c00700068002000480061006e0063006f0063006b00200061006e0064
0020004a006f0068006e00200048007500640073006f006e002e0020000d
000d005000650072006d0069007300730069006f006e0020006900730020
0068006500720065006200790020006700720061006e007400650064002c
002000660072006500650020006f00660020006300680061007200670065
002c00200074006f00200061006e007900200070006500720073006f006e
0020006f0062007400610069006e0069006e00670020006100200063006f
007000790020006f006600200074006800650020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
00480065006200720065007700200061006e00640020006100730073006f
00630069006100740065006400200064006f00630075006d0065006e0074
006100740069006f006e002000660069006c006500730020002800740068
00650020201c004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065201d0029002c00200074006f
0020006400650061006c00200069006e00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
007700610072006500200077006900740068006f00750074002000720065
0073007400720069006300740069006f006e002c00200069006e0063006c
007500640069006e006700200077006900740068006f007500740020006c
0069006d00690074006100740069006f006e002000740068006500200072
0069006700680074007300200074006f0020007500730065002c00200063
006f00700079002c0020006d006f0064006900660079002c0020006d0065
007200670065002c0020007000750062006c006900730068002c00200064
006900730074007200690062007500740065002c0020007300750062006c
006900630065006e00730065002c00200061006e0064002f006f00720020
00730065006c006c00200063006f00700069006500730020006f00660020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065002c00200061006e0064
00200074006f0020007000650072006d0069007400200070006500720073
006f006e007300200074006f002000770068006f006d0020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f0066007400770061007200650020006900730020006600750072006e
0069007300680065006400200074006f00200064006f00200073006f002c
0020007300750062006a00650063007400200074006f0020007400680065
00200066006f006c006c006f00770069006e006700200063006f006e0064
006900740069006f006e0073003a000d000d005400680065002000610062
006f0076006500200063006f00700079007200690067006800740020006e
006f007400690063006500200061006e0064002000740068006900730020
007000650072006d0069007300730069006f006e0020006e006f00740069
006300650020007300680061006c006c00200062006500200069006e0063
006c007500640065006400200069006e00200061006c006c00200063006f
00700069006500730020006f00720020007300750062007300740061006e
007400690061006c00200070006f007200740069006f006e00730020006f
006600200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002e000d000d
00540048004500200053004f004600540057004100520045002000490053
002000500052004f00560049004400450044002000270041005300200049
00530027002c00200057004900540048004f005500540020005700410052
00520041004e005400590020004f004600200041004e00590020004b0049
004e0044002c002000450058005000520045005300530020004f00520020
0049004d0050004c004900450044002c00200049004e0043004c00550044
0049004e004700200042005500540020004e004f00540020004c0049004d
004900540045004400200054004f00200054004800450020005700410052
00520041004e00540049004500530020004f00460020004d004500520043
00480041004e0054004100420049004c004900540059002c002000460049
0054004e00450053005300200046004f0052002000410020005000410052
0054004900430055004c0041005200200050005500520050004f00530045
00200041004e00440020004e004f004e0049004e004600520049004e0047
0045004d0045004e0054002e00200049004e0020004e004f002000450056
0045004e00540020005300480041004c004c002000540048004500200041
005500540048004f005200530020004f005200200043004f005000590052
004900470048005400200048004f004c0044004500520053002000420045
0020004c004900410042004c004500200046004f005200200041004e0059
00200043004c00410049004d002c002000440041004d0041004700450053
0020004f00520020004f00540048004500520020004c0049004100420049
004c004900540059002c0020005700480045005400480045005200200049
004e00200041004e00200041004300540049004f004e0020004f00460020
0043004f004e00540052004100430054002c00200054004f005200540020
004f00520020004f00540048004500520057004900530045002c00200041
0052004900530049004e0047002000460052004f004d002c0020004f0055
00540020004f00460020004f005200200049004e00200043004f004e004e
0045004300540049004f004e002000570049005400480020005400480045
00200053004f0046005400570041005200450020004f0052002000540048
004500200055005300450020004f00520020004f00540048004500520020
004400450041004c0049004e0047005300200049004e0020005400480045
00200053004f004600540057004100520045002e000da92032303138204d
6963726f736f667420436f72706f726174696f6e2e20416c6c2052696768
74732052657365727665642e0d486562726577204f70656e54797065204c
61796f7574206c6f67696320636f7079726967687420a920323030332026
20323030372c2052616c70682048616e636f636b2026204a6f686e204875
64736f6e2e2054686973206c61796f7574206c6f67696320666f72204269
626c6963616c20486562726577206973206f70656e20736f757263652073
6f66747761726520756e64657220746865204d4954204c6963656e73653b
2073656520656d626564646564206c6963656e7365206465736372697074
696f6e20666f722064657461696c732e43616c696272692069732061206d
6f6465726e2073616e732073657269662066616d696c7920776974682073
7562746c6520726f756e64696e6773206f6e207374656d7320616e642063
6f726e6572732e204974206665617475726573207265616c206974616c69
63732c20736d616c6c20636170732c20616e64206d756c7469706c65206e
756d6572616c20736574732e204974732070726f706f7274696f6e732061
6c6c6f77206869676820696d7061637420696e2074696768746c79207365
74206c696e6573206f662062696720616e6420736d616c6c207465787420
616c696b652e2043616c696272692773206d616e79206375727665732061
6e6420746865206e65772072617374657269736572207465616d20757020
696e206269676765722073697a657320746f2072657665616c2061207761
726d20616e6420736f6674206368617261637465722e4d6963726f736f66
743a2043616c6962726920426f6c6456657273696f6e20362e323343616c
696272692d426f6c6443616c6962726920697320612074726164656d6172
6b206f6620746865204d6963726f736f66742067726f7570206f6620636f
6d70616e6965732e4c7563286173292064652047726f6f7468747470733a
2f2f646f63732e6d6963726f736f66742e636f6d2f7479706f6772617068
792f61626f7574687474703a2f2f6c75636173666f6e74732e636f6d4d69
63726f736f667420737570706c69656420666f6e742e20596f75206d6179
20757365207468697320666f6e7420746f206372656174652c2064697370
6c61792c20616e64207072696e7420636f6e74656e74206173207065726d
697474656420627920746865206c6963656e7365207465726d73206f7220
7465726d73206f66207573652c206f6620746865204d6963726f736f6674
2070726f647563742c20736572766963652c206f7220636f6e74656e7420
696e207768696368207468697320666f6e742077617320696e636c756465
642e20596f75206d6179206f6e6c792028692920656d6265642074686973
20666f6e7420696e20636f6e74656e74206173207065726d697474656420
62792074686520656d62656464696e67207265737472696374696f6e7320
696e636c7564656420696e207468697320666f6e743b20616e6420286969
292074656d706f726172696c7920646f776e6c6f6164207468697320666f
6e7420746f2061207072696e746572206f72206f74686572206f75747075
742064657669636520746f2068656c70207072696e7420636f6e74656e74
2e20416e79206f74686572207573652069732070726f686962697465642e
0d0d54686520666f6c6c6f77696e67206c6963656e73652c206261736564
206f6e20746865204d4954206c6963656e73652028687474703a2f2f656e
2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e73
65292c206170706c69657320746f20746865204f70656e54797065204c61
796f7574206c6f67696320666f72204269626c6963616c20486562726577
20d24c61796f7574204c6f676963d3206173206a6f696e746c7920646576
656c6f7065642062792052616c70682048616e636f636b20616e64204a6f
686e20487564736f6e2e200d0d5065726d697373696f6e20697320686572
656279206772616e7465642c2066726565206f66206368617267652c2074
6f20616e7920706572736f6e206f627461696e696e67206120636f707920
6f6620746865204f70656e54797065204c61796f7574206c6f6769632066
6f72204269626c6963616c2048656272657720616e64206173736f636961
74656420646f63756d656e746174696f6e2066696c6573202874686520d2
4c61796f7574204c6f67696320536f667477617265d3292c20746f206465
616c20696e20746865204c61796f7574204c6f67696320536f6674776172
6520776974686f7574207265737472696374696f6e2c20696e636c756469
6e6720776974686f7574206c696d69746174696f6e207468652072696768
747320746f207573652c20636f70792c206d6f646966792c206d65726765
2c207075626c6973682c20646973747269627574652c207375626c696365
6e73652c20616e642f6f722073656c6c20636f70696573206f6620746865
204c61796f7574204c6f67696320536f6674776172652c20616e6420746f
207065726d697420706572736f6e7320746f2077686f6d20746865204c61
796f7574204c6f67696320536f667477617265206973206675726e697368
656420746f20646f20736f2c207375626a65637420746f2074686520666f
6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f7665
20636f70797269676874206e6f7469636520616e64207468697320706572
6d697373696f6e206e6f74696365207368616c6c20626520696e636c7564
656420696e20616c6c20636f70696573206f72207375627374616e746961
6c20706f7274696f6e73206f6620746865204c61796f7574204c6f676963
20536f6674776172652e0d0d54484520534f465457415245204953205052
4f564944454420274153204953272c20574954484f55542057415252414e
5459204f4620414e59204b494e442c2045585052455353204f5220494d50
4c4945442c20494e434c5544494e4720425554204e4f54204c494d495445
4420544f205448452057415252414e54494553204f46204d45524348414e
544142494c4954592c204649544e45535320464f52204120504152544943
554c415220505552504f534520414e44204e4f4e494e4652494e47454d45
4e542e20494e204e4f204556454e54205348414c4c205448452041555448
4f5253204f5220434f5059524947485420484f4c44455253204245204c49
41424c4520464f5220414e5920434c41494d2c2044414d41474553204f52
204f54484552204c494142494c4954592c205748455448455220494e2041
4e20414354494f4e204f4620434f4e54524143542c20544f5254204f5220
4f54484552574953452c2041524953494e472046524f4d2c204f5554204f
46204f5220494e20434f4e4e454354494f4e20574954482054484520534f
465457415245204f522054484520555345204f52204f5448455220444541
4c494e475320494e2054484520534f4654574152452e0d004d0069006300
72006f0073006f0066007400200073007500700070006c00690065006400
200066006f006e0074002e00200059006f00750020006d00610079002000
75007300650020007400680069007300200066006f006e00740020007400
6f0020006300720065006100740065002c00200064006900730070006c00
610079002c00200061006e00640020007000720069006e00740020006300
6f006e00740065006e00740020006100730020007000650072006d006900
7400740065006400200062007900200074006800650020006c0069006300
65006e007300650020007400650072006d00730020006f00720020007400
650072006d00730020006f00660020007500730065002c0020006f006600
200074006800650020004d006900630072006f0073006f00660074002000
700072006f0064007500630074002c002000730065007200760069006300
65002c0020006f007200200063006f006e00740065006e00740020006900
6e0020007700680069006300680020007400680069007300200066006f00
6e0074002000770061007300200069006e0063006c007500640065006400
2e00200059006f00750020006d006100790020006f006e006c0079002000
280069002900200065006d00620065006400200074006800690073002000
66006f006e007400200069006e00200063006f006e00740065006e007400
20006100730020007000650072006d006900740074006500640020006200
79002000740068006500200065006d00620065006400640069006e006700
20007200650073007400720069006300740069006f006e00730020006900
6e0063006c007500640065006400200069006e0020007400680069007300
200066006f006e0074003b00200061006e00640020002800690069002900
2000740065006d0070006f0072006100720069006c007900200064006f00
77006e006c006f006100640020007400680069007300200066006f006e00
7400200074006f002000610020007000720069006e007400650072002000
6f00720020006f00740068006500720020006f0075007400700075007400
2000640065007600690063006500200074006f002000680065006c007000
20007000720069006e007400200063006f006e00740065006e0074002e00
200041006e00790020006f00740068006500720020007500730065002000
690073002000700072006f0068006900620069007400650064002e000d00
0a000d000a00540068006500200066006f006c006c006f00770069006e00
670020006c006900630065006e00730065002c0020006200610073006500
640020006f006e00200074006800650020004d004900540020006c006900
630065006e00730065002000280068007400740070003a002f002f006500
6e002e00770069006b006900700065006400690061002e006f0072006700
2f00770069006b0069002f004d00490054005f004c006900630065006e00
7300650029002c0020006100700070006c00690065007300200074006f00
200074006800650020004f00700065006e00540079007000650020004c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
770020201c004c00610079006f007500740020004c006f00670069006320
1d0020006100730020006a006f0069006e0074006c007900200064006500
760065006c006f007000650064002000620079002000520061006c007000
68002000480061006e0063006f0063006b00200061006e00640020004a00
6f0068006e00200048007500640073006f006e002e0020000d000a000d00
0a005000650072006d0069007300730069006f006e002000690073002000
68006500720065006200790020006700720061006e007400650064002c00
2000660072006500650020006f0066002000630068006100720067006500
2c00200074006f00200061006e007900200070006500720073006f006e00
20006f0062007400610069006e0069006e00670020006100200063006f00
7000790020006f006600200074006800650020004f00700065006e005400
79007000650020004c00610079006f007500740020006c006f0067006900
6300200066006f00720020004200690062006c006900630061006c002000
480065006200720065007700200061006e00640020006100730073006f00
630069006100740065006400200064006f00630075006d0065006e007400
6100740069006f006e002000660069006c00650073002000280074006800
650020201c004c00610079006f007500740020004c006f00670069006300
200053006f006600740077006100720065201d0029002c00200074006f00
20006400650061006c00200069006e00200074006800650020004c006100
79006f007500740020004c006f00670069006300200053006f0066007400
7700610072006500200077006900740068006f0075007400200072006500
73007400720069006300740069006f006e002c00200069006e0063006c00
7500640069006e006700200077006900740068006f007500740020006c00
69006d00690074006100740069006f006e00200074006800650020007200
69006700680074007300200074006f0020007500730065002c0020006300
6f00700079002c0020006d006f0064006900660079002c0020006d006500
7200670065002c0020007000750062006c006900730068002c0020006400
6900730074007200690062007500740065002c0020007300750062006c00
6900630065006e00730065002c00200061006e0064002f006f0072002000
730065006c006c00200063006f00700069006500730020006f0066002000
74006800650020004c00610079006f007500740020004c006f0067006900
6300200053006f006600740077006100720065002c00200061006e006400
200074006f0020007000650072006d006900740020007000650072007300
6f006e007300200074006f002000770068006f006d002000740068006500
20004c00610079006f007500740020004c006f0067006900630020005300
6f0066007400770061007200650020006900730020006600750072006e00
69007300680065006400200074006f00200064006f00200073006f002c00
20007300750062006a00650063007400200074006f002000740068006500
200066006f006c006c006f00770069006e006700200063006f006e006400
6900740069006f006e0073003a000d000a000d000a005400680065002000
610062006f0076006500200063006f007000790072006900670068007400
20006e006f007400690063006500200061006e0064002000740068006900
730020007000650072006d0069007300730069006f006e0020006e006f00
740069006300650020007300680061006c006c0020006200650020006900
6e0063006c007500640065006400200069006e00200061006c006c002000
63006f00700069006500730020006f007200200073007500620073007400
61006e007400690061006c00200070006f007200740069006f006e007300
20006f006600200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002e00
0d000a000d000a00540048004500200053004f0046005400570041005200
45002000490053002000500052004f005600490044004500440020002700
4100530020004900530027002c00200057004900540048004f0055005400
2000570041005200520041004e005400590020004f004600200041004e00
590020004b0049004e0044002c0020004500580050005200450053005300
20004f005200200049004d0050004c004900450044002c00200049004e00
43004c005500440049004e004700200042005500540020004e004f005400
20004c0049004d004900540045004400200054004f002000540048004500
2000570041005200520041004e00540049004500530020004f0046002000
4d00450052004300480041004e0054004100420049004c00490054005900
2c0020004600490054004e00450053005300200046004f00520020004100
200050004100520054004900430055004c00410052002000500055005200
50004f0053004500200041004e00440020004e004f004e0049004e004600
520049004e00470045004d0045004e0054002e00200049004e0020004e00
4f0020004500560045004e00540020005300480041004c004c0020005400
48004500200041005500540048004f005200530020004f00520020004300
4f005000590052004900470048005400200048004f004c00440045005200
530020004200450020004c004900410042004c004500200046004f005200
200041004e005900200043004c00410049004d002c002000440041004d00
410047004500530020004f00520020004f00540048004500520020004c00
49004100420049004c004900540059002c00200057004800450054004800
45005200200049004e00200041004e00200041004300540049004f004e00
20004f004600200043004f004e00540052004100430054002c0020005400
4f005200540020004f00520020004f005400480045005200570049005300
45002c002000410052004900530049004e0047002000460052004f004d00
2c0020004f005500540020004f00460020004f005200200049004e002000
43004f004e004e0045004300540049004f004e0020005700490054004800
2000540048004500200053004f0046005400570041005200450020004f00
52002000540048004500200055005300450020004f00520020004f005400
48004500520020004400450041004c0049004e0047005300200049004e00
2000540048004500200053004f004600540057004100520045002e000d00
0a0000>
<b20903eb411d03430001003b03410001008b0330009b033000020004032f
0064032f0074032f00d4032f0004032d032a0038001f032c032a0038001f
032b032ab2381f24bf032a00a4032a00b4032a0003ffc0032ab2232746b9
ffc0032ab21c20464163033c0038033b0055033a00380339005503380038
033700550336003803350055033400380333005503230038032200550321
003803200055002b03400001006b03400001033d003803220055006b033b
00010024033100540331000200240331003403310054033100f403310004
001403270044032700e40327000300040327002403270044032700740327
008403270094032700d4032700f40327000800a403220001003403200001
001403200024032000440320005403200074032000840320000602f9b21e
1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1f
b802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802
f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb2
1e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c
1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb8
02e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802df
b21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d
191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1f
b802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802
d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb2
1d121fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802cab21d19
1fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb8
02c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1
b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d
2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1f
b802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802
b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b2
1c321fb802afb21c331fb802aeb21c331fb802adb21c331fb802acb21c33
1fb802abb21c331fb802aab21c311fb802a9b21c311fb802a8b21c321fb8
02a7b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3
b21c321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c
331fb8029eb21c331fb8029db21c331fb8029cb21c311fb8029bb21c311f
b8029ab21c321fb80299b21c321fb80298b21c321fb80297b21c321fb802
96b21c321fb80295b21c331fb80294b21c331fb80293b21c331fb80292b2
1c331fb80291b21c331fb80290b21c331fb8028fb21c331fb8028eb21c31
1fb8028db21c321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb8
0289b21c321fb80288b21c331fb80287b21c331fb80286b21c331fb80285
b21c331fb80284b21c331fb80283b21c331fb80282b21b341fb80281b21b
341fb80280b21b341fb8027fb21b341fb8027eb21b341fb8027db21b341f
b8027cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b341fb802
78b21b341fb80277b21b341fb80276b21b341fb80275b21b341fb80274b2
1b341fb80273b21b341fb80272b21b341fb80271b21b341fb80270b21b34
1fb8026fb21a351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8
026bb21a351fb8026ab21a351fb80269b21a351fb80268b21a351fb80267
b21a351fb80266b21a351fb80265b21a351fb80264b21a351fb80263b21a
351fb80262b21a351fb80261b21a351fb80260b21a351fb8025fb21a351f
b8025eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a351fb802
5ab21a351fb80259b219371fb80258b219371fb80257b219371fb80256b2
19371fb80255b219371fb80254b219371fb80253b219371fb80252b21937
1fb80251b219371fb80250b219371fb8024fb219371fb8024eb219371fb8
024db219371fb8024cb219371fb8024bb219371fb8024ab219371fb80249
b219371fb80248b219371fb80247b219371fb80246b219371fb80245b219
371fb80244b219371fb80243b219371fb80242b219371fb80241b219371f
b80240b219371fb8023fb219371fb8023eb219371fb8023db219371fb802
3cb219371fb8023bb219371fb8023ab219371fb80239b218391fb80238b2
18391fb80237b218391fb80236b218391fb80235b218391fb80234b21839
1fb80233b218391fb80232b218391fb80231b218391fb80230b218391fb8
0301b2182e1fb8022fb218391fb8022eb218391fb8022db218391fb8022c
b218391fb8022bb218391fb8022ab218391fb80229b218391fb80228b218
391fb80227b218391fb80226b218391fb80225b2173b1fb80224b2173b1f
b80223b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb802
1fb2173b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2
173b1fb8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b
1fb80216b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb8
0212b2173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020e
b2173b1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab217
3b1fb80209b217321fb80208b217321fb80207b2173b1fb80206b2173b1f
b80205b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb802
01b2173b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2
173b1fb801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b
1fb801f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb8
01f4b2173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0
b2173b1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb217
3b1fb801ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1f
b801e7b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801
e3b216371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb2
16441fb801deb216441fb801ddb216441fb801dcb216451fb801dbb21646
1fb801dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb8
01d6b216381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2
b216441fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216
461fb801cdb216461fb801ccb216461fb801cbb216431fb801cab216231f
b801c9b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801
c5b216421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b2
16461fb801c0b216461fb801bfb216461fb801beb216461fb801bdb21646
1fb801bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb8
01b8b216421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4
b216441fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216
451fb801afb216451fb801aeb216461fb801adb216461fb801acb216461f
b801abb216461fb801aab216461fb801a9b215341fb801a8b215411fb801
a7b215411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b2
15521fb801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f
1fb8019eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8
019ab2154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196
b215501fb80195b215521fb80194b215521fb80193b215521fb80192b215
411fb80191b2154f1fb80190b215501fb8018fb215501fb8018eb215511f
b8018db215521fb8018cb215521fb8018bb215521fb8018ab214581fb801
89b214591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2
145b1fb80184b2145c1fb80183b214591fb80182b2145d1fb8018140af14
5d1ff00f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561f
b20b561fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b
561faa0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561f
a30b561fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a
681f980a681f970a681f960a681f950a681f940a681f930a681f920a681f
910a681f9009681f8f09681f8e09681f8d09681f8c09681f410902fc02fa
0056001f02fb02fa0068001f017fb213321fb8017eb212371fb80174b212
371fb80173b211421fb80172b211421fb80171b211421fb80170b211421f
b8016fb211421fb8016eb211421fb8016db211421fb8016cb211421fb801
6bb211421fb8016ab211421fb8013cb211421fb8013bb210421fb8013ab2
10421fb80139b210421fb80138b210421fb80137b210421fb80136b21042
1fb80135b210421fb80134b210421fb80133b210421fb80132b20f451fb8
0131b20f451fb80130b20f451fb80112b20f451fb80111b20f451fb80110
b20f451fb8010fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e
481fb8010bb20e481fb8010ab20e481fb80109b20e481fb80108b20e481f
b80107b20d4a1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a
1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda
0c4e1fd90b561fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b56
1fba0b561f9d0a681f9c0a681fb80180b213321fb8017ab211401fb80179
b211421fb80178b211421fb80177b211421fb80176b211421fb80175b211
421fb80143b211421fb80142b210421fb80141b210421fb80140b210421f
b8013fb210421fb8013eb210421fb8013db20f451fb80115b20f451fb801
14b20f451fb80113b20f451fb903030302b2401fa4be030200b4030200c4
030200030300b213321fb8017bb213321fb80153b212371fb80152b21140
1fb80151b211401fb80150b211401fb8014fb211401fb8014eb211401fb8
014db211401fb8014cb211401fb8014bb211401fb8014ab211401fb80149
b211401fb80148b211401fb80147b211401fb80146b211401fb80145b211
401fb80144b211401fb80122b211401fb80121b210421fb80120b210421f
b8011fb210421fb8011eb210421fb8011db210421fb8011cb210421fb801
1bb210421fb8011ab210421fb80119b210421fb80118b20f451fb80117b2
0f451fb80116409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e48
1ff80e481ff70e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff1
0d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e
1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc6
0c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b56
1fb40b561fb30b561f9b0a681fb802fdb212371fb8017db212371fb8017c
b212371fb80169b2112e1fb80168b2112e1fb80167b211401fb80166b211
401fb80165b211401fb80164b211401fb80163b211401fb80162b211401f
b80161b211401fb80160b211401fb8015fb211401fb8015eb211401fb801
5db211401fb8015cb211401fb8015bb211401fb8015ab211401fb80159b2
11401fb80158b211401fb80157b211401fb80156b211401fb80155b21140
1fb80154b211401fb8012fb211401fb8012eb210421fb8012db210421fb8
012cb210421fb8012bb210421fb8012ab210421fb80129b210421fb80128
b210421fb80127b210421fb80126b210421fb80125b20f451fb80124b20f
451fb80123b20f451fb80105b20f451fb80104b20f451fb80103b20f451f
b80102b20f451fb80101b20e481fb8010040a20e481fff0e481ffe0e481f
e80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c
4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f83012e1f82488055
81ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb
7d067c487a557bab7a55047a147a020a7948775578ab77550b77010c7648
75555475e475f4750314755475647574759475d475e47507a475b475c475
03b8ffc0401275383b46807590750214757475020075010fb8ffc0402175
0b0e467448725573ab725504723472023bf47201e0720102307201507260
7202b8ffc0b372242846b8ffc0403572161a461072307240720371486f55
70ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d46
6e486d55df6d0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef
02fe40ff016b032e1f6a03251f692e675568ab6755662e645565ab645563
2e6255612e60555f2e5d555eab5d555c2e5a555bab5a55592e5855570325
1f562e545555ab5455532e515552ab51554f2e4e554e03251f4d2e4b554c
ab4b554a2e485549ab4855504801472e46554503361f001f01001e01001e
701e801ef01e040b601d701d02701de01df01d03701cf01c027f1b010f1a
7f1a8f1a030f1a8f1a020f1a8f1a020f191f198f199f19af19050f198f19
9f19030c7012801202701180110230114011d011e011040011a011020f8f
0f9f0faf0f034f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f
0e030f0eaf0ebf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f
0d038f0d01400d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946
ef0aff0a02400a242746ef09ff0902ff0901000301200101000110012001
0308b8ffc0b401151f4603bd0100010000050001019000542b4bb807ff52
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b2
03a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d4259
2b5e73757373742b732b73742b2b73745e732b5e7374757374755e737475
73015e7374737475757473745e737473002b2b732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73732b2b7374752b2b732b2b73
755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b2b73742b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b0073747373747374732b73742b2b2b2b2b2b2b2b2b732b2b2b
73737373185f5e00000000>
[7703 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
3 706 115 <00010016fffa04a605140024004eb10102435558b200191ab8024db42419
0c1917b80294400b400d191f5218051252055500183f3f12393f01192f18
d41aed123910dded123930311bb71f5218051252055500183f3f12393f30
3159250e0323222e0427012626363633321e02170133013e033332161606
0703110510243e3228392819110904fe7f0c05193c362e341c0b05013b01
0135040c1d362f2e3313070c2e11150b030104080c110d047b242a150504
0a140ffc1a03e111150c0406172a2300>IAAAAA+Calibri-Bold AddT42Char 
3 3428 272 <00010048ffea032103d60035009bb10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1afd2bd42bed3ffd
2bd4ed012fedc43230311bbc0018011f001f0024ffe8b40b0f014c24b801
1fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b240
094d00183f1afd2bd42bed3ffd2bd4ed30315925140e0623222e0235343e
0233321e0615140623222e0223220615141e0233323e0233321e02032103
0507183a4a572e679f6c374378a462284d43351609050314101126344832
62681a334d33344b38260d090c0704b01a23180f17211a10407db47486c3
803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00>IAAAAA+Calibri-Bold AddT42Char 
3 4036 373 <0001007efffa060903d7005000a9b10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1aed2b3fed2b012fed39d4ed11392fed3930311bb900
10ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d400e
40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1aed2b3fed2b
30315925140e0223222e023511342e022322060711140e0223222e023511
342e022322060711140e0223222e023511343e0233321e02151536363332
1e02173e0333321e021506090c1c302526301d0b112335252d5c360c1d30
2425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a4a93
503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a351d
4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a0f0a
037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>IAAAAA+Calibri-Bold AddT42Char 
3 4422 381 <00020048ffe9040403d700130027006fb10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1aed2b3fed2b012fedd4ed30311bb90019ffe8b40b
0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1aed
2b3fed2b30315901140e0223222e0235343e0233321e0205342e0223220e
0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fefd15
32533f3854361b1631543e3954361a01e972bc884a427eb87672bd874a41
7eb881426f522e294f6f47426f522d294e6f>IAAAAA+Calibri-Bold AddT42Char 
3 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>IAAAAA+Calibri-Bold AddT42Char 
IAAAAA+Calibri-Bold /CharStrings get begin
/V 115 def
/c 272 def
/m 373 def
/o 381 def
end
IAAAAA+Calibri-Bold /Encoding get
dup 86 /V put
dup 99 /c put
dup 109 /m put
dup 111 /o put
pop
end
%ADOEndSubsetFont
/IILCOL+Calibri-Bold /IAAAAA+Calibri-Bold findfont ct_VMDictPut
/IILCOL+Calibri-Bold*1 
[86{/.notdef}rp /V 12{/.notdef}rp /c 9{/.notdef}rp /m /.notdef /o 
144{/.notdef}rp]
IILCOL+Calibri-Bold nf
IILCOL+Calibri-Bold*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
1032.35 259.821 mo
(Vcom)
[14.3595 11.0948 14.4125 0 ]xsh
0 .961578 .907591 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOL+Calibri-Bold gcheck setglobal} if
3 902 121 <00010021fffa04440514002f0078b10102435558bc002202940018002402
50400a2e172f2e182e182e000cb80264b2160b0ab802954011000b402323
0b2952230b111d521155055500183f3f3f1239393f01192f332f1a1810dd
ed10dded1239392f2f12393910ed10ed30311b400b2952230b111d521155
055500183f3f3f1239393f303159251616060623222e022703030e032322
2626363701012626363633321e021713133e03333216160607010427120b
183f382f361f0e05f3f2060e1f372d3439140c130136fee0120d173e392f
37200d06e3dd060d1d332d323a160b11fee063232a16060409100c01d3fe
2d0c10090406162a2302350213242b15050409100cfe5401ac0c10090405
162a24fdf000>IILCOL+Calibri-Bold AddT42Char 
IILCOL+Calibri-Bold /CharStrings get begin
/X 121 def
end
IILCOL+Calibri-Bold /Encoding get
dup 88 /X put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOL+Calibri-Bold*1 
[86{/.notdef}rp /V /.notdef /X 10{/.notdef}rp /c 9{/.notdef}rp /m 
/.notdef /o 144{/.notdef}rp]
IILCOL+Calibri-Bold nf
IILCOL+Calibri-Bold*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
1032.35 307.316 mo
(VX)
[15.6321 0 ]xsh
gsave
3.22501 568.255 mo
1121.39 568.255 li
1121.39 15.3127 li
3.22501 15.3127 li
cp
eclp
0 .302953 .905394 0 cmyk
%ADOBeginSubsetFont: IAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOL+Calibri-Bold gcheck setglobal} if
3 2958 258 <00020047ffe9037603d7003300400127b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1aed2b3fed2b2b12392f5f
5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed323930311b
400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e41
2ab80118401be02201037d228d2202402250226022030f221f22020c0422
22041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe8400910014d
3de4400c4d0400182f3f1aed2b3fed2b2b12392f5f5e5d5d5d5f5ded1112
392f2b5d71ed5d7130315925140606232226263535060623222e0235343e
02333335342e0223220e0223222e0235343e0433321e02150723220e0215
1416333236370376142b2a2d2911378d56477757303d79b4775711274130
3f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35592e
1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a2617
1f241d231e132955865cda122433213840363400>IILCOL+Calibri-Bold AddT42Char 
3 4650 393 <0002007efe95040003d7002a003d0094b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1aed2b3f3f3fed
2b121739012fd4ed10ed323930311bb60a363521040530b8ffe8b40b0f01
4c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d00183f
1aed2b3f3f3fed2b12173930315901140e0223222e022711140e0223222e
023511343e0233321e0215153e0333321e0205342e0223220e0207111616
33323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e2919
0a274b4e532f628a5728fefa11294332193133361e35603431452c1501ed
77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a6928
3d29144d86b277396952310f223628feda4349325166>IILCOL+Calibri-Bold AddT42Char 
3 4972 396 <0001007efffa02bb03d70033006eb10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1aed2b5f5e5d012fc4ed3930311bb9000affe8
b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1aed
2b30315901140e0223222e0223220e020711140e0223222e023511343e02
33321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c0c1d
302525301d0c0a1a291f202a170a233e38381c0d1e20180b050402034b24
2e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a0f0a
6f3241260f0307090a0c152a>IILCOL+Calibri-Bold AddT42Char 
IILCOL+Calibri-Bold /CharStrings get begin
/a 258 def
/p 393 def
/r 396 def
end
IILCOL+Calibri-Bold /Encoding get
dup 97 /a put
dup 112 /p put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOL+Calibri-Bold*1 
[86{/.notdef}rp /V /.notdef /X 8{/.notdef}rp /a /.notdef /c 
9{/.notdef}rp /m /.notdef /o /p /.notdef /r 141{/.notdef}rp]
IILCOL+Calibri-Bold nf
IILCOL+Calibri-Bold*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
1032.35 354.43 mo
(Vramp)
[14.9871 8.9231 13.0807 21.6597 0 ]xsh
grestore
149.889 532.292 mo
162.722 271.467 li
153.96 271.043 li
141.127 531.863 li
cp
.61709 .780514 0 0 cmyk
f
82.7143 535.197 mo
145.801 534.433 li
145.692 525.679 li
82.6079 526.443 li
cp
f
734.726 454.32 mo
730.366 465.647 li
738.288 465.647 li
cp
734.194 450.81 mo
737.491 450.81 li
743.047 467.607 li
743.047 468.536 li
727.415 468.536 li
727.415 467.581 li
cp
.997223 .918425 .647791 .507591 cmyk
ef
%ADOBeginSubsetFont: KAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f328821eb1d000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c7966f51c36ed0000d328000059ac68656164fa71cec900001a800000
00366868656112c4205a00001ab800000024686d7478cd512d7900001adc
000055c06c6f63613295182a0000709c00003b7e6d617870280111e70000
ac1c000000206e616d65030148160000ac3c000015c370726570664ecf85
0000c2000000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00006ff420024ff02000000000000004d53202000c00000
20830639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006fd71b65fc1955f0f3cf5001b080000000000b9e6
983d00000000d630eee4f434ec4a16f118ef000000090002000000000000
00010000063bfe390161175af434fda416f1000100000000000000000000
000000000d22054400be0000000001c3000001c3000004fc000600000000
0000000000000000049a00790000000000000000057e0079000000000000
000000000000044b0079068600750000000000000000048b007900000000
04f8007903f8007000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000387
006904700069000000000000000003f4003f000000000239005300000000
00000000000000000000000000000000043f00690000000000000000034f
00530000000002b500250000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000239005300000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000045dfffe0000000003ef006904aa006a0417006800000000044d
006904e3006802610068000000000000000003b7006805bb006500000000
048300690433006800000000046a006803a4005e04390039000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002610068000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002ab005d034e005d000000000000000002f70041
0000000001c2004e0000000000000000000000000000000000000000032c
005d00000000000000000284004e00000000021c002e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
024700c7000000000000fe850000fe850000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000024900c0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000032500910000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000002bf
002b03ae003103b000330000000000000000000000000000000000000000
0000000000000000043600b10436006f0436008100000000000000000000
00000000000000000000000000000000000002e5002c03e0002903e3003f
00000000000000000000000000000000000000000000000000000000046e
00b2046e0081046e00900000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000342007e034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000342007e03420063034200730000000000000000000000000000
000000000000000000000000000003b00015000000000000000000000000
035b005d000000000000000003f6005d000000000000000000000000031a
005d04af005d00000000000000000357005d000000000399005d02fa0062
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000001c2004e000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000004a100b704a10088
04a1009d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000005970014
000000000000000000000000051f008a00000000000000000613008a0000
0000000000000000000004c0008a0731008800000000000000000515008a
000000000583008a047c008a000000000000000000000000000000000000
000000000000000000000000000000000000040200820501008200000000
0000000004780057000000000298006b0000000000000000000000000000
00000000000004ca0082000000000000000003c6006b000000000321003a
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000298006b0000000000000000000000000000000004c200b804c2
009004c200a8000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000060d
002200000000000000000000000005810099000000000000000006800099
0000000000000000000000000517009907af00990000000000000000057b
00990000000005e7009904e200a100000000000000000000000000000000
000000000000000000000000000000000000000004610099056c00990000
00000000000004dd006b0000000002e20080000000000000000000000000
000000000000000005340099000000000000000004210080000000000376
004b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002e200800000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000>
<00000076007600760076011001100110011001bb01bb01bb025102510251
025102b9035b035b035b03d003d00476052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d052d
052d052d052d052d052d052d052d052d052d052d052d052d052d052d05c2
065a065a065a0783078307f407f407f407f407f407f408540854085408df
08df09570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980998099809980998099809980998
099809980998099809980998099809980a0e0a0e0a750acb0b540b540bc9
0c3c0c790c790c790cc90d440d440d890df30df30e7f0ef50f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b0f4b
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610f610f610f610f610f610f610f610f610f610f610f610f610f61
0f610f610fba10391039103911271127116f116f116f116f116f116f11c3
11c311c312241224127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d127d127d127d127d127d127d127d127d
127d127d127d127d127d127d127d12b212b212c612e512e512e512e512e5
12e512e512e512e512e512e512e512e512e5131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b131b131b
131b131b131b131b131b131b131b131b131b131b131b131b131b13451345
134513451345134513451345134513451345134513451345134513451345
13451345134513451345134513451345134513451345134513451345138c
13fc1491149114911491149114911491149114db154b15dc15dc15dc15dc
15dc15dc15dc15dc1626169017131713171317131713171317131713176e
17f8189a189a189a189a189a189a189a189a18a818b618c418c418c418c4
18c418c418c418c418c418c418c418c418c418d718ea18fd18fd18fd18fd
18fd18fd18fd18fd18fd18fd18fd18fd18fd197c1a0d1ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac11ac1
1ac11ac11ac11ac11ac11ac11ac11ac11acf1add1aeb1aeb1aeb1aeb1aeb
1aeb1aeb1aeb1b521b521b521b521bc91bc91bc91c4f1c4f1c4f1c4f1c9b
1d241d241d241d871d871e111e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c
1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1e7c1ead1ead1ead
1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead
1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead1ead
1ead1ead1ead1ead1ead1ef91f521fb11fb11fb11fb11fb11fb11fb11fb1
1fb11fb11fb11fb11fb11fb1200320032003200320752075207520e420e4
20e420e4212921ab21ab21ab22032203227e22f022f022f022f022f022f0
22f022f022f022f0234123c523c523c5247b247b24c324c324c324c324c3
24c3250e250e250e2571257125c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225c225c225c225c225c225c225c2
25c225c225c225c225c225c225c225c225fb25fb25fb25fb25fb263b2692
26f926f926f926f926f926f926f926f926f926f926f926f926f926f9274b
274b274b274b27b627b627b6282e282e282e282e287128e428e428e42940
294029bb2a212a212a212a212a212a212a212a212a212a212a662ad52ad5
2ad52b7e2b7e2bc02bc02bc02bc02bc02bc02c052c052c052c5b2c5b2ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca22ca2
2ca22cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd62cd6
2cd62cd62cd62cd62cd62cd62cd62cd62cd62cd60000000100001dbe005f
0004002e000200020010002f0086000009a41128000200010000002f023a
000000000000000d03880000000000000000000e006c0388000000030000
0000006403f400000003000000010018046e0000000300000002000e0486
0000000300000003002e045800000003000000040018046e000000030000
0005001804940000000300000006001604ac0000000300000007007604c2
0000000300000008002a0402000000030000000900460538000000030000
000a070a057e000000030000000b00560c88000000030000000c00280cde
000000030000000d03880000000000030000000e006c0388000100000000
000000320d060001000000000001000c0d43000100000000000200070d4f
000100000000000300170d380001000000000004000c0d43000100000000
0005000c0d560001000000000006000b0d620001000000000007003b0d6d
000100000000000800150d0d000100000000000900230da8000100000000
000a03850dcb000100000000000b002b1150000100000000000c0014117b
000100000000000d01c4118f000100000000000e00361353000300010409
0000006403f400030001040900010018046e0003000104090002000e0486
0003000104090003002e045800030001040900040018046e000300010409
0005001804940003000104090006001604ac0003000104090007007604c2
0003000104090008002a0402000300010409000900460538000300010409
000a070a057e000300010409000b00560c88000300010409000c00280cde
000300010409000d03880000000300010409000e006c0388004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e00740073002f0064006500660061
0075006c0074002e006100730070007800a9002000320030003100370020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020007200690067
006800740073002000720065007300650072007600650064002e004d0069
00630072006f0073006f00660074003a002000430061006d006200720069
00610020004d0061007400680052006500670075006c0061007200560065
007200730069006f006e00200036002e0039003900430061006d00620072
00690061004d00610074006800430061006d006200720069006100200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002e004d006f006e006f007400790070006500200049
006d006100670069006e006700200061006e00640020005400690072006f
002000540079007000650077006f0072006b007300430061006d00620072
0069006100200068006100730020006200650065006e0020006400650073
00690067006e0065006400200066006f00720020006f006e002d00730063
007200650065006e002000720065006100640069006e006700200061006e
006400200074006f0020006c006f006f006b00200067006f006f00640020
007700680065006e0020007000720069006e007400650064002000610074
00200073006d0061006c006c002000730069007a00650073002e00200049
00740020006800610073002000760065007200790020006500760065006e
002000730070006100630069006e006700200061006e0064002000700072
006f0070006f007200740069006f006e0073002e00200044006900610067
006f006e0061006c00200061006e00640020007600650072007400690063
0061006c00200068006100690072006c0069006e0065007300200061006e
006400200073006500720069006600730020006100720065002000720065
006c00610074006900760065006c00790020007300740072006f006e0067
002c0020007700680069006c006500200068006f00720069007a006f006e
00740061006c002000730065007200690066007300200061007200650020
0073006d0061006c006c00200061006e006400200069006e00740065006e
006400200074006f00200065006d00700068006100730069007a00650020
007300740072006f006b006500200065006e00640069006e006700730020
0072006100740068006500720020007400680061006e0020007300740061
006e00640020006f007500740020007400680065006d00730065006c0076
00650073002e002000540068006900730020007000720069006e00630069
0070006c00650020006900730020006d006f007300740020006e006f0074
00690063006500610062006c006500200069006e00200074006800650020
006900740061006c00690063007300200077006800650072006500200074
006800650020006c006f0077006500720063006100730065002000630068
006100720061006300740065007200730020006100720065002000730075
0062006400750065006400200069006e0020007300740079006c00650020
0074006f0020006200650020006100740020007400680065006900720020
006200650073007400200061007300200065006c0065006d0065006e0074
00730020006f006600200077006f00720064002d0069006d006100670065
0073002e0020005700680065006e002000430061006d0062007200690061
0020006900730020007500730065006400200066006f0072002000630061
007000740069006f006e0073002000610074002000730069007a00650073
0020006f00760065007200200032003000200070006f0069006e0074002c
0020007400680065002000200069006e007400650072002d006300680061
007200610063007400650072002000730070006100630069006e00670020
00730068006f0075006c006400200062006500200073006c006900670068
0074006c00790020007200650064007500630065006400200066006f0072
0020006200650073007400200072006500730075006c00740073002e0020
005400680065002000640065007300690067006e002000690073006e0027
00740020006a00750073007400200069006e00740065006e006400650064
00200066006f007200200062007500730069006e00650073007300200064
006f00630075006d0065006e00740073003a002000540068006500200072
006500670075006c00610072002000770065006900670068007400200068
006100730020006200650065006e00200065007800740065006e00640065
006400200077006900740068002000610020006c00610072006700650020
0073006500740020006f00660020006d00610074006800200061006e0064
00200073006300690065006e00630065002000730079006d0062006f006c
0073002e002000540068006500200047007200650065006b00200061006e
006400200043007900720069006c006c0069006300200068006100730020
006200650065006e002000640065007300690067006e0065006400200075
006e00640065007200200063006c006f0073006500200073007500700065
00720076006900730069006f006e0020006f006600200061006e00200069
006e007400650072006e006100740069006f006e0061006c002000740065
0061006d0020006f006600200065007800700065007200740073002c0020
00770068006f002000610069006d0065006400200074006f002000730065
00740020006100200068006900730074006f0072006900630061006c0020
006e006500770020007300740061006e006400610072006400200069006e
0020006d0075006c00740069002d00730063007200690070007400200074
007900700065002000640065007300690067006e002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f006300740066006f006e007400730068007400740070003a002f
002f007700770077002e0066006f006e00740073002e0063006f006da920
32303137204d6963726f736f667420436f72706f726174696f6e2e20416c
6c207269676874732072657365727665642e4d6963726f736f66743a2043
616d62726961204d617468526567756c617256657273696f6e20362e3939
43616d627269614d61746843616d6272696120697320612074726164656d
61726b206f6620746865204d6963726f736f66742067726f7570206f6620
636f6d70616e6965732e4d6f6e6f7479706520496d6167696e6720616e64
205469726f2054797065776f726b7343616d627269612068617320626565
6e2064657369676e656420666f72206f6e2d73637265656e207265616469
6e6720616e6420746f206c6f6f6b20676f6f64207768656e207072696e74
656420617420736d616c6c2073697a65732e204974206861732076657279
206576656e2073706163696e6720616e642070726f706f7274696f6e732e
20446961676f6e616c20616e6420766572746963616c20686169726c696e
657320616e6420736572696673206172652072656c61746976656c792073
74726f6e672c207768696c6520686f72697a6f6e74616c20736572696673
2061726520736d616c6c20616e6420696e74656e6420746f20656d706861
73697a65207374726f6b6520656e64696e67732072617468657220746861
6e207374616e64206f7574207468656d73656c7665732e20546869732070
72696e6369706c65206973206d6f7374206e6f7469636561626c6520696e
20746865206974616c69637320776865726520746865206c6f7765726361
7365206368617261637465727320617265207375626475656420696e2073
74796c6520746f206265206174207468656972206265737420617320656c
656d656e7473206f6620776f72642d696d616765732e205768656e204361
6d62726961206973207573656420666f722063617074696f6e7320617420
73697a6573206f76657220323020706f696e742c207468652020696e7465
722d6368617261637465722073706163696e672073686f756c6420626520
736c696768746c79207265647563656420666f7220626573742072657375
6c74732e205468652064657369676e2069736e2774206a75737420696e74
656e64656420666f7220627573696e65737320646f63756d656e74733a20
54686520726567756c61722077656967687420686173206265656e206578
74656e64656420776974682061206c6172676520736574206f66206d6174
6820616e6420736369656e63652073796d626f6c732e2054686520477265
656b20616e6420437972696c6c696320686173206265656e206465736967
6e656420756e64657220636c6f7365207375706572766973696f6e206f66
20616e20696e7465726e6174696f6e616c207465616d206f662065787065
7274732c2077686f2061696d656420746f20736574206120686973746f72
6963616c206e6577207374616e6461726420696e206d756c74692d736372
69707420747970652064657369676e2e687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f7777772e666f6e74732e636f6d4d6963726f736f66742073
7570706c69656420666f6e742e20596f75206d6179207573652074686973
20666f6e7420746f206372656174652c20646973706c61792c20616e6420
7072696e7420636f6e74656e74206173207065726d697474656420627920
746865206c6963656e7365207465726d73206f72207465726d73206f6620
7573652c206f6620746865204d6963726f736f66742070726f647563742c
20736572766963652c206f7220636f6e74656e7420696e20776869636820
7468697320666f6e742077617320696e636c756465642e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e20416e79206f7468
6572207573652069732070726f686962697465642e687474703a2f2f7777
772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f6e
74732f64656661756c742e6173707800b9002001feb40918014a20b801fa
b40918014a20b801f9b40918014a20b801f8b40918014a20b801f7b40918
014a20b801f6b40918014a20b801f0b40918014a20b801efb40918014a20
b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b801eb
b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b40918
014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a20
b801e0b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1
b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918
014a20b801ccb40918014a20b801a0b40918014a20b8018fb40918014a20
b8018eb40918014a20b8018ab40918014a20b80188b40918014a20b80187
b40918014a20b80186b40918014a20b8015bb40918014a20b8015ab40918
014a20b80159b40918014a20b80158b40918014a20b80154b40918014a20
b80150b40918014a20b8014cb40918014a20b8014bb40918014a20b8014a
b40918014a20b80136b40918014a20b80130b40918014a20b8012fb40918
014a20b8012db40918014a20b8012cb40918014a20b80109b40918014a20
b80107b40918014a20b8010540ff0918014a20f40918014a20f20918014a
20f10918014a20f00918014a20ef0918014a20ed0918014a20ec0918014a
20ea0918014a20e50918014a20e40918014a20e30918014a20e10918014a
20de0918014a20da0918014a20d80918014a20d30918014a20cd0918014a
20cc0918014a20ca0918014a20c90918014a20c80918014a20c60918014a
20c40918014a20c20918014a20c00918014a20bf0918014a20bd0918014a
20b30918014a20b10918014a20af0918014a20a50918014a20a40918014a
20a00918014a208e0918014a208d0918014a208c0918014a208b0918014a
208a0918014a20890918014a20850918014a20840918014a208309180140
3e4a20800918014a207f0918014a207e0918014a207d0918014a20620918
014a20510918014a20500918014a20480918014a20420918014a200e0918
014a0f41630441001f0441002f0441003f0441004f0441005f0441006f04
41007f0441008f0441009f044100af044100bf044100cf0441000d005f03
ea0001008003f4009003f400a003f400b003f400c003f400d003f400e003
f400f003f40008002f0433003f0433004f0433005f0433006f0433007f04
33008f0433009f043300af043300bf0433000a001f0434002f0434003f04
34004f0434005f0434006f0434007f0434000700cf042300df042300ef04
230003000f0423001f0423003f0423005f0423009f0423402305f0e201b0
fdc0fd02c0fdd0fde0fdf0fd04d0fde0fdf0fd03c0ffd0ffe0fff0ff0470
410a0425000100c0042500d0042500e0042500f00425400c04e0bef0be02
e0bef0be020f41110421003f04210002001002580001000f025800e00258
0002000f040a0001000f0408b4010f26010f411b04070001000f04060001
007f02170001000f029c001f029c002f029c003f029c004f029c005f029c
000600df029c00ef029c00ff029c405303dfe016171cd4d516171c7b7c16
1b7b7c19d1d216171c767716171c6d7016171c6c6f16171c6b6e161b6b6e
7f721a747514151c676a14151c666914151c6568141b656885711a197316
7a431921794319211941310292009902920002001c0292002c0292000202
99029a029b000c028d028e028f000c028a028b028c000c001b0299008b02
990002000f0299009f029900bb029900db0299000402a5028b02a7000d02
9f029a02a1000d029c028e029e000dffe8028eb2142339b9ffe8029ab214
2339411a0282027d0008002b0281027c0005002b027e027a0004002b027d
027a0004002b027a02570005002b027702670005002b02670257b2052b20
b80270b21b2039bd027202570004002b026e0257b2042b20b80257b33133
3909414102710019027100aa025700b8025700040069027100da025700e8
02570003028402790006002b028002790004002b027f02790008002b027b
02790008002b027902560006002b027802660000002b027602660008002b
027502660008002b027302660008002b026602560006002b027402560000
002b027302560000002b026f0256b2072b29415002560001008602560001
025d025e025f000c025102520253000c024e024f0250000c000b024e000b
0251000a025d003b024e00590251007602510075025d009b024e00b5025d
00d9024e000a0269024f026b000d0263025e0265000d026002520262000d
0269003c0263003c0260003c025d003c0251003c024e003c0244023c0005
002b024302110002002b0240023c0005002b023e02110004002b023d0211
b2042b464115023c00010046023c00c6023c0002023b02110007002b0239
02110006002b023702110004002b02210211b2072b20b80233b213163941
16022f02110004002b022e02110004002b022d02110005002b022c021100
04002b022b02110004002b022a0211b2052b474142021100010005021100
a502110002003b0233004b02330064021100740211000402420210000700
2b024102100005002b023f02100002002b023a02100007002b0238021000
07002b023602100007002b023502100007002b022002100007002b023402
100005002b023102100005002b023002100007002b022902100007002b02
280210b2072b8a416e02100001001a021000b90232000202170218021900
0c020b020c020d000c02080209020a000c000b0208000b020b000a021700
3b02080059020b0076020b00750217009b020800b5021700d90208000a02
2302090225000d021d0218021f000d021a020c021c000d0223003c021d00
3c021a003c0217003c020b003c0208003c0153014d0002002b014e014d00
02002b0156015c0004002b0155015c0004002b0157015c0002002b01da01
d4000a002b01d801d4000a002b01e501e00005002b01e101e00005002b01
e001eb0005002b01ef01eb0002002b01ec01ebb2052b40b801ebb2090a39
b9ffc00104b2313139b9ffc00104b21b2039b8ffc0b4c71f203940b80103
b22c2c39ba010301000100b21f2223b901030100b3c01e1e23ba01030100
0100b21d1d23b901030100b3c01c1c23ba010301000100b21b1b23b90103
0100b3c0141a23b901030100b3800b1323b901030100b340090a23b90102
0101b340508b23b901010100b340508b23410a01020100004f001f010101
00004f001fffc00100b2505539b9ffc00100b323233940b80100b71d1e39
40e81b1b39b8ffc0b4e724253956b80108401301ddd8052b3bd64bd60240
b00b0d39c1c0052bb8ffc040379f131339409c2f30399c9a012b9b9a052b
9a91042ba999042b9992032b40c52c31399291032b889198910209631863
c7630320630d0f39b8fff0b4471f2539cbb8010a401c019895012b379e01
9695022b1897262a3917970110953f4039d99501bc0136012c0003002b01
30b2cd042bb8012fb2cc042bb8012db2cd032bb8012cb2cd042bbc014c01
4a0003002b014ab27f052bb9015b0154b2042b0f41190154001f01540002
018601880002002b018701880004002b018901880004002b0188018f0003
002b018e018f0004002b018fb385052b3f410c01a0000101ce01cc000300
2b01d201cc0006002b01d101ccb2062b40b80107b2323239b80107b2af03
2bb8ffc0b3de1e2039b8ffc04011dc181a39c9ca032bcac8042b40c82122
39b8ffc0b3c8151739b8ffc0b3c6242539b8ffc0b3c6161a39b8ffc04023
bf2d31395051032b40511b1b39e5cc042be4e3032b40e32a2a39cdcc052b
40cc424439b8ffc0b3cc272739b8ffc0b7cc171a39c2ea012bb80109b2da
032bb8ffc04033ea252539dfea0140c41b1d39b3b1052bb1c0052b40c03d
3d39c0af042bd3af052baf7d052b20da121639c5bd01208e01108e01b8ff
c0b38b363839b8ffc0b38b272b39b8ffc040328b171a398c8d052b8d8a04
2b898a052b8a7f052bf4ef032bf2ef052bf180022bf0a0042bef85052b40
ec32343940ec1b1d39b8ffc0b3a0515239b8ffc0b3a0454739b8ffc0b3a0
383c39b8ffc0400ba02c3139dfa001a080022bb8ffc0b394313139b8ffc0
40d480181a39817f012b7e7d052b7d7f052bed7f052bd87f017f85251f88
85012b8785012b8485052b8385052b298539854985036685014685013685
012685011b37151836151535151234150f33150c3215093115063015032f
15002e15f9fa0f20f930f90226270e28270f2a2b0e2c2b0f22230e24230f
1e1f0e201f0f00051005023c3d0e0b3c743c993c030f10110c090a0b0c06
07080c0304050c0001020c0603641f702a010f2a010b0f4b0f020b003b00
44037403ab00db0f060b000b030b0f3b003b0959035b0976039b009b0999
0fd9000cb9010b010c402a0f1b011d0d18071a0d1510170d1204140d2ff9
6ff99ff9a0f9cff9d0f9063ff940f9aff9b0f9e0f90500b8010bb22ff92f
ba010b003f010b403004fb3cf93cf73cf53c2c3c2a3c283c263c243c223c
203c1e3c1b3c183c153c123c0f3c093c063c033c003c035050335401b012
4b004b5442b013014b004b5342b0332b4bb8032052b0322b4bb009505b58
b101018e59b0332bb00288b8010054b00488b8020054b012435a5b58b801
19b101018e851bb900010100b04b60858d592b2b1d42b0644b5358b20380
801d4259b0324b5358b20390901d4259004bb03251b01b23422b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b2b73747573742b
2b2b2b2b2b732b732b2b2b2b2b2bb1282645b02a4561b02c4560442b2b73
2b2b2b2b2b2b2b2b2b2b2b0173737373742b2b2b2b2b742b2b2b2b2b2b2b
742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7475732b2b2b2b2b2b2b2b
732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b2b2b2b732b2b2b012b2b2b2b2b00742b742b2b742b732b2b74742b2b2b
2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b
0173742b2b2b2b2b2b2b2b2b2b2b2b2b007374752b2b2b2b2b2b2b2b2b2b
2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b0173742b2b2b2b2b
2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73742b
2b2b0173742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
b101322b4bb0505242b002435c4bb064524bb01e505b60b01a23424bb0c8
524bb036505bb00e23420073747373737373737374737374737573737475
7373747373737373b100024354b102024354b1060243545b5b58416301fe
006401fa006401f9006401f8006401f7006401f6006401f0006401ef0064
01ee006401ed006401ec006401eb006401e6006401e5006401e4006401e3
006401e2006401e1006401e0006401d3006401d2006401d1006401cf0064
01ce006401cd006401cc006401a00064018f0064018e0064018a00640188
00640187006401860064015b0064015a0064015900640158006401540064
01500064014c0064014b0064014a00640136006401300064012f0064012d
0064012c006401090064010700640105406964f464f264f164f064ef64ed
64ec64ea64e564e464e364e164de64da64d864d364cd64cc64ca64c964c8
64c664c464c264c064bf64bd64b364b164af64a564a464a0648e648d648c
648b648a64896485648464836480647f647e647d64626451645064486442
640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00>
[16037 6921 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 4542 150 <00010025fff002c204b3001c0097b0852b58403117100314201340262f48
13400c0f481310971716020a0f06010c030607400a00a7441b0aee070f13
1409091e07050b851a2fe1393211392fd6cd003fed322b001a1810cd5f5e
5d11393ffdd62b2b1a19cd2b31301b4023141340262f4813400c0f481317
10976c1716020a0f06010c030607401b070aee6c070f00183f2b321a10cd
5f5e5d11393f2bd62b2b19cd303159133e0337331521152111141e023332
363717060623222635112325323e23140b8e0143febd102c382c2846222d
477f44817e94038a08283f5f5bf765fe436173411c211f36453e99a3022b
>KAAAAA+CambriaMath AddT42Char 
2 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>KAAAAA+CambriaMath AddT42Char 
KAAAAA+CambriaMath /CharStrings get begin
/g150 150 def
end
KAAAAA+CambriaMath /Encoding get
dup 116 /g150 put
pop
end
%ADOEndSubsetFont
/IILCOM+CambriaMath /KAAAAA+CambriaMath findfont ct_VMDictPut
/IILCOM+CambriaMath*1 
[116{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
743.818 468.711 mo
(t)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
743.818 468.711 mo
(t) false chp
.28457 lw
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
1 /0 /CSD get_res sepcs
.506 sep
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 1718 19 <00020079000004380555001e002b006bb0852b5840251c20032091401c1c
130705080708a644071312a64413290329911303177e24242d1f007f0c2f
e13211392fe1003fed2b2b00182f2b110033111239182f1aed2b31301b40
111c20916c1c1c13070508071329916c130300183f2b2f11331112392f2b
30315925141e02171521353e023511342e02273521321615140e02232227
353332363635342e0223220701a90d1b2e31fe493e2a0d0a17262e01f0ea
e54884b4636f3d7471934e2e5170426332fd3b4629170b31311027484a03
61453f23150d31b3b768a66a2e04533b89715673461d0400>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g19 19 def
end
IILCOM+CambriaMath /Encoding get
dup 80 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[80{/.notdef}rp /g19 35{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
237.479 185.464 mo
(P)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
237.479 185.464 mo
(P) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 886 11 <000100790000050405550038008ab0852b5840302b0f030f91402b23172b
91303006091503181718a644081712253134032232232322a6442303007f
2c0d0d3a0f2a7f1db8fff0b30f014d1d2f2be13212392f33e1003f2b1100
33111733183f332b110017332b00182f1aed2b31301b40152b0f916c2b06
09150318081712253134032232230300183f331117333f331117332f2b30
315925141e03171521353e0235112111141e02171521353e023511342e02
273521150e0315112111342626273521150e02150490060e142527fe5d37
2c11fdd40915292efe5b3e2a0d0a17262e01a52c27170b022c11283b01a3
382c10fa3a3a2316120a31310e22465301a3fe5d433e24180c3131102748
4a0361453f23150d31310b16214245fe9e01625740221031310e23465200
>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g11 11 def
end
IILCOM+CambriaMath /Encoding get
dup 72 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[72{/.notdef}rp /g11 7{/.notdef}rp /g19 35{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
252.757 185.464 mo
(H)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
252.757 185.464 mo
(H) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 236 4 <00020006000004e90565001f002200beb0852b58404408092122050b0a20
220e2219182220212203050e051a1f1f240e1713080b2214200a030a9140
0f204f200211032020181201141e03111211a64400160e061b0512221804
003f332f17332b11001733111239182f5f5e5d1aed2b1112003939300118
2f333312392f3333111217391133331087c0c0c087c0c0c0311b4022080b
2214200a916c0f204f200211032020181201141e031100160e061b051222
180400183f332f17331117331112392f5f5e5d2b11123939305921353e02
353426272721070606151416171521353636370133011e02171501210303
1c323118100f25fe2e221a103d3ffe5538532701a19e01541825342dfcb3
01a2be310a182b24224f3181624a4c1f3c380931310970680453fba54e52
2e0b31021c028500>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g4 4 def
end
IILCOM+CambriaMath /Encoding get
dup 65 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[65{/.notdef}rp /g4 6{/.notdef}rp /g11 7{/.notdef}rp /g19 35{/.notdef}rp /g150 
139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
270.63 185.464 mo
(A)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
270.63 185.464 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 2284 22 <00010070fff003950565003000e1b0852b58400f2f100e15482f2d2f0001
00000b0416b8fff0403c0e154816130018101820188018040e0318181c0b
2424041c2d04030491402d13131c031c91130418a44f170117172820ed0f
0f3028ed07073200a4302fe112392fe112392fe111392f5de1003fed2b00
183f1aed2b1112003911331239182f5f5e5d12392b1112392f5d12392b31
301b400f2f100e15482f2d2f000100000b0416b8fff040230e1548161300
18101820188018040e0318181c0b24241c2d04916c2d13131c916c130400
183f2b3f2b1139113312392f5f5e5d12392b1112392f5d12392b30315913
1e0233323635342626272e02353436363332161711232e02232206061514
1616171e0215140e0223222711d414446c55757d34767975884369cb834c
916d6317465e4b41673c336c6a808d4f4275a3619dcd01375866317a754b
665a3c3a6f824d70a55a101cfef258622730614347625434406e8d5e6991
5b2935011200>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g22 22 def
end
IILCOM+CambriaMath /Encoding get
dup 83 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[65{/.notdef}rp /g4 6{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 
32{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
286.57 185.464 mo
(S)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
286.57 185.464 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 544 8 <000100790000042a0555002e00ceb0852b58b9000fffc0404b090c480f0a
1f1f17180202090a0a17031240090c48121791400a2e220a9128302223a6
44221803189140222e2da6442e090309912e0311a40f12121801a4020218
2120a41f1f300a187f272fe13212392fe13212392fe112392f33e1003fed
2b2b00182f1aed2b2b2b00182f1afdc62b2b11120039182f1112392f10c6
2b31301bb9000fffc04023090c480f0a1f1f17180202090a1240090c4812
0a17916c0a2218916c222e09916c2e0300183f2b2f2b2f2bc62b1112392f
1112392f10c62b3031590111232e0423211133323636373311232e022323
1121323e0337330321353e023511342e0227350420620f2022293827fec4
d62c32210f5e5e0e222f2fd60137313d2c2217146313fc623e2a0d0a1726
2e0555fed2314a321e0bfdf4193c40fe803c3d1afdbf1129424744fea131
1027484a0361453f23150d31>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g8 8 def
end
IILCOM+CambriaMath /Encoding get
dup 69 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[65{/.notdef}rp /g4 3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 
2{/.notdef}rp /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
299.333 185.464 mo
(E)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
299.333 185.464 mo
(E) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if

2 0 3 <> IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g3 3 def
end
IILCOM+CambriaMath /Encoding get
dup 32 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 32{/.notdef}rp /g4 3{/.notdef}rp /g8 2{/.notdef}rp /g11 
7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
314.002 185.464 mo
( )sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
314.002 185.464 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 11814 883 <000100b2000003ce0565001a005fb0852b58401e12161515170806090809
994408170417000e161609060009008a0e0e1c1b1112392fe1c610c61133
2f111239003f2f2b110033111239182f333931301b400b12161515170806
0908170400183f2f11331112392f333930315901141e03171521353e0335
11342623220607270133061502b70d213e5e4dfd1d6f5f32171c1b207657
2c01d4370601053a3b25150b0249490511223e46032b2825423a4d011760
aa00>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g883 883 def
end
IILCOM+CambriaMath /Encoding get
dup 49 /g883 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 15{/.notdef}rp /g4 3{/.notdef}rp /g8 
2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp /g150 
139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
318.795 185.464 mo
(1)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
318.795 185.464 mo
(1) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
337.971 184.058 mo
(P)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
337.971 184.058 mo
(P) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
353.249 184.058 mo
(H)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
353.249 184.058 mo
(H) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
371.122 184.058 mo
(A)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
371.122 184.058 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
387.062 184.058 mo
(S)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
387.062 184.058 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
399.825 184.058 mo
(E)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
399.825 184.058 mo
(E) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
414.494 184.058 mo
( )sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
414.494 184.058 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 11996 884 <00010081000003c9056500280099b0852b584033201d121209181816081d
16031a169b401d040905401013480528082803289f081919120905070620
8c12122a19280909188e192fe1332f331112392ff1d632cd1112392f002f
ed2b001810c62b333f1aed322b11120039182f113911123931301b401b20
1d1212091818081a1d169b6c1d040905401013480508289f6c0800182f2b
c62b333f2b3211392f113911123930315925323e02373303213536363736
373e02353426262322072335363633321615140e0307060702be313c2415
105511fcc92b9286743338371830634bbb417979d354babe152d4c5c71be
59a00c1c2d2ffedc3069dc95804248695d2f4b7342d0c03933a39b355957
646778c99600>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g884 884 def
end
IILCOM+CambriaMath /Encoding get
dup 50 /g884 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 14{/.notdef}rp /g4 3{/.notdef}rp 
/g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 32{/.notdef}rp 
/g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
419.286 184.058 mo
(2)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
419.286 184.058 mo
(2) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
659.091 192.521 mo
(P)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
659.091 192.521 mo
(P) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
674.369 192.521 mo
(H)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
674.369 192.521 mo
(H) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
692.242 192.521 mo
(A)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
692.242 192.521 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
708.182 192.521 mo
(S)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
708.182 192.521 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
720.945 192.521 mo
(E)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
720.945 192.521 mo
(E) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
735.614 192.521 mo
( )sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
735.614 192.521 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 12272 885 <00010090fff003ca0565003000bbb0852b5840440d0c2526262503259a40
260416269a28300f1a0111031a001a001e2d161e03191e9a401613042d03
012d9b04040c0826262a308e00001a088c2a2a1a128c2121321b8e1a2fe1
12392fe112392fe112392fe112392f1239003fed322b00183f1aed322b11
12003939182f2f5f5e5d2b00182f1aed2b111200393931301b401f0d0c26
259a6c260f1a0111031a001a002d19161e9a6c161301042d9b6c04040018
3f2b323f2b321139392f2f5f5e5d2f2b3939303159133536363332161615
14060607151e031514060623222627353316163332363534262323353e02
353426232206079f74ca5e71aa5a447b623d71583565d09556c753782373
638285b0aa5a87b95a76715e761c043abe373646835b5581602e090b3554
754b74b4682720d4685e8e8b929a5808588a566f78666900>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g885 885 def
end
IILCOM+CambriaMath /Encoding get
dup 51 /g885 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 2{/.notdef}rp /g22 
32{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
740.407 192.521 mo
(3)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
740.407 192.521 mo
(3) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
69.5414 351.591 mo
69.5414 501.369 li
65.1548 501.369 li
65.1548 351.591 li
cp
60.7683 353.78 mo
67.3481 340.648 li
73.9279 353.78 li
cp
73.9279 499.18 mo
67.3481 512.312 li
60.7683 499.18 li
cp
.997223 .918425 .647791 .507591 cmyk
f
88.0844 529.369 mo
101.244 529.372 li
101.244 532.656 li
88.0844 532.65 li
cp
111.115 529.374 mo
124.275 529.377 li
124.272 532.661 li
111.112 532.656 li
cp
134.143 529.38 mo
147.303 529.382 li
147.303 532.664 li
134.143 532.661 li
cp
157.174 529.385 mo
170.333 529.388 li
170.331 532.669 li
157.171 532.666 li
cp
180.202 529.39 mo
193.361 529.393 li
193.361 532.674 li
180.202 532.672 li
cp
203.232 529.395 mo
216.392 529.398 li
216.389 532.68 li
203.23 532.677 li
cp
226.26 529.401 mo
239.42 529.403 li
239.42 532.685 li
226.26 532.682 li
cp
249.291 529.406 mo
262.45 529.409 li
262.448 532.69 li
249.288 532.688 li
cp
272.332 529.411 mo
285.492 529.414 li
285.465 532.695 li
272.305 532.693 li
cp
295.355 529.414 mo
308.514 529.419 li
308.514 532.701 li
295.355 532.698 li
cp
318.377 529.419 mo
331.537 529.422 li
331.537 532.706 li
318.377 532.703 li
cp
341.4 529.425 mo
354.56 529.427 li
354.56 532.711 li
341.4 532.709 li
cp
364.449 529.43 mo
377.609 529.433 li
377.582 532.717 li
364.423 532.714 li
cp
387.472 529.435 mo
400.632 529.438 li
400.632 532.722 li
387.472 532.719 li
cp
410.495 529.441 mo
415.041 529.443 li
415.041 532.725 li
410.495 532.725 li
cp
f
18.7937 314.458 mo
25.9435 314.458 li
25.9435 315.309 li
25.4953 315.362 25.1632 315.487 24.9479 315.683 cv
24.7323 315.882 24.6246 316.161 24.6246 316.522 cv
24.6246 316.805 24.6504 317.084 24.7023 317.355 cv
24.7538 317.625 24.8618 318.058 25.0255 318.652 cv
27.5854 327.915 li
30.7777 318.692 li
30.908 318.328 31.009 317.989 31.0835 317.67 cv
31.1552 317.352 31.1925 317.018 31.1925 316.665 cv
31.1925 316.243 31.0835 315.922 30.8628 315.697 cv
30.6421 315.474 30.3045 315.344 29.8473 315.309 cv
29.8473 314.458 li
35.4195 314.458 li
35.4195 315.309 li
35.0925 315.362 34.816 315.468 34.5874 315.625 cv
34.3587 315.784 34.1514 316.012 33.9653 316.309 cv
33.7818 316.606 33.5638 317.089 33.3139 317.76 cv
27.8956 332.16 li
24.9091 332.16 li
20.6425 317.71 li
20.4529 317.065 20.2934 316.606 20.1642 316.336 cv
20.0347 316.065 19.8667 315.845 19.6599 315.678 cv
19.453 315.511 19.1643 315.389 18.7937 315.309 cv
cp
1 /0 /CSD get_res sepcs
.506 sep
ef
48.1484 328.91 mo
47.6619 328.91 47.2738 329.157 46.9866 329.647 cv
46.6969 330.141 46.5241 330.852 46.4682 331.783 cv
49.6318 331.783 li
49.6053 330.815 49.4803 330.093 49.2517 329.621 cv
49.023 329.146 48.6562 328.91 48.1484 328.91 cv
cp
48.3026 327.923 mo
48.8768 327.923 49.3846 327.99 49.8179 328.122 cv
50.2513 328.255 50.6235 328.44 50.9345 328.677 cv
51.2429 328.913 51.5008 329.199 51.7028 329.536 cv
51.9447 329.934 52.1255 330.39 52.2505 330.91 cv
52.3728 331.427 52.4392 332.059 52.4445 332.807 cv
46.4204 332.807 li
46.4257 333.95 46.6304 334.791 47.0318 335.332 cv
47.4359 335.874 48.0474 336.144 48.8715 336.144 cv
49.3527 336.144 49.786 336.054 50.1742 335.874 cv
50.5597 335.693 50.9771 335.375 51.429 334.921 cv
52.1973 335.754 li
51.5513 336.439 50.9106 336.921 50.2779 337.205 cv
49.6451 337.489 48.9167 337.632 48.0926 337.632 cv
46.6171 337.632 45.5058 337.229 44.7615 336.423 cv
44.0171 335.616 43.6449 334.42 43.6449 332.833 cv
43.6449 331.81 43.8363 330.926 44.2218 330.183 cv
44.6046 329.441 45.1469 328.878 45.8488 328.496 cv
46.5533 328.114 47.3695 327.923 48.3026 327.923 cv
cp
41.0263 327.923 mo
41.4118 327.923 41.8185 327.963 42.2439 328.045 cv
42.2439 330.663 li
40.5238 330.663 li
40.4148 330.297 40.2739 330.016 40.1011 329.82 cv
39.9256 329.624 39.6917 329.525 39.4019 329.525 cv
39.261 329.525 39.1095 329.568 38.942 329.653 cv
38.7719 329.738 38.6177 329.86 38.4741 330.014 cv
38.3332 330.167 38.2322 330.327 38.171 330.488 cv
38.1099 330.65 38.07 330.812 38.0514 330.977 cv
38.0328 331.141 38.0248 331.388 38.0248 331.717 cv
38.0248 334.741 li
38.0248 335.34 38.0461 335.762 38.0913 336.001 cv
38.1338 336.242 38.2242 336.431 38.3571 336.566 cv
38.4901 336.701 38.7134 336.797 39.0297 336.855 cv
39.0297 337.481 li
34.3454 337.481 li
34.3454 336.855 li
34.6512 336.773 34.8612 336.664 34.9782 336.531 cv
35.0951 336.399 35.1749 336.218 35.2148 335.993 cv
35.2573 335.765 35.2786 335.351 35.2786 334.749 cv
35.2786 330.852 li
35.2786 330.385 35.2706 330.04 35.2547 329.815 cv
35.2387 329.589 35.1988 329.409 35.1403 329.273 cv
35.0792 329.138 34.9888 329.027 34.8639 328.942 cv
34.7416 328.857 34.5262 328.783 34.2232 328.719 cv
34.2232 328.074 li
36.8258 328 li
38.0248 328 li
37.8919 329.43 li
38.0142 329.459 li
38.4768 328.915 38.9526 328.523 39.4391 328.284 cv
39.9283 328.043 40.4573 327.923 41.0263 327.923 cv
cp
59.1945 323.864 mo
59.7395 323.864 60.2233 323.91 60.6487 323.997 cv
60.6487 325.931 li
59.3567 325.931 li
59.2477 325.583 59.1307 325.329 59.0004 325.164 cv
58.8702 325 58.7 324.918 58.49 324.918 cv
58.2188 324.918 58.0088 325.008 57.8652 325.188 cv
57.719 325.369 57.618 325.623 57.5648 325.955 cv
57.5117 326.286 57.4851 326.753 57.4851 327.353 cv
57.4851 328.074 li
59.3168 328.074 li
59.3168 329.26 li
57.4851 329.26 li
57.4851 335.102 li
57.4851 335.574 57.509 335.911 57.5595 336.104 cv
57.61 336.301 57.7004 336.457 57.8307 336.571 cv
57.9609 336.685 58.1896 336.778 58.5192 336.855 cv
58.5192 337.481 li
53.7871 337.481 li
53.7871 336.855 li
54.0848 336.765 54.2922 336.669 54.4092 336.561 cv
54.5261 336.454 54.6112 336.303 54.6617 336.11 cv
54.7122 335.919 54.7388 335.582 54.7388 335.102 cv
54.7388 329.26 li
53.5797 329.26 li
53.5797 328.605 li
53.9147 328.555 54.146 328.494 54.2763 328.422 cv
54.4065 328.348 54.5129 328.234 54.5953 328.074 cv
54.6777 327.918 54.7335 327.666 54.7654 327.326 cv
54.8691 326.188 55.2918 325.326 56.0362 324.743 cv
56.7806 324.156 57.8333 323.864 59.1945 323.864 cv
cp
ef
218.886 270.883 mo
232.045 270.91 li
232.04 274.199 li
218.88 274.173 li
cp
241.913 270.91 mo
255.073 270.936 li
255.068 274.226 li
241.908 274.199 li
cp
264.944 270.963 mo
278.101 270.99 li
278.101 274.252 li
264.939 274.252 li
cp
287.964 270.99 mo
301.124 271.016 li
301.124 274.305 li
287.964 274.279 li
cp
311.013 271.043 mo
324.173 271.043 li
324.146 274.332 li
310.987 274.305 li
cp
334.036 271.069 mo
347.196 271.096 li
347.196 274.385 li
334.036 274.359 li
cp
357.059 271.096 mo
370.218 271.122 li
370.218 274.412 li
357.059 274.385 li
cp
380.081 271.149 mo
393.241 271.175 li
393.241 274.438 li
380.081 274.438 li
cp
403.13 271.175 mo
416.29 271.202 li
416.263 274.491 li
403.104 274.465 li
cp
426.153 271.228 mo
439.313 271.228 li
439.313 274.518 li
426.153 274.491 li
cp
449.176 271.255 mo
462.335 271.281 li
462.335 274.571 li
449.176 274.544 li
cp
472.198 271.281 mo
485.358 271.308 li
485.358 274.597 li
472.198 274.571 li
cp
495.248 271.334 mo
508.407 271.361 li
508.381 274.624 li
495.221 274.624 li
cp
518.27 271.361 mo
531.43 271.387 li
531.43 274.677 li
518.27 274.65 li
cp
541.293 271.414 mo
554.453 271.44 li
554.453 274.703 li
541.293 274.677 li
cp
564.316 271.44 mo
577.475 271.467 li
577.475 274.756 li
564.316 274.73 li
cp
587.365 271.494 mo
600.524 271.494 li
600.498 274.783 li
587.338 274.756 li
cp
610.387 271.52 mo
623.547 271.547 li
623.547 274.809 li
610.387 274.809 li
cp
633.41 271.547 mo
646.57 271.573 li
646.57 274.863 li
633.41 274.836 li
cp
656.433 271.6 mo
669.592 271.626 li
669.592 274.889 li
656.433 274.863 li
cp
679.482 271.626 mo
692.642 271.653 li
692.615 274.942 li
679.455 274.916 li
cp
702.505 271.679 mo
715.664 271.679 li
715.664 274.969 li
702.505 274.942 li
cp
725.527 271.706 mo
738.687 271.732 li
738.687 275.022 li
725.527 274.995 li
cp
748.55 271.732 mo
761.71 271.759 li
761.71 275.048 li
748.55 275.022 li
cp
771.599 271.785 mo
784.759 271.812 li
784.732 275.075 li
771.573 275.075 li
cp
794.622 271.812 mo
798.636 271.812 li
798.636 275.101 li
794.622 275.101 li
cp
.997223 .918425 .647791 .507591 cmyk
f
87.1274 269.928 mo
100.287 269.928 li
100.287 273.218 li
87.1274 273.218 li
cp
110.155 269.928 mo
123.315 269.928 li
123.315 273.218 li
110.155 273.218 li
cp
133.186 269.928 mo
146.346 269.928 li
146.346 273.218 li
133.186 273.218 li
cp
156.214 269.928 mo
164.463 269.928 li
164.463 273.218 li
156.214 273.218 li
cp
f
686.367 434.31 mo
778.139 434.591 li
778.139 438.968 li
686.367 438.687 li
cp
688.547 443.072 mo
675.388 436.466 li
688.574 429.941 li
cp
775.959 430.209 mo
789.119 436.814 li
775.932 443.34 li
cp
f
82.3421 69.6711 mo
226.292 69.6711 li
226.292 19.7725 li
221.906 24.1496 li
364.981 24.1496 li
364.981 15.3955 li
217.519 15.3955 li
217.519 65.294 li
221.906 60.917 li
82.3421 60.917 li
cp
f
357.324 15.3955 mo
437.771 15.3955 li
437.771 24.1496 li
357.324 24.1496 li
cp
f
223.668 15.3955 mo
444.736 15.3955 li
444.736 65.294 li
440.35 60.917 li
771.094 60.917 li
771.094 69.6711 li
435.963 69.6711 li
435.963 19.7725 li
440.35 24.1496 li
223.668 24.1496 li
cp
f
771.121 69.8303 mo
1014.69 69.6711 li
1014.67 60.917 li
771.094 61.0761 li
cp
f
84.5752 132.701 mo
226.917 132.701 li
226.917 85.3489 li
222.53 89.726 li
334.169 89.726 li
334.169 80.9719 li
218.144 80.9719 li
218.144 128.324 li
222.53 123.947 li
84.5752 123.947 li
cp
f
226.858 80.9719 mo
336.535 80.9719 li
336.535 128.43 li
332.148 124.053 li
772.53 124.053 li
772.53 132.807 li
327.762 132.807 li
327.762 85.3489 li
332.148 89.726 li
226.858 89.726 li
cp
f
768.568 132.754 mo
1014.69 132.382 li
1014.67 123.628 li
768.542 124 li
cp
f
328.373 15.3955 mo
369.367 15.3955 li
369.367 69.6711 li
328.373 69.6711 li
cp
337.146 65.294 mo
332.76 60.917 li
364.981 60.917 li
360.594 65.294 li
360.594 19.7725 li
364.981 24.1496 li
332.76 24.1496 li
337.146 19.7725 li
cp
f
361.392 17.2259 mo
329.197 62.1903 li
336.349 67.2836 li
368.543 22.3192 li
cp
f
336.402 17.3055 mo
366.443 61.6067 li
359.159 66.5143 li
329.144 22.2131 li
cp
f
48.8343 40.9151 mo
55.6215 40.9151 li
55.6215 41.764 li
55.1642 41.8966 54.8531 42.0292 54.6857 42.1884 cv
54.5155 42.3476 54.3985 42.5333 54.3294 42.7986 cv
54.2603 43.0638 54.2257 43.5148 54.2257 44.1514 cv
54.2257 56.9908 li
56.7327 56.9908 li
57.2777 56.9908 57.719 56.8848 58.0593 56.699 cv
58.3996 56.4868 58.692 56.142 58.9393 55.6644 cv
59.1839 55.187 59.4284 54.4177 59.6677 53.3035 cv
61.4409 53.3035 li
61.1565 58.5294 li
48.8343 58.5294 li
48.8343 57.6806 li
49.2995 57.5479 49.6159 57.4153 49.7834 57.2561 cv
49.9535 57.097 50.0678 56.9113 50.1263 56.646 cv
50.1875 56.3807 50.2167 55.9297 50.2167 55.2665 cv
50.2167 44.178 li
50.2167 43.5148 50.1901 43.0638 50.1343 42.7986 cv
50.0785 42.5598 49.9642 42.3476 49.7914 42.1884 cv
49.6185 42.0292 49.2995 41.8966 48.8343 41.764 cv
cp
33.2023 40.9151 mo
46.0269 40.9151 li
46.0269 45.0269 li
44.2563 45.0269 li
43.9719 44.2045 43.73 43.6474 43.5332 43.3556 cv
43.3338 43.0638 43.0972 42.8516 42.8208 42.6659 cv
42.5469 42.5068 42.0764 42.4272 41.4118 42.4272 cv
38.5937 42.4272 li
38.5937 48.6082 li
40.3005 48.6082 li
40.6807 48.6082 40.9758 48.5551 41.1938 48.4489 cv
41.4091 48.3428 41.5872 48.1837 41.7281 47.9184 cv
41.8717 47.6796 42.0073 47.2817 42.1375 46.7512 cv
43.597 46.7512 li
43.597 52.0037 li
42.1375 52.0037 li
42.0152 51.4996 41.8823 51.1282 41.7361 50.863 cv
41.5899 50.5977 41.4144 50.412 41.2124 50.3059 cv
41.0103 50.1733 40.7046 50.1202 40.3005 50.1202 cv
38.5937 50.1202 li
38.5937 57.0174 li
41.3985 57.0174 li
41.7015 57.0174 41.9541 56.9908 42.1614 56.9643 cv
42.3688 56.9113 42.5549 56.8582 42.7171 56.7521 cv
42.8819 56.6725 43.0388 56.5399 43.1903 56.3807 cv
43.3418 56.2216 43.4748 56.0358 43.5917 55.8502 cv
43.706 55.6644 43.831 55.3992 43.9586 55.1074 cv
44.0889 54.7891 44.2298 54.3646 44.3866 53.8075 cv
46.1572 53.8075 li
45.9126 58.5294 li
33.2023 58.5294 li
33.2023 57.6806 li
33.6675 57.5479 33.9839 57.4153 34.1514 57.2561 cv
34.3215 57.097 34.4358 56.9113 34.4943 56.646 cv
34.5555 56.4072 34.5847 55.9297 34.5847 55.2931 cv
34.5847 44.178 li
34.5847 43.5148 34.5581 43.0638 34.5023 42.7986 cv
34.4465 42.5598 34.3322 42.3476 34.1594 42.1884 cv
33.9865 42.0292 33.6675 41.8966 33.2023 41.764 cv
cp
25.8109 40.7029 mo
26.5781 40.7029 27.3108 40.7559 28.0089 40.8355 cv
28.707 40.9151 29.5043 41.0477 30.4002 41.2599 cv
30.4002 45.0004 li
28.6294 45.0004 li
28.3968 44.0453 28.052 43.3291 27.5952 42.8781 cv
27.1382 42.4537 26.4789 42.215 25.617 42.215 cv
24.8413 42.215 24.2184 42.4272 23.7486 42.8251 cv
23.2789 43.223 23.0441 43.7801 23.0441 44.4698 cv
23.0441 44.9738 23.1412 45.3983 23.335 45.7697 cv
23.5291 46.1411 23.8542 46.4859 24.3112 46.8573 cv
24.7679 47.2021 25.4317 47.6 26.3021 48.051 cv
27.3624 48.5815 28.1963 49.1387 28.8041 49.6692 cv
29.4115 50.1998 29.8605 50.7568 30.1477 51.3935 cv
30.4374 52.0037 30.581 52.7465 30.581 53.5688 cv
30.581 54.6299 30.3364 55.5318 29.8446 56.3276 cv
29.3536 57.097 28.6382 57.6806 27.6987 58.105 cv
26.7591 58.5294 25.6731 58.7417 24.4404 58.7417 cv
23.5612 58.7417 22.6454 58.6886 21.6931 58.5825 cv
20.7406 58.4764 19.8462 58.3438 19.0101 58.1581 cv
19.0101 54.1789 li
20.7815 54.1789 li
20.9971 55.2135 21.3568 55.9562 21.8611 56.4603 cv
22.3654 56.9643 23.1045 57.2296 24.0783 57.2296 cv
24.9317 57.2296 25.5976 57.0174 26.0759 56.5664 cv
26.5544 56.1154 26.7934 55.5053 26.7934 54.6829 cv
26.7934 53.9136 26.5629 53.2505 26.1017 52.7199 cv
25.6407 52.1893 24.8413 51.6323 23.7035 51.0752 cv
22.7554 50.5977 21.9645 50.1202 21.331 49.6427 cv
20.6975 49.1387 20.1977 48.5551 19.8313 47.9184 cv
19.465 47.2552 19.2818 46.5124 19.2818 45.6636 cv
19.2818 44.6024 19.5448 43.7005 20.0703 42.9577 cv
20.5962 42.2415 21.3568 41.6578 22.3524 41.2864 cv
23.348 40.9151 24.5007 40.7029 25.8109 40.7029 cv
cp
ef
40.1463 113.946 mo
37.5596 121.214 li
42.2146 121.214 li
cp
51.0276 110.55 mo
57.4532 110.55 li
61.0368 121.161 li
64.9156 110.55 li
70.977 110.55 li
70.977 111.426 li
70.5224 111.532 70.2113 111.691 70.0465 111.824 cv
69.8843 111.983 69.77 112.195 69.7035 112.434 cv
69.6397 112.699 69.6078 113.15 69.6078 113.787 cv
69.6078 124.955 li
69.6078 125.485 69.6344 125.883 69.6849 126.202 cv
69.7381 126.493 69.8418 126.732 70.0013 126.891 cv
70.1608 127.05 70.4878 127.183 70.977 127.316 cv
70.977 128.165 li
64.3467 128.165 li
64.3467 127.316 li
64.7242 127.21 64.9874 127.13 65.1336 127.05 cv
65.2798 126.971 65.3941 126.865 65.4765 126.759 cv
65.5589 126.626 65.6201 126.44 65.6573 126.175 cv
65.6972 125.936 65.7158 125.512 65.7158 124.928 cv
65.7158 118.588 li
65.7158 117.898 65.7291 117.076 65.7557 116.148 cv
65.7796 115.193 65.8062 114.529 65.8328 114.131 cv
65.5616 114.131 li
65.4048 114.635 65.0778 115.564 64.578 116.917 cv
61.1139 126.228 li
58.8382 126.228 li
55.1908 115.75 li
54.9754 115.166 54.7867 114.582 54.6219 113.999 cv
54.3906 113.999 li
54.4756 115.405 54.5182 117.103 54.5182 119.039 cv
54.5182 124.955 li
54.5182 125.591 54.5501 126.042 54.6112 126.281 cv
54.6697 126.546 54.792 126.759 54.9728 126.918 cv
55.1536 127.077 55.4673 127.21 55.9165 127.316 cv
55.9165 128.165 li
51.0276 128.165 li
51.0276 127.316 li
51.4928 127.21 51.8118 127.077 51.9793 126.918 cv
52.1468 126.759 52.2611 126.546 52.3223 126.308 cv
52.3807 126.042 52.4126 125.591 52.4126 124.955 cv
52.4126 113.787 li
52.4126 113.123 52.3834 112.699 52.3276 112.434 cv
52.2717 112.195 52.1627 112.009 51.9979 111.85 cv
51.8357 111.691 51.5114 111.558 51.0276 111.426 cv
cp
39.5774 110.471 mo
43.0281 110.471 li
47.295 124.928 li
47.4838 125.565 47.6433 126.016 47.7735 126.308 cv
47.9038 126.573 48.0713 126.785 48.2787 126.944 cv
48.4834 127.13 48.7731 127.236 49.1427 127.316 cv
49.1427 128.165 li
42.0073 128.165 li
42.0073 127.316 li
42.4539 127.263 42.7862 127.157 43.0015 126.944 cv
43.2169 126.759 43.3259 126.467 43.3259 126.122 cv
43.3259 125.83 43.2966 125.538 43.2355 125.22 cv
43.1743 124.902 43.076 124.477 42.9377 123.973 cv
42.5895 122.726 li
37.0678 122.726 li
36.6424 123.947 li
36.5201 124.292 36.4217 124.61 36.3446 124.955 cv
36.2675 125.273 36.2277 125.618 36.2277 125.963 cv
36.2277 126.812 36.677 127.263 37.5729 127.316 cv
37.5729 128.165 li
32.0512 128.165 li
32.0512 127.316 li
32.3702 127.289 32.6493 127.183 32.8912 126.997 cv
33.1332 126.785 33.3538 126.546 33.5506 126.202 cv
33.7499 125.883 33.96 125.406 34.1859 124.796 cv
cp
25.8109 110.365 mo
26.5781 110.365 27.3108 110.391 28.0089 110.471 cv
28.707 110.55 29.5043 110.709 30.4002 110.922 cv
30.4002 114.662 li
28.6294 114.662 li
28.3968 113.68 28.052 112.964 27.5952 112.54 cv
27.1382 112.089 26.4789 111.877 25.617 111.877 cv
24.8413 111.877 24.2184 112.062 23.7486 112.46 cv
23.2789 112.885 23.0441 113.415 23.0441 114.131 cv
23.0441 114.635 23.1412 115.06 23.335 115.431 cv
23.5291 115.776 23.8542 116.148 24.3112 116.492 cv
24.7679 116.837 25.4317 117.235 26.3021 117.686 cv
27.3624 118.243 28.1963 118.774 28.8041 119.304 cv
29.4115 119.835 29.8605 120.418 30.1477 121.029 cv
30.4374 121.665 30.581 122.382 30.581 123.204 cv
30.581 124.265 30.3364 125.193 29.8446 125.963 cv
29.3536 126.732 28.6382 127.342 27.6987 127.767 cv
26.7591 128.165 25.6731 128.377 24.4404 128.377 cv
23.5612 128.377 22.6454 128.324 21.6931 128.244 cv
20.7406 128.138 19.8462 127.979 19.0101 127.793 cv
19.0101 123.814 li
20.7815 123.814 li
20.9971 124.849 21.3568 125.618 21.8611 126.122 cv
22.3654 126.626 23.1045 126.865 24.0783 126.865 cv
24.9317 126.865 25.5976 126.653 26.0759 126.202 cv
26.5544 125.777 26.7934 125.14 26.7934 124.345 cv
26.7934 123.549 26.5629 122.886 26.1017 122.355 cv
25.6407 121.824 24.8413 121.294 23.7035 120.71 cv
22.7554 120.259 21.9645 119.782 21.331 119.278 cv
20.6975 118.774 20.1977 118.217 19.8313 117.553 cv
19.465 116.89 19.2818 116.148 19.2818 115.299 cv
19.2818 114.264 19.5448 113.362 20.0703 112.619 cv
20.5962 111.877 21.3568 111.32 22.3524 110.922 cv
23.348 110.55 24.5007 110.365 25.8109 110.365 cv
cp
ef
306.201 34.8137 mo
313.406 34.8137 li
313.406 35.6626 li
313.007 35.7157 312.715 35.7953 312.529 35.9279 cv
312.369 36.087 312.289 36.2993 312.289 36.5911 cv
312.289 36.8298 312.369 37.0951 312.502 37.4135 cv
312.635 37.7053 312.927 38.2358 313.379 38.952 cv
314.576 40.9681 li
316.144 38.6603 li
316.49 38.1563 316.729 37.7583 316.835 37.493 cv
316.942 37.2277 317.022 36.9359 317.022 36.6176 cv
317.022 36.3523 316.915 36.1401 316.729 35.9544 cv
316.543 35.7953 316.277 35.6891 315.932 35.6626 cv
315.932 34.8137 li
321.275 34.8137 li
321.275 35.6626 li
321.036 35.7422 320.797 35.8483 320.557 36.0075 cv
320.345 36.1401 320.079 36.4054 319.786 36.7502 cv
319.494 37.0951 319.015 37.7318 318.377 38.6603 cv
315.586 42.6394 li
319.361 48.8469 li
319.786 49.5366 320.105 50.0671 320.371 50.4385 cv
320.637 50.8099 320.85 51.0752 321.062 51.2609 cv
321.275 51.42 321.488 51.5261 321.701 51.5792 cv
321.701 52.4281 li
314.523 52.4281 li
314.523 51.5792 li
314.895 51.5261 315.161 51.4466 315.347 51.2874 cv
315.533 51.1548 315.613 50.9425 315.613 50.6508 cv
315.613 50.4916 315.586 50.3324 315.533 50.1467 cv
315.48 49.961 315.4 49.7753 315.32 49.5897 cv
315.214 49.4039 315.028 49.0856 314.762 48.6346 cv
312.954 45.6901 li
310.854 48.7938 li
310.694 49.0325 310.561 49.2713 310.428 49.4835 cv
310.322 49.6957 310.242 49.8815 310.216 50.0406 cv
310.163 50.2263 310.136 50.412 310.136 50.6508 cv
310.136 50.8895 310.242 51.0752 310.428 51.2609 cv
310.615 51.42 310.88 51.5261 311.226 51.5792 cv
311.226 52.4281 li
305.856 52.4281 li
305.856 51.5792 li
306.255 51.4466 306.627 51.2343 306.972 50.8895 cv
307.318 50.5712 307.876 49.8815 308.568 48.8469 cv
311.944 44.0188 li
308.7 38.6072 li
308.355 38.0236 308.036 37.5461 307.797 37.1481 cv
307.531 36.7768 307.318 36.485 307.132 36.2728 cv
306.972 36.0605 306.813 35.9279 306.68 35.8483 cv
306.547 35.7422 306.388 35.6891 306.201 35.6626 cv
cp
289.4 34.8137 mo
304.633 34.8137 li
304.633 39.3234 li
302.852 39.3234 li
302.666 38.6868 302.533 38.1827 302.373 37.8379 cv
302.24 37.493 302.081 37.2012 301.895 36.9625 cv
301.682 36.7502 301.469 36.5645 301.203 36.485 cv
300.938 36.3788 300.512 36.3258 299.954 36.3258 cv
299.023 36.3258 li
299.023 49.1917 li
299.023 49.8549 299.077 50.3059 299.13 50.5712 cv
299.21 50.8364 299.342 51.0486 299.555 51.2078 cv
299.741 51.367 300.087 51.4996 300.592 51.5792 cv
300.592 52.4281 li
293.467 52.4281 li
293.467 51.5792 li
293.813 51.4996 294.105 51.42 294.318 51.3405 cv
294.531 51.2343 294.69 51.1017 294.796 50.916 cv
294.903 50.7303 294.956 50.4916 294.983 50.2263 cv
295.009 49.9345 295.036 49.5897 295.036 49.1917 cv
295.036 36.3258 li
293.972 36.3258 li
293.441 36.3258 293.042 36.3788 292.723 36.5115 cv
292.404 36.6707 292.138 36.9094 291.899 37.3073 cv
291.686 37.6787 291.42 38.3685 291.181 39.3234 cv
289.4 39.3234 li
cp
ef
225.263 205.148 mo
444.55 205.148 li
444.55 151.244 li
440.163 155.621 li
1016.53 155.621 li
1016.53 146.867 li
435.777 146.867 li
435.777 200.771 li
440.163 196.394 li
225.263 196.394 li
cp
f
963.782 146.548 mo
1018.47 146.548 li
1018.47 199.683 li
1014.08 195.306 li
1024 195.306 li
1024 204.06 li
1009.69 204.06 li
1009.69 150.925 li
1014.08 155.302 li
963.782 155.302 li
cp
f
34.7575 174.535 mo
39.9948 174.535 li
44.5727 182.467 li
44.8572 182.971 45.2267 183.634 45.684 184.483 cv
46.1412 185.332 46.5453 186.154 46.8989 186.897 cv
47.1063 186.897 li
47.0106 184.854 46.9627 182.599 46.9627 180.159 cv
46.9627 177.771 li
46.9627 177.188 46.9414 176.79 46.8989 176.551 cv
46.8564 176.312 46.7872 176.127 46.6915 175.994 cv
46.5985 175.861 46.4789 175.755 46.3353 175.676 cv
46.1944 175.596 45.9418 175.49 45.5803 175.384 cv
45.5803 174.535 li
50.4666 174.535 li
50.4666 175.384 li
50.1237 175.49 49.8791 175.596 49.7382 175.676 cv
49.5946 175.755 49.475 175.835 49.374 175.967 cv
49.2756 176.1 49.2012 176.286 49.148 176.551 cv
49.0975 176.816 49.0709 177.214 49.0709 177.771 cv
49.0709 192.149 li
45.7876 192.149 li
39.9682 182.095 li
39.1839 180.742 38.607 179.681 38.2375 178.912 cv
38.1205 178.912 li
38.2056 180.742 38.2481 182.705 38.2481 184.748 cv
38.2481 188.913 li
38.2481 189.55 38.2827 190.001 38.3465 190.266 cv
38.4103 190.531 38.5273 190.743 38.6948 190.876 cv
38.8622 191.035 39.1813 191.168 39.6465 191.3 cv
39.6465 192.149 li
34.7575 192.149 li
34.7575 191.3 li
35.2148 191.168 35.5285 191.035 35.696 190.876 cv
35.8635 190.717 35.9804 190.505 36.0442 190.266 cv
36.1107 190.001 36.1426 189.55 36.1426 188.913 cv
36.1426 177.745 li
36.1426 177.108 36.1133 176.657 36.0575 176.418 cv
36.0017 176.18 35.8847 175.967 35.7093 175.808 cv
35.5311 175.649 35.2148 175.49 34.7575 175.384 cv
cp
19.1654 174.535 mo
31.99 174.535 li
31.99 178.62 li
30.2194 178.62 li
29.935 177.824 29.6931 177.267 29.4958 176.975 cv
29.2975 176.684 29.0603 176.445 28.7847 176.286 cv
28.5087 176.127 28.0389 176.047 27.3754 176.047 cv
24.5568 176.047 li
24.5568 182.228 li
26.2633 182.228 li
26.6427 182.228 26.9402 182.175 27.1555 182.069 cv
27.3711 181.963 27.5498 181.777 27.692 181.538 cv
27.8342 181.273 27.9701 180.902 28.0993 180.371 cv
29.5604 180.371 li
29.5604 185.624 li
28.0993 185.624 li
27.9786 185.119 27.8451 184.722 27.6987 184.483 cv
27.5519 184.218 27.3775 184.032 27.1749 183.899 cv
26.9724 183.793 26.6685 183.74 26.2633 183.74 cv
24.5568 183.74 li
24.5568 190.637 li
27.3624 190.637 li
27.6641 190.637 27.9182 190.611 28.1253 190.584 cv
28.3322 190.531 28.5175 190.478 28.6812 190.372 cv
28.845 190.266 29.0021 190.16 29.1531 189.974 cv
29.3039 189.815 29.4376 189.656 29.5538 189.443 cv
29.6691 189.258 29.7941 189.019 29.9217 188.701 cv
30.052 188.409 30.1929 187.984 30.3497 187.427 cv
32.1203 187.427 li
31.8757 192.149 li
19.1654 192.149 li
19.1654 191.3 li
19.6309 191.168 19.9475 191.035 20.1155 190.876 cv
20.2838 190.717 20.3979 190.505 20.4582 190.266 cv
20.5186 190.001 20.5489 189.55 20.5489 188.913 cv
20.5489 177.771 li
20.5489 177.135 20.5207 176.684 20.4649 176.418 cv
20.4088 176.153 20.2945 175.967 20.1222 175.808 cv
19.9496 175.649 19.6309 175.516 19.1654 175.384 cv
cp
ef
226.914 204.087 mo
221.544 204.087 li
221.544 161.112 li
225.931 165.489 li
84.5752 165.489 li
84.5752 156.735 li
230.317 156.735 li
230.317 199.71 li
225.931 195.333 li
226.914 195.333 li
cp
f
963.782 132.382 mo
1020.22 132.382 li
1020.22 85.9856 li
1015.84 90.3627 li
1024 90.3627 li
1024 81.6085 li
1011.45 81.6085 li
1011.45 128.005 li
1015.84 123.628 li
963.782 123.628 li
cp
f
965.697 68.7161 mo
1022.14 68.7161 li
1022.14 22.3192 li
1017.75 26.6962 li
1025.91 26.6962 li
1025.91 17.9421 li
1013.36 17.9421 li
1013.36 64.339 li
1017.75 59.962 li
965.697 59.962 li
cp
f
440.589 354.894 mo
499.661 354.894 li
499.661 346.14 li
440.589 346.14 li
cp
0 .961578 .907591 0 cmyk
f
497.135 306.993 mo
553.894 306.189 li
553.788 297.438 li
497.002 298.233 li
cp
f
552.884 328.472 mo
610.919 328.472 li
610.919 319.718 li
552.884 319.718 li
cp
f
607.463 341.715 mo
672.065 341.524 li
672.038 332.77 li
607.437 332.961 li
cp
f
672.251 341.885 mo
1013.36 313.813 li
1012.65 305.088 li
671.533 333.16 li
cp
f
635.404 277.993 mo
523.853 277.86 li
523.88 269.106 li
635.404 269.239 li
cp
.61709 .780514 0 0 cmyk
f
645.187 531.191 mo
631.15 273.722 li
639.897 273.244 li
653.96 530.717 li
cp
f
443.38 436.947 mo
445.56 352.538 li
436.787 352.313 li
434.634 436.724 li
cp
0 .961578 .907591 0 cmyk
f
502.399 350.965 mo
503.861 302.584 li
495.088 302.319 li
493.653 350.702 li
cp
f
549.481 326.92 mo
548.524 300.064 li
557.271 299.745 li
558.254 326.607 li
cp
f
613.099 339.261 mo
614.056 324.374 li
605.31 323.814 li
604.353 338.699 li
cp
f
471.826 365.279 mo
471.826 426.813 li
467.44 426.813 li
467.44 365.279 li
cp
463.053 367.468 mo
469.62 354.337 li
476.213 367.468 li
cp
476.213 424.624 mo
469.62 437.756 li
463.053 424.624 li
cp
.997223 .918425 .647791 .507591 cmyk
f
637.717 349.363 mo
637.717 426.736 li
633.33 426.736 li
633.33 349.363 li
cp
628.944 351.551 mo
635.51 338.42 li
642.103 351.551 li
cp
642.103 424.548 mo
635.51 437.679 li
628.944 424.548 li
cp
f
471.188 312.118 mo
471.188 341.542 li
466.802 341.542 li
466.802 312.118 li
cp
462.415 314.307 mo
468.982 301.178 li
475.575 314.307 li
cp
475.575 339.354 mo
468.982 352.485 li
462.415 339.354 li
cp
f
468.982 300.807 mo
482.141 300.807 li
482.141 304.088 li
468.982 304.088 li
cp
492.031 300.807 mo
497.401 300.807 li
497.401 304.088 li
492.031 304.088 li
cp
f
581.569 310.845 mo
581.569 315.569 li
577.183 315.569 li
577.183 310.845 li
cp
572.796 313.033 mo
579.363 299.905 li
585.956 313.033 li
cp
585.956 313.381 mo
579.363 326.512 li
572.796 313.381 li
cp
f
553.841 299.533 mo
567.001 299.533 li
567.001 302.823 li
553.841 302.823 li
cp
576.89 299.533 mo
582.26 299.533 li
582.26 302.823 li
576.89 302.823 li
cp
f
425.063 448.656 mo
425.861 517.792 li
421.474 517.843 li
420.677 448.706 li
cp
416.317 450.945 mo
422.724 437.74 li
429.476 450.794 li
cp
430.221 515.553 mo
423.787 528.759 li
417.061 515.705 li
cp
f
415.865 375.766 mo
417.141 375.766 li
417.114 376.402 417.088 377.286 417.088 378.413 cv
417.088 386.73 li
417.088 387.114 417.114 387.404 417.141 387.6 cv
417.194 387.793 417.274 387.953 417.38 388.077 cv
417.486 388.199 417.646 388.295 417.859 388.364 cv
418.045 388.435 418.311 388.488 418.63 388.523 cv
418.949 388.56 419.347 388.587 419.852 388.6 cv
419.852 389.504 li
411.266 389.504 li
411.266 388.6 li
412.01 388.565 412.515 388.52 412.834 388.465 cv
413.153 388.409 413.392 388.324 413.552 388.21 cv
413.738 388.099 413.844 387.939 413.924 387.732 cv
414.004 387.528 414.03 387.194 414.03 386.73 cv
414.03 379.535 li
414.03 379.265 413.977 379.069 413.897 378.949 cv
413.791 378.83 413.632 378.771 413.472 378.771 cv
413.286 378.771 413.073 378.846 412.754 379 cv
412.462 379.151 411.957 379.464 411.266 379.933 cv
410.654 378.88 li
cp
ef
415.094 404.734 mo
416.077 404.734 416.875 404.864 417.486 405.127 cv
418.098 405.389 418.55 405.745 418.816 406.19 cv
419.108 406.639 419.241 407.161 419.241 407.758 cv
419.241 408.283 419.135 408.769 418.949 409.22 cv
418.736 409.671 418.417 410.185 417.912 410.764 cv
417.433 411.339 416.636 412.164 415.493 413.239 cv
415.147 413.57 414.722 414.008 414.216 414.547 cv
413.738 415.088 413.339 415.552 413.073 415.937 cv
413.073 416.035 li
416.609 416.035 li
417.034 416.035 417.353 416.003 417.566 415.939 cv
417.779 415.878 417.938 415.767 418.071 415.613 cv
418.204 415.457 418.311 415.223 418.39 414.91 cv
419.533 414.91 li
419.294 418.473 li
410.176 418.473 li
410.176 417.815 li
410.681 416.642 411.717 415.13 413.313 413.279 cv
414.03 412.438 414.562 411.745 414.934 411.201 cv
415.306 410.658 415.599 410.143 415.785 409.658 cv
415.971 409.175 416.077 408.673 416.077 408.156 cv
416.077 407.427 415.891 406.854 415.572 406.44 cv
415.253 406.026 414.801 405.819 414.243 405.819 cv
413.153 405.819 412.462 406.599 412.169 408.156 cv
410.362 408.156 li
410.362 405.808 li
411.452 405.371 412.329 405.082 412.994 404.944 cv
413.658 404.803 414.349 404.734 415.094 404.734 cv
cp
ef
409.032 399.373 mo
421.155 399.373 li
421.155 398.099 li
409.032 398.099 li
cp
ef
424.957 391.205 mo
430.487 391.205 li
430.487 391.863 li
430.141 391.903 429.875 391.998 429.716 392.149 cv
429.556 392.303 429.476 392.518 429.476 392.797 cv
429.476 393.017 429.476 393.229 429.529 393.439 cv
429.556 393.648 429.636 393.98 429.769 394.439 cv
431.736 401.58 li
434.208 394.468 li
434.315 394.189 434.395 393.927 434.448 393.683 cv
434.501 393.436 434.527 393.179 434.527 392.905 cv
434.527 392.582 434.448 392.332 434.262 392.16 cv
434.102 391.987 433.836 391.889 433.491 391.863 cv
433.491 391.205 li
437.797 391.205 li
437.797 391.863 li
437.532 391.903 437.319 391.982 437.133 392.104 cv
436.973 392.229 436.814 392.404 436.654 392.632 cv
436.521 392.86 436.362 393.234 436.176 393.752 cv
431.975 404.853 li
429.689 404.853 li
426.392 393.712 li
426.259 393.216 426.127 392.86 426.02 392.653 cv
425.914 392.444 425.808 392.274 425.648 392.144 cv
425.488 392.017 425.249 391.921 424.957 391.863 cv
cp
ef
447.102 402.317 mo
446.703 402.317 446.411 402.508 446.198 402.888 cv
445.959 403.267 445.826 403.816 445.799 404.532 cv
448.219 404.532 li
448.219 403.787 448.112 403.23 447.926 402.866 cv
447.767 402.5 447.474 402.317 447.102 402.317 cv
cp
447.208 401.559 mo
447.66 401.559 448.033 401.609 448.378 401.713 cv
448.697 401.813 448.99 401.957 449.229 402.14 cv
449.468 402.323 449.681 402.543 449.84 402.8 cv
450 403.108 450.159 403.461 450.239 403.859 cv
450.346 404.259 450.399 404.745 450.399 405.32 cv
445.746 405.32 li
445.773 406.201 445.932 406.851 446.225 407.267 cv
446.544 407.684 447.022 407.891 447.634 407.891 cv
448.006 407.891 448.352 407.822 448.644 407.684 cv
448.937 407.546 449.256 407.299 449.628 406.949 cv
450.213 407.594 li
449.707 408.119 449.229 408.49 448.724 408.711 cv
448.245 408.931 447.687 409.039 447.049 409.039 cv
445.906 409.039 445.055 408.729 444.47 408.108 cv
443.912 407.488 443.62 406.564 443.62 405.342 cv
443.62 404.554 443.779 403.872 444.071 403.302 cv
444.364 402.729 444.763 402.296 445.321 401.999 cv
445.853 401.705 446.491 401.559 447.208 401.559 cv
cp
441.705 401.559 mo
441.998 401.559 442.317 401.591 442.636 401.654 cv
442.636 403.67 li
441.333 403.67 li
441.227 403.386 441.121 403.172 440.988 403.02 cv
440.855 402.869 440.695 402.792 440.456 402.792 cv
440.35 402.792 440.243 402.827 440.11 402.89 cv
439.977 402.957 439.844 403.05 439.738 403.169 cv
439.632 403.288 439.552 403.41 439.499 403.535 cv
439.472 403.66 439.446 403.784 439.419 403.912 cv
439.392 404.036 439.392 404.227 439.392 404.479 cv
439.392 406.811 li
439.392 407.273 439.419 407.596 439.446 407.782 cv
439.472 407.968 439.552 408.114 439.658 408.217 cv
439.765 408.323 439.924 408.395 440.163 408.44 cv
440.163 408.923 li
436.574 408.923 li
436.574 408.44 li
436.787 408.376 436.973 408.294 437.053 408.191 cv
437.133 408.09 437.213 407.952 437.239 407.774 cv
437.266 407.599 437.292 407.281 437.292 406.819 cv
437.292 403.816 li
437.292 403.455 437.266 403.187 437.266 403.015 cv
437.239 402.843 437.213 402.705 437.186 402.599 cv
437.133 402.495 437.053 402.41 436.973 402.344 cv
436.867 402.278 436.707 402.222 436.468 402.171 cv
436.468 401.675 li
438.462 401.617 li
439.392 401.617 li
439.286 402.721 li
439.392 402.742 li
439.738 402.323 440.11 402.02 440.482 401.835 cv
440.855 401.652 441.28 401.559 441.705 401.559 cv
cp
456.035 398.431 mo
456.46 398.431 456.832 398.466 457.151 398.535 cv
457.151 400.025 li
456.141 400.025 li
456.061 399.757 455.982 399.558 455.875 399.431 cv
455.769 399.306 455.636 399.243 455.476 399.243 cv
455.264 399.243 455.104 399.312 454.998 399.45 cv
454.892 399.59 454.812 399.787 454.785 400.041 cv
454.732 400.299 454.705 400.657 454.705 401.121 cv
454.705 401.675 li
456.115 401.675 li
456.115 402.588 li
454.705 402.588 li
454.705 407.09 li
454.705 407.453 454.732 407.713 454.759 407.862 cv
454.812 408.013 454.865 408.132 454.971 408.22 cv
455.078 408.307 455.264 408.382 455.503 408.44 cv
455.503 408.923 li
451.861 408.923 li
451.861 408.44 li
452.1 408.371 452.26 408.297 452.339 408.214 cv
452.419 408.13 452.499 408.016 452.525 407.867 cv
452.579 407.718 452.605 407.458 452.605 407.09 cv
452.605 402.588 li
451.701 402.588 li
451.701 402.084 li
451.967 402.044 452.127 401.999 452.233 401.941 cv
452.339 401.885 452.419 401.797 452.472 401.675 cv
452.552 401.553 452.605 401.36 452.605 401.097 cv
452.685 400.222 453.031 399.558 453.589 399.108 cv
454.174 398.657 454.971 398.431 456.035 398.431 cv
cp
ef
413.259 296.058 mo
414.535 296.058 li
414.509 296.695 414.482 297.57 414.482 298.711 cv
414.482 307.022 li
414.482 307.407 414.509 307.696 414.535 307.892 cv
414.589 308.088 414.668 308.248 414.775 308.37 cv
414.881 308.492 415.041 308.59 415.253 308.659 cv
415.466 308.728 415.705 308.781 416.024 308.818 cv
416.343 308.855 416.742 308.879 417.274 308.892 cv
417.274 309.797 li
408.66 309.797 li
408.66 308.892 li
409.405 308.858 409.936 308.815 410.229 308.757 cv
410.548 308.701 410.787 308.616 410.973 308.505 cv
411.133 308.391 411.239 308.232 411.319 308.027 cv
411.398 307.821 411.452 307.486 411.452 307.022 cv
411.452 299.825 li
411.452 299.56 411.398 299.374 411.292 299.241 cv
411.186 299.135 411.053 299.056 410.867 299.056 cv
410.707 299.056 410.468 299.135 410.149 299.295 cv
409.856 299.454 409.351 299.745 408.66 300.223 cv
408.049 299.162 li
cp
ef
412.355 328.281 mo
408.926 333.404 li
408.926 333.574 li
412.355 333.574 li
412.355 331.295 li
412.355 330.34 412.382 329.334 412.435 328.281 cv
cp
413.047 325.117 mo
415.306 325.117 li
415.306 333.574 li
415.599 333.574 li
415.944 333.574 416.157 333.552 416.29 333.507 cv
416.423 333.465 416.556 333.383 416.636 333.263 cv
416.742 333.144 416.822 332.932 416.902 332.627 cv
417.965 332.627 li
417.832 334.826 li
415.306 334.826 li
415.306 336.309 li
415.306 336.805 415.333 337.155 415.386 337.359 cv
415.439 337.561 415.546 337.712 415.652 337.81 cv
415.785 337.911 416.024 338.009 416.37 338.11 cv
416.37 338.765 li
411.292 338.765 li
411.292 338.11 li
411.638 338.017 411.877 337.911 412.01 337.797 cv
412.143 337.68 412.223 337.526 412.276 337.333 cv
412.329 337.142 412.355 336.799 412.355 336.309 cv
412.355 334.826 li
407.012 334.826 li
407.012 333.751 li
cp
ef
406.427 319.665 mo
418.55 319.665 li
418.55 318.392 li
406.427 318.392 li
cp
ef
422.378 311.497 mo
427.881 311.497 li
427.881 312.155 li
427.536 312.195 427.27 312.29 427.11 312.444 cv
426.951 312.595 426.871 312.813 426.871 313.089 cv
426.871 313.309 426.871 313.524 426.924 313.731 cv
426.951 313.94 427.057 314.275 427.163 314.731 cv
429.157 321.875 li
431.603 314.763 li
431.709 314.482 431.789 314.222 431.842 313.975 cv
431.896 313.731 431.922 313.471 431.922 313.2 cv
431.922 312.874 431.842 312.627 431.683 312.452 cv
431.497 312.28 431.231 312.182 430.885 312.155 cv
430.885 311.497 li
435.192 311.497 li
435.192 312.155 li
434.926 312.195 434.714 312.277 434.554 312.399 cv
434.368 312.521 434.208 312.696 434.075 312.927 cv
433.916 313.155 433.756 313.527 433.57 314.044 cv
429.397 325.148 li
427.084 325.148 li
423.787 314.004 li
423.654 313.508 423.521 313.155 423.415 312.946 cv
423.335 312.736 423.202 312.569 423.043 312.439 cv
422.883 312.309 422.644 312.216 422.378 312.155 cv
cp
ef
444.497 322.612 mo
444.125 322.612 443.806 322.801 443.593 323.183 cv
443.38 323.562 443.247 324.109 443.194 324.825 cv
445.64 324.825 li
445.613 324.079 445.507 323.525 445.348 323.159 cv
445.161 322.795 444.869 322.612 444.497 322.612 cv
cp
444.603 321.851 mo
445.055 321.851 445.427 321.904 445.773 322.005 cv
446.118 322.108 446.384 322.249 446.624 322.432 cv
446.863 322.615 447.076 322.835 447.235 323.092 cv
447.421 323.4 447.554 323.753 447.66 324.154 cv
447.74 324.552 447.793 325.04 447.793 325.615 cv
443.168 325.615 li
443.168 326.496 443.327 327.146 443.62 327.56 cv
443.939 327.976 444.417 328.186 445.055 328.186 cv
445.427 328.186 445.746 328.117 446.039 327.976 cv
446.358 327.838 446.677 327.594 447.022 327.244 cv
447.607 327.886 li
447.102 328.411 446.624 328.785 446.118 329.003 cv
445.64 329.223 445.082 329.332 444.444 329.332 cv
443.3 329.332 442.45 329.021 441.891 328.401 cv
441.307 327.78 441.014 326.859 441.014 325.637 cv
441.014 324.846 441.174 324.167 441.466 323.594 cv
441.759 323.021 442.184 322.588 442.716 322.294 cv
443.247 322 443.885 321.851 444.603 321.851 cv
cp
439.1 321.851 mo
439.419 321.851 439.712 321.883 440.057 321.947 cv
440.057 323.963 li
438.728 323.963 li
438.648 323.681 438.542 323.464 438.409 323.313 cv
438.276 323.161 438.09 323.087 437.851 323.087 cv
437.744 323.087 437.638 323.119 437.505 323.185 cv
437.372 323.252 437.266 323.345 437.133 323.464 cv
437.026 323.583 436.947 323.703 436.92 323.827 cv
436.867 323.952 436.84 324.077 436.814 324.204 cv
436.814 324.331 436.787 324.52 436.787 324.774 cv
436.787 327.103 li
436.787 327.568 436.814 327.891 436.84 328.077 cv
436.894 328.26 436.947 328.406 437.053 328.509 cv
437.159 328.616 437.319 328.69 437.585 328.732 cv
437.585 329.215 li
433.969 329.215 li
433.969 328.732 li
434.208 328.671 434.368 328.586 434.448 328.486 cv
434.554 328.382 434.607 328.244 434.634 328.069 cv
434.66 327.894 434.687 327.576 434.687 327.111 cv
434.687 324.109 li
434.687 323.748 434.687 323.482 434.66 323.31 cv
434.66 323.138 434.634 322.997 434.581 322.894 cv
434.527 322.787 434.448 322.703 434.368 322.636 cv
434.262 322.573 434.102 322.514 433.863 322.466 cv
433.863 321.968 li
435.883 321.909 li
436.787 321.909 li
436.707 323.013 li
436.787 323.034 li
437.159 322.618 437.505 322.315 437.877 322.13 cv
438.276 321.944 438.675 321.851 439.1 321.851 cv
cp
453.429 318.726 mo
453.855 318.726 454.227 318.758 454.546 318.827 cv
454.546 320.318 li
453.562 320.318 li
453.483 320.05 453.376 319.853 453.27 319.726 cv
453.19 319.599 453.057 319.535 452.898 319.535 cv
452.685 319.535 452.525 319.604 452.393 319.745 cv
452.286 319.883 452.206 320.079 452.18 320.336 cv
452.127 320.591 452.1 320.952 452.1 321.413 cv
452.1 321.968 li
453.536 321.968 li
453.536 322.883 li
452.1 322.883 li
452.1 327.382 li
452.1 327.748 452.127 328.005 452.18 328.157 cv
452.206 328.308 452.286 328.427 452.366 328.515 cv
452.472 328.602 452.658 328.674 452.898 328.732 cv
452.898 329.215 li
449.256 329.215 li
449.256 328.732 li
449.495 328.666 449.654 328.589 449.734 328.507 cv
449.84 328.425 449.894 328.308 449.947 328.159 cv
449.973 328.011 450 327.753 450 327.382 cv
450 322.883 li
449.096 322.883 li
449.096 322.379 li
449.362 322.339 449.548 322.291 449.628 322.236 cv
449.734 322.18 449.814 322.09 449.894 321.968 cv
449.947 321.846 450 321.655 450.026 321.392 cv
450.106 320.514 450.425 319.851 450.984 319.4 cv
451.568 318.952 452.366 318.726 453.429 318.726 cv
cp
ef
598.77 282.158 mo
600.046 282.158 li
600.019 282.794 599.993 283.67 599.993 284.81 cv
599.993 293.114 li
599.993 293.512 600.019 293.803 600.046 293.989 cv
600.099 294.175 600.179 294.334 600.285 294.466 cv
600.391 294.599 600.551 294.679 600.764 294.758 cv
600.95 294.811 601.216 294.864 601.535 294.917 cv
601.854 294.944 602.252 294.971 602.758 294.997 cv
602.758 295.899 li
594.171 295.899 li
594.171 294.997 li
594.915 294.944 595.42 294.917 595.739 294.864 cv
596.058 294.785 596.297 294.705 596.457 294.599 cv
596.643 294.493 596.749 294.334 596.829 294.122 cv
596.909 293.909 596.935 293.591 596.935 293.114 cv
596.935 285.925 li
596.935 285.659 596.909 285.447 596.802 285.341 cv
596.696 285.208 596.537 285.155 596.377 285.155 cv
596.191 285.155 595.978 285.235 595.659 285.394 cv
595.367 285.527 594.862 285.845 594.171 286.323 cv
593.559 285.261 li
cp
ef
598.052 318.363 mo
597.361 318.363 596.856 318.593 596.51 319.055 cv
596.164 319.517 595.978 320.18 595.978 321.05 cv
595.978 321.997 596.164 322.711 596.51 323.188 cv
596.856 323.665 597.361 323.904 598.052 323.904 cv
598.743 323.904 599.248 323.668 599.594 323.199 cv
599.94 322.726 600.099 322.069 600.099 321.22 cv
600.099 320.331 599.913 319.633 599.541 319.124 cv
599.169 318.617 598.663 318.363 598.052 318.363 cv
cp
598.105 312.235 mo
597.441 312.235 596.935 312.434 596.616 312.832 cv
596.271 313.229 596.111 313.818 596.111 314.593 cv
596.111 315.463 596.271 316.126 596.616 316.588 cv
596.962 317.049 597.467 317.28 598.105 317.28 cv
598.77 317.28 599.248 317.063 599.567 316.628 cv
599.886 316.193 600.046 315.575 600.046 314.773 cv
600.046 313.951 599.886 313.322 599.541 312.887 cv
599.222 312.452 598.717 312.235 598.105 312.235 cv
cp
598.132 311.121 mo
599.753 311.121 600.976 311.418 601.8 312.007 cv
602.625 312.598 603.05 313.434 603.05 314.513 cv
603.05 315.23 602.864 315.856 602.465 316.394 cv
602.093 316.93 601.535 317.363 600.764 317.686 cv
600.79 317.816 li
601.561 318.116 602.146 318.546 602.545 319.111 cv
602.944 319.673 603.13 320.347 603.13 321.129 cv
603.13 321.912 602.917 322.596 602.518 323.183 cv
602.093 323.772 601.481 324.225 600.711 324.546 cv
599.913 324.867 598.982 325.029 597.946 325.029 cv
596.935 325.029 596.058 324.88 595.314 324.586 cv
594.569 324.292 593.984 323.859 593.559 323.294 cv
593.16 322.726 592.948 322.058 592.948 321.289 cv
592.948 320.538 593.134 319.888 593.533 319.339 cv
593.905 318.787 594.516 318.333 595.34 317.975 cv
595.314 317.845 li
593.852 317.209 593.107 316.153 593.107 314.673 cv
593.107 313.996 593.32 313.389 593.745 312.848 cv
594.171 312.306 594.755 311.885 595.553 311.579 cv
596.324 311.274 597.175 311.121 598.132 311.121 cv
cp
ef
591.937 305.759 mo
604.06 305.759 li
604.06 304.486 li
591.937 304.486 li
cp
ef
607.862 297.597 mo
613.392 297.597 li
613.392 298.26 li
613.046 298.286 612.78 298.393 612.621 298.525 cv
612.461 298.684 612.381 298.897 612.381 299.188 cv
612.381 299.401 612.381 299.613 612.435 299.825 cv
612.461 300.037 612.541 300.356 612.674 300.833 cv
614.641 307.969 li
617.113 300.86 li
617.22 300.568 617.3 300.303 617.353 300.064 cv
617.406 299.825 617.432 299.56 617.432 299.295 cv
617.432 298.976 617.353 298.711 617.193 298.552 cv
617.007 298.366 616.741 298.286 616.396 298.26 cv
616.396 297.597 li
620.702 297.597 li
620.702 298.26 li
620.437 298.286 620.224 298.366 620.064 298.499 cv
619.878 298.605 619.719 298.79 619.586 299.029 cv
619.426 299.241 619.267 299.613 619.081 300.143 cv
614.88 311.24 li
612.594 311.24 li
609.297 300.09 li
609.165 299.613 609.032 299.241 608.925 299.029 cv
608.819 298.844 608.713 298.658 608.553 298.525 cv
608.394 298.393 608.154 298.313 607.862 298.26 cv
cp
ef
630.007 308.707 mo
629.608 308.707 629.316 308.895 629.103 309.274 cv
628.864 309.656 628.731 310.203 628.705 310.919 cv
631.15 310.919 li
631.124 310.174 631.017 309.619 630.858 309.253 cv
630.672 308.887 630.379 308.707 630.007 308.707 cv
cp
630.114 307.945 mo
630.565 307.945 630.938 307.998 631.283 308.099 cv
631.602 308.203 631.895 308.343 632.134 308.526 cv
632.373 308.709 632.586 308.929 632.745 309.187 cv
632.932 309.494 633.065 309.847 633.144 310.248 cv
633.251 310.646 633.304 311.134 633.304 311.709 cv
628.651 311.709 li
628.678 312.59 628.837 313.237 629.13 313.654 cv
629.449 314.07 629.927 314.28 630.565 314.28 cv
630.911 314.28 631.257 314.211 631.549 314.07 cv
631.842 313.932 632.187 313.688 632.533 313.338 cv
633.118 313.98 li
632.613 314.505 632.134 314.88 631.629 315.097 cv
631.15 315.317 630.592 315.426 629.954 315.426 cv
628.811 315.426 627.96 315.116 627.375 314.495 cv
626.817 313.874 626.525 312.954 626.525 311.731 cv
626.525 310.94 626.684 310.261 626.977 309.688 cv
627.269 309.115 627.694 308.683 628.226 308.388 cv
628.758 308.094 629.396 307.945 630.114 307.945 cv
cp
624.61 307.945 mo
624.903 307.945 625.222 307.977 625.568 308.041 cv
625.568 310.057 li
624.238 310.057 li
624.159 309.776 624.026 309.558 623.893 309.407 cv
623.76 309.256 623.6 309.181 623.361 309.181 cv
623.255 309.181 623.148 309.213 623.015 309.28 cv
622.882 309.346 622.75 309.436 622.643 309.555 cv
622.537 309.675 622.457 309.797 622.43 309.922 cv
622.377 310.046 622.351 310.171 622.324 310.298 cv
622.324 310.426 622.298 310.614 622.298 310.869 cv
622.298 313.198 li
622.298 313.662 622.324 313.986 622.351 314.171 cv
622.377 314.354 622.457 314.5 622.563 314.604 cv
622.67 314.71 622.829 314.784 623.069 314.826 cv
623.069 315.309 li
619.48 315.309 li
619.48 314.826 li
619.692 314.765 619.878 314.681 619.958 314.58 cv
620.038 314.476 620.118 314.338 620.144 314.163 cv
620.171 313.988 620.197 313.667 620.197 313.206 cv
620.197 310.203 li
620.197 309.842 620.171 309.577 620.171 309.404 cv
620.171 309.229 620.118 309.091 620.091 308.988 cv
620.038 308.882 619.958 308.797 619.878 308.73 cv
619.772 308.667 619.612 308.608 619.373 308.561 cv
619.373 308.062 li
621.394 308.004 li
622.298 308.004 li
622.191 309.107 li
622.298 309.128 li
622.643 308.709 623.015 308.409 623.388 308.224 cv
623.76 308.038 624.185 307.945 624.61 307.945 cv
cp
638.94 304.82 mo
639.365 304.82 639.737 304.852 640.056 304.921 cv
640.056 306.412 li
639.046 306.412 li
638.966 306.144 638.887 305.948 638.78 305.82 cv
638.674 305.693 638.541 305.629 638.382 305.629 cv
638.195 305.629 638.009 305.698 637.903 305.839 cv
637.797 305.977 637.717 306.173 637.69 306.43 cv
637.637 306.685 637.611 307.046 637.611 307.508 cv
637.611 308.062 li
639.02 308.062 li
639.02 308.977 li
637.611 308.977 li
637.611 313.476 li
637.611 313.842 637.637 314.1 637.664 314.251 cv
637.717 314.402 637.797 314.521 637.876 314.609 cv
637.983 314.697 638.169 314.768 638.408 314.826 cv
638.408 315.309 li
634.766 315.309 li
634.766 314.826 li
635.005 314.76 635.165 314.683 635.245 314.601 cv
635.351 314.519 635.404 314.402 635.431 314.253 cv
635.484 314.105 635.51 313.845 635.51 313.476 cv
635.51 308.977 li
634.606 308.977 li
634.606 308.473 li
634.872 308.433 635.058 308.386 635.138 308.33 cv
635.245 308.274 635.324 308.184 635.404 308.062 cv
635.457 307.94 635.51 307.749 635.51 307.486 cv
635.59 306.608 635.936 305.945 636.494 305.494 cv
637.079 305.043 637.876 304.82 638.94 304.82 cv
cp
ef
.2645 1 1 .00109865 cmyk
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
519.041 233.214 mo
(S)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
519.041 233.214 mo
(S) false chp
.28526 lw
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
532.127 233.214 mo
(A)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
532.127 233.214 mo
(A) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 1952 21 <00020079000004f80555002f003c009bb0852b5840351c1b003131000331
914000003b072409060706a6442126071413a644143b033b9114032a1f1f
1b26251b01187e37373e2531017f0d2fe1322f11392fe111391133123911
33003fed2b2b00182f33332b11003333111239182f1aed2b111200393931
301b401a1c1b0031916c00003b073100916c240906212607143b916c1403
00183f2b2f33331133332b1112392f2b39393031590111141e0217152135
3e023511342e0227352132161514060715161617171e0217152126262727
2e0323031133323e0235342626232201aa0b16262efe5a3e2a0d0a17262e
01efeae897973d57355a27383a30feeb2644215828332b31316e71576c5c
374184705a0251feac484121150d31311027484a0361453f23150d31aab3
89c03608195d62a4484c280831357a3fa74c481d0b02a8fdae19467d5b5f
7e42>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g21 21 def
end
IILCOM+CambriaMath /Encoding get
dup 82 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 7{/.notdef}rp /g19 /.notdef /g21 
/g22 32{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
548.397 233.214 mo
(R)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
548.397 233.214 mo
(R) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
564.668 233.214 mo
( )sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
564.668 233.214 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 1186 15 <00010079000004100555001e0071b0852b58402700091009020c03090917
000b0ca6440b00030091400b19161716a64417030a09a4080820007f102f
e112392fe132003f2b110033182f1aed2b2b11120039182f5f5e5d31301b
401300091009020c030909170b00916c0b1916170300183f11332f2b1139
2f5f5e5d3031592521323e0437330321353e023511342e02273521150e03
1501a901062b3a29211e1b146514fc7d3e2a0d0a17262e01a52c25180c5c
0a15253c5b5bfe6e311027484a0361453f23150d31310c1320424800>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g15 15 def
end
IILCOM+CambriaMath /Encoding get
dup 76 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 32{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
569.446 233.214 mo
(L)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
569.446 233.214 mo
(L) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 4072 145 <00020069fff003d603cd000d001c0065b0852b58401f0011031195400016
071a031a95071016100b014d16830a200c014d0a0a1e0eb8fff0b50b014d
0e8303b8ffe0b30c014d032f2be12b12392f2be12b003fed2b00183f1aed
2b31301b400c0011956c0016071a956c071000183f2b3f2b303159052226
353436363332161514060601141633323e02353426262322060214d0db73
c880d6dc6ecafe88837a435e3b1a417048798110f5f0a5e46ff9e9a6e471
01facedd416e914f93c25bd2>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g145 145 def
end
IILCOM+CambriaMath /Encoding get
dup 111 /g145 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 27{/.notdef}rp /g145 4{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
583.779 233.214 mo
(o)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
583.779 233.214 mo
(o) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 3252 137 <0003003ffe4103e203cd0032004100530167b0852b58405742215227270a
082f0836030895c036010f361f362f36030936362f0f5201524000100115
0f10010f101f102f10ef10ff1005230310102f48010032000300ee40320f
194803489540191c2f3f033f952f10270a0c224c24b8ffc0402910014d24
241e2142424c45201013014c451e1e5402092831042a3b8405100f014d05
0515330000554cb8ffe0400b0f13014c4c15155533842a2fe112392fcd2b
12392f1112392f2be112173911392fcd2b1139113311392f2b1239cd3232
003fed2b00183f1aed2b00183f1aed2b110033111239182f5f5e5d715e5d
1acd5d12392f5e5d71ed2b11120039391112393931301b40494221522727
0a2f3608956cc036010f361f362f36030936362f0f52015240001001150f
10010f101f102f10ef10ff1005230310102f48013200ee6c320f1948956c
191c2f3f956c2f1000183f2b3f2b3f2b321112392f5f5e5d715e5d1acd5d
12392f5e5d712b1139391112393930315901270716161514062322270615
14161633333216161514060623222e023534363726263534363726263534
3e023332172101141633323e023534262623220613060615141633323636
35342e0223232203e2b9091f24c9b9533c4c1d4344f06a86396ccc8865a7
7741544d2f364051484b39658a5048470162fd4a666033482d153256385f
641933338f935a81440e27483a95510357070b1f6b3ea3b1153a38252610
426f4a5e935218395d463f6727134a32395f3d2a905c567f532911fed07d
88274459315876377efced2655365a55305a3c1c352a1900>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g137 137 def
end
IILCOM+CambriaMath /Encoding get
dup 103 /g137 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 19{/.notdef}rp /g137 7{/.notdef}rp /g145 4{/.notdef}rp 
/g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
597.873 233.214 mo
(g)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
597.873 233.214 mo
(g) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 3846 139 <00020053000001e9054400030019008cb0852b58402a17041904a7441915
11aa10100fa744100f02637003010f03df03020f035f03df030303018302
1385020ab8ffe0b30f014d0ab8ffc0b310014d0a2f2b2bc4e110e1002f5d
715ded3f2b001810e53f2b11003331301b401e1704191511aa100f030263
6c7003010f03df03020f035f03df030309030300182f5f5e5d715d2b3fe5
3f113330315901152335033e033511342e02273537331114161617152101
7fb8662721170d0418312de93d102d33fe780544c2c2faed0c1220424601
b4404e2f17083509fd355643230d3100>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g139 139 def
end
IILCOM+CambriaMath /Encoding get
dup 105 /g139 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 19{/.notdef}rp /g137 /.notdef /g139 5{/.notdef}rp 
/g145 4{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
610.905 233.214 mo
(i)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
610.905 233.214 mo
(i) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IILCOM+CambriaMath gcheck setglobal} if
2 2650 133 <00010069fff0035203cd002100c6b0852b5840442001300102b00101011f
8013472000121012201203091f12010f120119031240262948120f180f03
0f974018161f06030695401f1010100a1220131323020101230a831b2fe1
11392fcd12392f1a19cd1239182f003f1aed2b00183f1aed2b001810d62b
5f5e5d725e5d1a19ed1a1810cd5d7131301b40312001300102b00101011f
801213476c00121012201203091f12010f12011903124026294812180f97
6c18161f06956c1f1000183f2b3f2bc62b5f5e5d725e5d2b1a10cd5d7130
31590115232e022322060615141e0233323637170e032322263534363633
3216034a7f11324231466c3f183a604745774039334e595733bdc870ca84
528b03a5d1414b1e5ab885558d6438364442383d2913fbed94e57c13>IILCOM+CambriaMath AddT42Char 
IILCOM+CambriaMath /CharStrings get begin
/g133 133 def
end
IILCOM+CambriaMath /Encoding get
dup 99 /g133 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IILCOM+CambriaMath*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g883 /g884 /g885 13{/.notdef}rp /g4 
3{/.notdef}rp /g8 2{/.notdef}rp /g11 3{/.notdef}rp /g15 3{/.notdef}rp /g19 
/.notdef /g21 /g22 15{/.notdef}rp /g133 3{/.notdef}rp /g137 /.notdef 
/g139 5{/.notdef}rp /g145 4{/.notdef}rp /g150 139{/.notdef}rp]
IILCOM+CambriaMath nf
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
617.913 233.214 mo
(c)sh
IILCOM+CambriaMath*1 [26.5425 0 -8.27178e-8 -26.4852 0 0 ]msf
617.913 233.214 mo
(c) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
795.074 232.763 mo
(S)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
795.074 232.763 mo
(S) false chp
.28457 lw
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
808.446 232.763 mo
(S)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
808.446 232.763 mo
(S) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
821.579 232.763 mo
( )sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
821.579 232.763 mo
( ) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
826.319 232.763 mo
(L)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
826.319 232.763 mo
(L) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
840.644 232.763 mo
(o)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
840.644 232.763 mo
(o) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
854.704 232.763 mo
(g)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
854.704 232.763 mo
(g) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
867.785 232.763 mo
(i)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
867.785 232.763 mo
(i) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
874.775 232.763 mo
(c)sh
IILCOM+CambriaMath*1 [26.4787 0 -8.2519e-8 -26.4216 0 0 ]msf
874.775 232.763 mo
(c) false chp
gsave
[2.6585 0 -8.28504e-9 -2.65277 2.99902 568.365 ]ct
@
grestore newpath
657.549 310.365 mo
670.709 310.309 li
670.682 307.025 li
657.523 307.08 li
cp
680.572 310.266 mo
693.732 310.211 li
693.705 306.927 li
680.545 306.982 li
cp
703.595 310.168 mo
716.754 310.113 li
716.754 306.831 li
703.595 306.887 li
cp
726.617 310.073 mo
739.777 310.017 li
739.777 306.733 li
726.617 306.789 li
cp
749.666 309.975 mo
762.826 309.919 li
762.799 306.637 li
749.64 306.693 li
cp
772.689 309.876 mo
785.849 309.823 li
785.822 306.539 li
772.663 306.595 li
cp
795.712 309.781 mo
808.871 309.725 li
808.871 306.441 li
795.712 306.497 li
cp
818.734 309.683 mo
831.894 309.627 li
831.894 306.346 li
818.734 306.401 li
cp
841.784 309.587 mo
854.943 309.532 li
854.917 306.247 li
841.757 306.303 li
cp
864.806 309.489 mo
877.966 309.433 li
877.939 306.152 li
864.78 306.208 li
cp
887.829 309.391 mo
900.989 309.335 li
900.989 306.054 li
887.829 306.109 li
cp
910.852 309.295 mo
924.011 309.24 li
924.011 305.956 li
910.852 306.011 li
cp
933.901 309.197 mo
947.06 309.142 li
947.034 305.86 li
933.874 305.916 li
cp
956.924 309.102 mo
970.083 309.046 li
970.057 305.762 li
956.897 305.818 li
cp
979.946 309.004 mo
993.106 308.948 li
993.106 305.666 li
979.946 305.72 li
cp
1002.97 308.906 mo
1012.89 308.866 li
1012.89 305.582 li
1002.97 305.624 li
cp
.997223 .918425 .647791 .507591 cmyk
f
662.6 320.713 mo
662.6 329.682 li
658.214 329.682 li
658.214 320.713 li
cp
653.827 322.901 mo
660.394 309.77 li
666.987 322.901 li
cp
666.987 327.493 mo
660.42 340.625 li
653.827 327.493 li
cp
f
661.67 346.081 mo
662.946 346.081 li
662.893 346.718 662.866 347.601 662.866 348.729 cv
662.866 357.045 li
662.866 357.43 662.893 357.719 662.946 357.915 cv
662.973 358.109 663.052 358.268 663.159 358.393 cv
663.292 358.515 663.425 358.61 663.637 358.679 cv
663.85 358.751 664.116 358.804 664.408 358.839 cv
664.727 358.876 665.153 358.902 665.658 358.915 cv
665.658 359.82 li
657.044 359.82 li
657.044 358.915 li
657.789 358.881 658.32 358.836 658.639 358.78 cv
658.958 358.724 659.198 358.64 659.357 358.526 cv
659.517 358.414 659.65 358.255 659.729 358.048 cv
659.809 357.844 659.836 357.509 659.836 357.045 cv
659.836 349.851 li
659.836 349.58 659.782 349.384 659.676 349.265 cv
659.57 349.145 659.437 349.087 659.251 349.087 cv
659.091 349.087 658.852 349.161 658.56 349.315 cv
658.241 349.466 657.762 349.779 657.071 350.249 cv
656.459 349.196 li
cp
ef
656.087 375.05 mo
657.071 375.05 657.868 375.18 658.48 375.442 cv
659.118 375.705 659.543 376.06 659.836 376.506 cv
660.102 376.954 660.234 377.477 660.234 378.074 cv
660.234 378.599 660.155 379.084 659.942 379.535 cv
659.756 379.986 659.41 380.501 658.932 381.079 cv
658.453 381.655 657.629 382.48 656.486 383.554 cv
656.14 383.886 655.715 384.324 655.236 384.862 cv
654.758 385.403 654.359 385.868 654.067 386.252 cv
654.067 386.35 li
657.602 386.35 li
658.054 386.35 658.373 386.319 658.586 386.255 cv
658.799 386.194 658.958 386.082 659.091 385.929 cv
659.198 385.772 659.304 385.539 659.384 385.226 cv
660.527 385.226 li
660.314 388.788 li
651.169 388.788 li
651.169 388.13 li
651.674 386.958 652.737 385.446 654.306 383.594 cv
655.024 382.753 655.582 382.061 655.954 381.517 cv
656.326 380.973 656.619 380.459 656.805 379.973 cv
656.991 379.49 657.071 378.989 657.071 378.472 cv
657.071 377.742 656.911 377.169 656.592 376.755 cv
656.247 376.341 655.821 376.135 655.236 376.135 cv
654.173 376.135 653.482 376.914 653.163 378.472 cv
651.382 378.472 li
651.382 376.124 li
652.445 375.686 653.322 375.397 653.987 375.259 cv
654.652 375.119 655.369 375.05 656.087 375.05 cv
cp
ef
666.508 375.039 mo
664.009 378.801 li
664.009 378.925 li
666.508 378.925 li
666.508 377.254 li
666.508 376.551 666.535 375.814 666.588 375.039 cv
cp
667.014 372.715 mo
668.662 372.715 li
668.662 378.925 li
668.901 378.925 li
669.14 378.925 669.3 378.909 669.406 378.878 cv
669.513 378.846 669.592 378.787 669.646 378.7 cv
669.725 378.612 669.805 378.456 669.858 378.233 cv
670.629 378.233 li
670.549 379.846 li
668.662 379.846 li
668.662 380.936 li
668.662 381.299 668.688 381.557 668.742 381.705 cv
668.795 381.854 668.848 381.965 668.954 382.037 cv
669.034 382.111 669.194 382.183 669.459 382.257 cv
669.459 382.74 li
665.711 382.74 li
665.711 382.257 li
665.977 382.188 666.163 382.111 666.243 382.026 cv
666.349 381.941 666.402 381.827 666.455 381.687 cv
666.482 381.546 666.508 381.294 666.508 380.936 cv
666.508 379.846 li
662.574 379.846 li
662.574 379.058 li
cp
ef
650.026 368.415 mo
661.032 368.415 li
672.038 368.415 li
672.038 369.688 li
661.032 369.688 li
650.026 369.688 li
cp
ef
675.866 361.52 mo
681.37 361.52 li
681.37 362.178 li
681.024 362.218 680.785 362.314 680.599 362.465 cv
680.439 362.619 680.359 362.834 680.359 363.112 cv
680.359 363.332 680.386 363.545 680.412 363.754 cv
680.466 363.964 680.545 364.295 680.678 364.754 cv
682.646 371.895 li
685.118 364.783 li
685.198 364.505 685.278 364.242 685.331 363.998 cv
685.41 363.751 685.437 363.494 685.437 363.221 cv
685.437 362.897 685.331 362.648 685.171 362.475 cv
685.012 362.303 684.746 362.205 684.4 362.178 cv
684.4 361.52 li
688.68 361.52 li
688.68 362.178 li
688.441 362.218 688.228 362.298 688.042 362.42 cv
687.856 362.544 687.697 362.72 687.564 362.948 cv
687.431 363.176 687.245 363.55 687.059 364.067 cv
682.885 375.169 li
680.572 375.169 li
677.302 364.027 li
677.143 363.531 677.01 363.176 676.93 362.969 cv
676.823 362.759 676.691 362.59 676.531 362.46 cv
676.372 362.332 676.159 362.237 675.866 362.178 cv
cp
ef
697.985 372.633 mo
697.613 372.633 697.321 372.824 697.081 373.203 cv
696.869 373.583 696.736 374.132 696.682 374.848 cv
699.128 374.848 li
699.102 374.103 699.022 373.545 698.836 373.182 cv
698.65 372.816 698.384 372.633 697.985 372.633 cv
cp
698.091 371.874 mo
698.543 371.874 698.942 371.925 699.261 372.028 cv
699.607 372.129 699.899 372.272 700.139 372.455 cv
700.378 372.638 700.564 372.858 700.723 373.116 cv
700.909 373.423 701.042 373.776 701.149 374.174 cv
701.229 374.575 701.282 375.06 701.308 375.636 cv
696.656 375.636 li
696.656 376.517 696.815 377.167 697.134 377.583 cv
697.427 377.999 697.905 378.206 698.543 378.206 cv
698.916 378.206 699.261 378.137 699.554 377.999 cv
699.846 377.862 700.165 377.615 700.511 377.265 cv
701.096 377.909 li
700.617 378.435 700.112 378.806 699.633 379.026 cv
699.128 379.246 698.57 379.355 697.932 379.355 cv
696.815 379.355 695.938 379.045 695.38 378.424 cv
694.795 377.803 694.529 376.88 694.529 375.657 cv
694.529 374.869 694.662 374.187 694.954 373.617 cv
695.247 373.044 695.672 372.612 696.204 372.315 cv
696.762 372.02 697.374 371.874 698.091 371.874 cv
cp
692.615 371.874 mo
692.907 371.874 693.226 371.906 693.545 371.97 cv
693.545 373.986 li
692.216 373.986 li
692.136 373.702 692.03 373.487 691.897 373.336 cv
691.764 373.185 691.578 373.108 691.365 373.108 cv
691.259 373.108 691.126 373.142 690.993 373.206 cv
690.86 373.272 690.754 373.365 690.648 373.484 cv
690.541 373.604 690.462 373.726 690.408 373.851 cv
690.355 373.975 690.329 374.1 690.329 374.227 cv
690.302 374.352 690.302 374.543 690.302 374.795 cv
690.302 377.127 li
690.302 377.588 690.302 377.912 690.355 378.098 cv
690.382 378.283 690.462 378.429 690.541 378.533 cv
690.648 378.639 690.834 378.713 691.073 378.755 cv
691.073 379.238 li
687.457 379.238 li
687.457 378.755 li
687.697 378.692 687.856 378.61 687.936 378.506 cv
688.042 378.405 688.096 378.267 688.122 378.09 cv
688.175 377.915 688.175 377.596 688.175 377.135 cv
688.175 374.132 li
688.175 373.771 688.175 373.503 688.149 373.331 cv
688.149 373.158 688.122 373.02 688.069 372.914 cv
688.016 372.811 687.963 372.726 687.856 372.659 cv
687.776 372.593 687.59 372.537 687.378 372.487 cv
687.378 371.991 li
689.372 371.933 li
690.302 371.933 li
690.196 373.036 li
690.276 373.057 li
690.648 372.638 691.02 372.336 691.392 372.15 cv
691.764 371.967 692.163 371.874 692.615 371.874 cv
cp
706.918 368.747 mo
707.343 368.747 707.715 368.781 708.034 368.85 cv
708.034 370.341 li
707.051 370.341 li
706.971 370.073 706.865 369.874 706.785 369.747 cv
706.678 369.622 706.546 369.558 706.386 369.558 cv
706.173 369.558 706.014 369.627 705.908 369.765 cv
705.801 369.906 705.721 370.102 705.668 370.357 cv
705.642 370.614 705.615 370.972 705.615 371.436 cv
705.615 371.991 li
707.024 371.991 li
707.024 372.904 li
705.615 372.904 li
705.615 377.405 li
705.615 377.769 705.615 378.029 705.668 378.177 cv
705.695 378.328 705.775 378.448 705.881 378.535 cv
705.987 378.623 706.147 378.697 706.413 378.755 cv
706.413 379.238 li
702.771 379.238 li
702.771 378.755 li
702.983 378.687 703.143 378.612 703.249 378.53 cv
703.329 378.445 703.382 378.331 703.435 378.182 cv
703.462 378.034 703.488 377.774 703.488 377.405 cv
703.488 372.904 li
702.611 372.904 li
702.611 372.399 li
702.85 372.36 703.036 372.315 703.143 372.256 cv
703.249 372.201 703.329 372.113 703.382 371.991 cv
703.435 371.869 703.488 371.675 703.515 371.413 cv
703.595 370.537 703.914 369.874 704.498 369.423 cv
705.057 368.972 705.881 368.747 706.918 368.747 cv
cp
ef
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/IILCOM+CambriaMath*1 uf
/IILCOM+CambriaMath uf
/KAAAAA+CambriaMath uf
/IILCOL+Calibri-Bold*1 uf
/IILCOL+Calibri-Bold uf
/IAAAAA+Calibri-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
